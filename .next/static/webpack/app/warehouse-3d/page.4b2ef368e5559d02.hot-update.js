"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("app/warehouse-3d/page",{

/***/ "(app-pages-browser)/./src/components/3d/WarehouseSimulation.ts":
/*!**************************************************!*\
  !*** ./src/components/3d/WarehouseSimulation.ts ***!
  \**************************************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   WarehouseSimulation: function() { return /* binding */ WarehouseSimulation; }\n/* harmony export */ });\n/* harmony import */ var three__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! three */ \"(app-pages-browser)/./node_modules/three/build/three.core.js\");\n/* harmony import */ var three_examples_jsm_controls_OrbitControls__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! three/examples/jsm/controls/OrbitControls */ \"(app-pages-browser)/./node_modules/three/examples/jsm/controls/OrbitControls.js\");\n/* harmony import */ var three_examples_jsm_libs_lil_gui_module_min_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! three/examples/jsm/libs/lil-gui.module.min.js */ \"(app-pages-browser)/./node_modules/three/examples/jsm/libs/lil-gui.module.min.js\");\n/* harmony import */ var _tweenjs_tween_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @tweenjs/tween.js */ \"(app-pages-browser)/./node_modules/@tweenjs/tween.js/dist/tween.esm.js\");\n\n\n\n\nclass WarehouseSimulation {\n    createWarehouse() {\n        const warehouse = new three__WEBPACK_IMPORTED_MODULE_1__.Group();\n        // Floor\n        const floorGeometry = new three__WEBPACK_IMPORTED_MODULE_1__.PlaneGeometry(50, 50);\n        const floorMaterial = new three__WEBPACK_IMPORTED_MODULE_1__.MeshStandardMaterial({\n            color: 0x808080\n        });\n        const floor = new three__WEBPACK_IMPORTED_MODULE_1__.Mesh(floorGeometry, floorMaterial);\n        floor.rotation.x = -Math.PI / 2;\n        floor.receiveShadow = true;\n        warehouse.add(floor);\n        // Walls\n        const wallMaterial = new three__WEBPACK_IMPORTED_MODULE_1__.MeshStandardMaterial({\n            color: 0xcccccc\n        });\n        const wallGeometry = new three__WEBPACK_IMPORTED_MODULE_1__.BoxGeometry(50, 20, 1);\n        const backWall = new three__WEBPACK_IMPORTED_MODULE_1__.Mesh(wallGeometry, wallMaterial);\n        backWall.position.set(0, 10, -25);\n        warehouse.add(backWall);\n        const leftWall = new three__WEBPACK_IMPORTED_MODULE_1__.Mesh(wallGeometry, wallMaterial);\n        leftWall.rotation.y = Math.PI / 2;\n        leftWall.position.set(-25, 10, 0);\n        warehouse.add(leftWall);\n        const rightWall = new three__WEBPACK_IMPORTED_MODULE_1__.Mesh(wallGeometry, wallMaterial);\n        rightWall.rotation.y = Math.PI / 2;\n        rightWall.position.set(25, 10, 0);\n        warehouse.add(rightWall);\n        this.scene.add(warehouse);\n        return warehouse;\n    }\n    createZones() {\n        const zones = new three__WEBPACK_IMPORTED_MODULE_1__.Group();\n        const zoneGeometry = new three__WEBPACK_IMPORTED_MODULE_1__.BoxGeometry(8, 0.1, 8);\n        const zoneMaterials = [\n            new three__WEBPACK_IMPORTED_MODULE_1__.MeshStandardMaterial({\n                color: 0xff9999\n            }),\n            new three__WEBPACK_IMPORTED_MODULE_1__.MeshStandardMaterial({\n                color: 0x99ff99\n            }),\n            new three__WEBPACK_IMPORTED_MODULE_1__.MeshStandardMaterial({\n                color: 0x9999ff\n            }),\n            new three__WEBPACK_IMPORTED_MODULE_1__.MeshStandardMaterial({\n                color: 0xffff99\n            }),\n            new three__WEBPACK_IMPORTED_MODULE_1__.MeshStandardMaterial({\n                color: 0xff99ff\n            })\n        ];\n        for(let i = 0; i < 5; i++){\n            const zone = new three__WEBPACK_IMPORTED_MODULE_1__.Mesh(zoneGeometry, zoneMaterials[i]);\n            zone.position.set(-16 + i * 8, 0.1, 0);\n            zone.receiveShadow = true;\n            zones.add(zone);\n        }\n        this.scene.add(zones);\n        return zones;\n    }\n    createTruck() {\n        const truck = new three__WEBPACK_IMPORTED_MODULE_1__.Group();\n        // Truck body\n        const bodyGeometry = new three__WEBPACK_IMPORTED_MODULE_1__.BoxGeometry(6, 4, 10);\n        const bodyMaterial = new three__WEBPACK_IMPORTED_MODULE_1__.MeshStandardMaterial({\n            color: 0x3366cc\n        });\n        const body = new three__WEBPACK_IMPORTED_MODULE_1__.Mesh(bodyGeometry, bodyMaterial);\n        body.position.y = 2;\n        truck.add(body);\n        // Wheels\n        const wheelGeometry = new three__WEBPACK_IMPORTED_MODULE_1__.CylinderGeometry(1, 1, 0.5, 16);\n        const wheelMaterial = new three__WEBPACK_IMPORTED_MODULE_1__.MeshStandardMaterial({\n            color: 0x333333\n        });\n        for(let i = 0; i < 4; i++){\n            const wheel = new three__WEBPACK_IMPORTED_MODULE_1__.Mesh(wheelGeometry, wheelMaterial);\n            wheel.rotation.z = Math.PI / 2;\n            wheel.position.set(i < 2 ? -2 : 2, 0.5, i % 2 === 0 ? -3 : 3);\n            truck.add(wheel);\n        }\n        truck.position.set(0, 0, 15);\n        this.scene.add(truck);\n        return truck;\n    }\n    createZoneLabels() {\n        // Remove existing labels\n        this.zoneLabels.forEach((label)=>{\n            if (label.parentElement) {\n                label.parentElement.removeChild(label);\n            }\n        });\n        this.zoneLabels = [];\n        // Create new labels\n        this.zones.children.forEach((zone, index)=>{\n            const label = document.createElement(\"div\");\n            label.className = \"zone-label\";\n            label.textContent = \"Zone \".concat(index + 1);\n            document.body.appendChild(label);\n            this.zoneLabels.push(label);\n        });\n    }\n    updateZoneLabels() {\n        this.zones.children.forEach((zone, index)=>{\n            const label = this.zoneLabels[index];\n            if (label) {\n                const position = zone.position.clone();\n                position.project(this.camera);\n                const x = (position.x * 0.5 + 0.5) * window.innerWidth;\n                const y = (-position.y * 0.5 + 0.5) * window.innerHeight;\n                label.style.transform = \"translate(-50%, -50%) translate(\".concat(x, \"px, \").concat(y, \"px)\");\n            }\n        });\n    }\n    setupGUI() {\n        const params = {\n            productType: \"wheel\",\n            zone: 0,\n            addProduct: ()=>this.addProductToZone(),\n            loadInTruck: ()=>this.removeProductFromZone(),\n            startTruck: ()=>this.startTruck()\n        };\n        this.gui.add(params, \"productType\", [\n            \"wheel\",\n            \"box\",\n            \"cylinder\"\n        ]).onChange((value)=>this.currentProductType = value);\n        const zoneOptions = {};\n        for(let i = 1; i <= 5; i++){\n            zoneOptions[\"Zone \".concat(i)] = i - 1;\n        }\n        this.gui.add(params, \"zone\", zoneOptions).onChange((value)=>this.selectedZone = value);\n        this.gui.add(params, \"addProduct\");\n        this.gui.add(params, \"loadInTruck\");\n        this.gui.add(params, \"startTruck\");\n    }\n    addProductToZone() {\n        var _this_inventory_get;\n        const zoneProducts = this.inventory.get(this.selectedZone) || [];\n        if (zoneProducts.length >= this.ZONE_CAPACITY) {\n            console.warn(\"Zone \".concat(this.selectedZone + 1, \" is at full capacity!\"));\n            return;\n        }\n        const product = this.createProduct(this.currentProductType);\n        const zone = this.zones.children[this.selectedZone];\n        product.position.copy(zone.position);\n        product.position.y = 2 + zoneProducts.length * 0.5;\n        this.scene.add(product);\n        if (!this.inventory.has(this.selectedZone)) {\n            this.inventory.set(this.selectedZone, []);\n        }\n        (_this_inventory_get = this.inventory.get(this.selectedZone)) === null || _this_inventory_get === void 0 ? void 0 : _this_inventory_get.push(product);\n    }\n    removeProductFromZone() {\n        const products = this.inventory.get(this.selectedZone);\n        if (products && products.length > 0) {\n            const product = products.pop();\n            if (product) {\n                new _tweenjs_tween_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].Tween(product.position).to({\n                    x: this.truck.position.x,\n                    y: 2,\n                    z: this.truck.position.z\n                }, 1000).easing(_tweenjs_tween_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].Easing.Quadratic.Out).onComplete(()=>{\n                    this.scene.remove(product);\n                }).start();\n            }\n        }\n    }\n    startTruck() {\n        new _tweenjs_tween_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].Tween(this.truck.position).to({\n            z: 30\n        }, 2000).easing(_tweenjs_tween_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].Easing.Quadratic.InOut).onComplete(()=>{\n            this.truck.position.z = 15;\n        }).start();\n    }\n    createProduct(type) {\n        let geometry;\n        let material;\n        switch(type){\n            case \"wheel\":\n                geometry = new three__WEBPACK_IMPORTED_MODULE_1__.TorusGeometry(0.5, 0.2, 16, 32);\n                material = new three__WEBPACK_IMPORTED_MODULE_1__.MeshStandardMaterial({\n                    color: 0x333333\n                });\n                break;\n            case \"box\":\n                geometry = new three__WEBPACK_IMPORTED_MODULE_1__.BoxGeometry(1, 1, 1);\n                material = new three__WEBPACK_IMPORTED_MODULE_1__.MeshStandardMaterial({\n                    color: 0x995533\n                });\n                break;\n            case \"cylinder\":\n                geometry = new three__WEBPACK_IMPORTED_MODULE_1__.CylinderGeometry(0.5, 0.5, 1, 16);\n                material = new three__WEBPACK_IMPORTED_MODULE_1__.MeshStandardMaterial({\n                    color: 0x339955\n                });\n                break;\n            default:\n                geometry = new three__WEBPACK_IMPORTED_MODULE_1__.BoxGeometry(1, 1, 1);\n                material = new three__WEBPACK_IMPORTED_MODULE_1__.MeshStandardMaterial({\n                    color: 0xcccccc\n                });\n        }\n        const product = new three__WEBPACK_IMPORTED_MODULE_1__.Mesh(geometry, material);\n        product.castShadow = true;\n        return product;\n    }\n    animate() {\n        this.controls.update();\n        this.updateZoneLabels();\n        this.renderer.render(this.scene, this.camera);\n    }\n    dispose() {\n        this.gui.destroy();\n        this.zoneLabels.forEach((label)=>{\n            if (label.parentElement) {\n                label.parentElement.removeChild(label);\n            }\n        });\n        this.scene.traverse((object)=>{\n            if (object instanceof three__WEBPACK_IMPORTED_MODULE_1__.Mesh) {\n                object.geometry.dispose();\n                if (object.material instanceof three__WEBPACK_IMPORTED_MODULE_1__.Material) {\n                    object.material.dispose();\n                }\n            }\n        });\n        this.inventory.clear();\n    }\n    constructor(scene, camera, renderer){\n        this.ZONE_CAPACITY = 8;\n        this.scene = scene;\n        this.camera = camera;\n        this.renderer = renderer;\n        this.inventory = new Map();\n        this.zoneLabels = [];\n        this.currentProductType = \"wheel\";\n        this.selectedZone = 0;\n        // Setup controls\n        this.controls = new three_examples_jsm_controls_OrbitControls__WEBPACK_IMPORTED_MODULE_2__.OrbitControls(camera, renderer.domElement);\n        this.controls.enableDamping = true;\n        this.controls.dampingFactor = 0.05;\n        // Create warehouse elements\n        this.warehouse = this.createWarehouse();\n        this.zones = this.createZones();\n        this.truck = this.createTruck();\n        this.createZoneLabels();\n        // Setup GUI\n        this.gui = new three_examples_jsm_libs_lil_gui_module_min_js__WEBPACK_IMPORTED_MODULE_3__.GUI();\n        this.setupGUI();\n    }\n}\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL3NyYy9jb21wb25lbnRzLzNkL1dhcmVob3VzZVNpbXVsYXRpb24udHMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7QUFBOEI7QUFDMkM7QUFDTjtBQUM5QjtBQUU5QixNQUFNSTtJQXdDSEMsa0JBQStCO1FBQ3JDLE1BQU1DLFlBQVksSUFBSU4sd0NBQVc7UUFFakMsUUFBUTtRQUNSLE1BQU1RLGdCQUFnQixJQUFJUixnREFBbUIsQ0FBQyxJQUFJO1FBQ2xELE1BQU1VLGdCQUFnQixJQUFJVix1REFBMEIsQ0FBQztZQUFFWSxPQUFPO1FBQVM7UUFDdkUsTUFBTUMsUUFBUSxJQUFJYix1Q0FBVSxDQUFDUSxlQUFlRTtRQUM1Q0csTUFBTUUsUUFBUSxDQUFDQyxDQUFDLEdBQUcsQ0FBQ0MsS0FBS0MsRUFBRSxHQUFHO1FBQzlCTCxNQUFNTSxhQUFhLEdBQUc7UUFDdEJiLFVBQVVjLEdBQUcsQ0FBQ1A7UUFFZCxRQUFRO1FBQ1IsTUFBTVEsZUFBZSxJQUFJckIsdURBQTBCLENBQUM7WUFBRVksT0FBTztRQUFTO1FBQ3RFLE1BQU1VLGVBQWUsSUFBSXRCLDhDQUFpQixDQUFDLElBQUksSUFBSTtRQUVuRCxNQUFNd0IsV0FBVyxJQUFJeEIsdUNBQVUsQ0FBQ3NCLGNBQWNEO1FBQzlDRyxTQUFTQyxRQUFRLENBQUNDLEdBQUcsQ0FBQyxHQUFHLElBQUksQ0FBQztRQUM5QnBCLFVBQVVjLEdBQUcsQ0FBQ0k7UUFFZCxNQUFNRyxXQUFXLElBQUkzQix1Q0FBVSxDQUFDc0IsY0FBY0Q7UUFDOUNNLFNBQVNaLFFBQVEsQ0FBQ2EsQ0FBQyxHQUFHWCxLQUFLQyxFQUFFLEdBQUc7UUFDaENTLFNBQVNGLFFBQVEsQ0FBQ0MsR0FBRyxDQUFDLENBQUMsSUFBSSxJQUFJO1FBQy9CcEIsVUFBVWMsR0FBRyxDQUFDTztRQUVkLE1BQU1FLFlBQVksSUFBSTdCLHVDQUFVLENBQUNzQixjQUFjRDtRQUMvQ1EsVUFBVWQsUUFBUSxDQUFDYSxDQUFDLEdBQUdY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IjpbIndlYnBhY2s6Ly9fTl9FLy4vc3JjL2NvbXBvbmVudHMvM2QvV2FyZWhvdXNlU2ltdWxhdGlvbi50cz8wOWIzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCAqIGFzIFRIUkVFIGZyb20gJ3RocmVlJ1xuaW1wb3J0IHsgT3JiaXRDb250cm9scyB9IGZyb20gJ3RocmVlL2V4YW1wbGVzL2pzbS9jb250cm9scy9PcmJpdENvbnRyb2xzJ1xuaW1wb3J0IHsgR1VJIH0gZnJvbSAndGhyZWUvZXhhbXBsZXMvanNtL2xpYnMvbGlsLWd1aS5tb2R1bGUubWluLmpzJ1xuaW1wb3J0IFRXRUVOIGZyb20gJ0B0d2VlbmpzL3R3ZWVuLmpzJ1xuXG5leHBvcnQgY2xhc3MgV2FyZWhvdXNlU2ltdWxhdGlvbiB7XG4gIHByaXZhdGUgc2NlbmU6IFRIUkVFLlNjZW5lXG4gIHByaXZhdGUgY2FtZXJhOiBUSFJFRS5QZXJzcGVjdGl2ZUNhbWVyYVxuICBwcml2YXRlIHJlbmRlcmVyOiBUSFJFRS5XZWJHTFJlbmRlcmVyXG4gIHByaXZhdGUgY29udHJvbHM6IE9yYml0Q29udHJvbHNcbiAgcHJpdmF0ZSB3YXJlaG91c2U6IFRIUkVFLkdyb3VwXG4gIHByaXZhdGUgem9uZXM6IFRIUkVFLkdyb3VwXG4gIHByaXZhdGUgdHJ1Y2s6IFRIUkVFLkdyb3VwXG4gIHByaXZhdGUgem9uZUxhYmVsczogSFRNTERpdkVsZW1lbnRbXVxuICBwcml2YXRlIGd1aTogR1VJXG4gIHByaXZhdGUgaW52ZW50b3J5OiBNYXA8bnVtYmVyLCBUSFJFRS5NZXNoW10+XG4gIHByaXZhdGUgY3VycmVudFByb2R1Y3RUeXBlOiBzdHJpbmdcbiAgcHJpdmF0ZSBzZWxlY3RlZFpvbmU6IG51bWJlclxuICBwcml2YXRlIHJlYWRvbmx5IFpPTkVfQ0FQQUNJVFkgPSA4XG5cbiAgY29uc3RydWN0b3Ioc2NlbmU6IFRIUkVFLlNjZW5lLCBjYW1lcmE6IFRIUkVFLlBlcnNwZWN0aXZlQ2FtZXJhLCByZW5kZXJlcjogVEhSRUUuV2ViR0xSZW5kZXJlcikge1xuICAgIHRoaXMuc2NlbmUgPSBzY2VuZVxuICAgIHRoaXMuY2FtZXJhID0gY2FtZXJhXG4gICAgdGhpcy5yZW5kZXJlciA9IHJlbmRlcmVyXG4gICAgdGhpcy5pbnZlbnRvcnkgPSBuZXcgTWFwKClcbiAgICB0aGlzLnpvbmVMYWJlbHMgPSBbXVxuICAgIHRoaXMuY3VycmVudFByb2R1Y3RUeXBlID0gJ3doZWVsJ1xuICAgIHRoaXMuc2VsZWN0ZWRab25lID0gMFxuXG4gICAgLy8gU2V0dXAgY29udHJvbHNcbiAgICB0aGlzLmNvbnRyb2xzID0gbmV3IE9yYml0Q29udHJvbHMoY2FtZXJhLCByZW5kZXJlci5kb21FbGVtZW50KVxuICAgIHRoaXMuY29udHJvbHMuZW5hYmxlRGFtcGluZyA9IHRydWVcbiAgICB0aGlzLmNvbnRyb2xzLmRhbXBpbmdGYWN0b3IgPSAwLjA1XG5cbiAgICAvLyBDcmVhdGUgd2FyZWhvdXNlIGVsZW1lbnRzXG4gICAgdGhpcy53YXJlaG91c2UgPSB0aGlzLmNyZWF0ZVdhcmVob3VzZSgpXG4gICAgdGhpcy56b25lcyA9IHRoaXMuY3JlYXRlWm9uZXMoKVxuICAgIHRoaXMudHJ1Y2sgPSB0aGlzLmNyZWF0ZVRydWNrKClcbiAgICB0aGlzLmNyZWF0ZVpvbmVMYWJlbHMoKVxuXG4gICAgLy8gU2V0dXAgR1VJXG4gICAgdGhpcy5ndWkgPSBuZXcgR1VJKClcbiAgICB0aGlzLnNldHVwR1VJKClcbiAgfVxuXG4gIHByaXZhdGUgY3JlYXRlV2FyZWhvdXNlKCk6IFRIUkVFLkdyb3VwIHtcbiAgICBjb25zdCB3YXJlaG91c2UgPSBuZXcgVEhSRUUuR3JvdXAoKVxuICAgIFxuICAgIC8vIEZsb29yXG4gICAgY29uc3QgZmxvb3JHZW9tZXRyeSA9IG5ldyBUSFJFRS5QbGFuZUdlb21ldHJ5KDUwLCA1MClcbiAgICBjb25zdCBmbG9vck1hdGVyaWFsID0gbmV3IFRIUkVFLk1lc2hTdGFuZGFyZE1hdGVyaWFsKHsgY29sb3I6IDB4ODA4MDgwIH0pXG4gICAgY29uc3QgZmxvb3IgPSBuZXcgVEhSRUUuTWVzaChmbG9vckdlb21ldHJ5LCBmbG9vck1hdGVyaWFsKVxuICAgIGZsb29yLnJvdGF0aW9uLnggPSAtTWF0aC5QSSAvIDJcbiAgICBmbG9vci5yZWNlaXZlU2hhZG93ID0gdHJ1ZVxuICAgIHdhcmVob3VzZS5hZGQoZmxvb3IpXG5cbiAgICAvLyBXYWxsc1xuICAgIGNvbnN0IHdhbGxNYXRlcmlhbCA9IG5ldyBUSFJFRS5NZXNoU3RhbmRhcmRNYXRlcmlhbCh7IGNvbG9yOiAweGNjY2NjYyB9KVxuICAgIGNvbnN0IHdhbGxHZW9tZXRyeSA9IG5ldyBUSFJFRS5Cb3hHZW9tZXRyeSg1MCwgMjAsIDEpXG4gICAgXG4gICAgY29uc3QgYmFja1dhbGwgPSBuZXcgVEhSRUUuTWVzaCh3YWxsR2VvbWV0cnksIHdhbGxNYXRlcmlhbClcbiAgICBiYWNrV2FsbC5wb3NpdGlvbi5zZXQoMCwgMTAsIC0yNSlcbiAgICB3YXJlaG91c2UuYWRkKGJhY2tXYWxsKVxuXG4gICAgY29uc3QgbGVmdFdhbGwgPSBuZXcgVEhSRUUuTWVzaCh3YWxsR2VvbWV0cnksIHdhbGxNYXRlcmlhbClcbiAgICBsZWZ0V2FsbC5yb3RhdGlvbi55ID0gTWF0aC5QSSAvIDJcbiAgICBsZWZ0V2FsbC5wb3NpdGlvbi5zZXQoLTI1LCAxMCwgMClcbiAgICB3YXJlaG91c2UuYWRkKGxlZnRXYWxsKVxuXG4gICAgY29uc3QgcmlnaHRXYWxsID0gbmV3IFRIUkVFLk1lc2god2FsbEdlb21ldHJ5LCB3YWxsTWF0ZXJpYWwpXG4gICAgcmlnaHRXYWxsLnJvdGF0aW9uLnkgPSBNYXRoLlBJIC8gMlxuICAgIHJpZ2h0V2FsbC5wb3NpdGlvbi5zZXQoMjUsIDEwLCAwKVxuICAgIHdhcmVob3VzZS5hZGQocmlnaHRXYWxsKVxuXG4gICAgdGhpcy5zY2VuZS5hZGQod2FyZWhvdXNlKVxuICAgIHJldHVybiB3YXJlaG91c2VcbiAgfVxuXG4gIHByaXZhdGUgY3JlYXRlWm9uZXMoKTogVEhSRUUuR3JvdXAge1xuICAgIGNvbnN0IHpvbmVzID0gbmV3IFRIUkVFLkdyb3VwKClcbiAgICBjb25zdCB6b25lR2VvbWV0cnkgPSBuZXcgVEhSRUUuQm94R2VvbWV0cnkoOCwgMC4xLCA4KVxuICAgIGNvbnN0IHpvbmVNYXRlcmlhbHMgPSBbXG4gICAgICBuZXcgVEhSRUUuTWVzaFN0YW5kYXJkTWF0ZXJpYWwoeyBjb2xvcjogMHhmZjk5OTkgfSksXG4gICAgICBuZXcgVEhSRUUuTWVzaFN0YW5kYXJkTWF0ZXJpYWwoeyBjb2xvcjogMHg5OWZmOTkgfSksXG4gICAgICBuZXcgVEhSRUUuTWVzaFN0YW5kYXJkTWF0ZXJpYWwoeyBjb2xvcjogMHg5OTk5ZmYgfSksXG4gICAgICBuZXcgVEhSRUUuTWVzaFN0YW5kYXJkTWF0ZXJpYWwoeyBjb2xvcjogMHhmZmZmOTkgfSksXG4gICAgICBuZXcgVEhSRUUuTWVzaFN0YW5kYXJkTWF0ZXJpYWwoeyBjb2xvcjogMHhmZjk5ZmYgfSlcbiAgICBdXG5cbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IDU7IGkrKykge1xuICAgICAgY29uc3Qgem9uZSA9IG5ldyBUSFJFRS5NZXNoKHpvbmVHZW9tZXRyeSwgem9uZU1hdGVyaWFsc1tpXSlcbiAgICAgIHpvbmUucG9zaXRpb24uc2V0KC0xNiArIChpICogOCksIDAuMSwgMClcbiAgICAgIHpvbmUucmVjZWl2ZVNoYWRvdyA9IHRydWVcbiAgICAgIHpvbmVzLmFkZCh6b25lKVxuICAgIH1cblxuICAgIHRoaXMuc2NlbmUuYWRkKHpvbmVzKVxuICAgIHJldHVybiB6b25lc1xuICB9XG5cbiAgcHJpdmF0ZSBjcmVhdGVUcnVjaygpOiBUSFJFRS5Hcm91cCB7XG4gICAgY29uc3QgdHJ1Y2sgPSBuZXcgVEhSRUUuR3JvdXAoKVxuICAgIFxuICAgIC8vIFRydWNrIGJvZHlcbiAgICBjb25zdCBib2R5R2VvbWV0cnkgPSBuZXcgVEhSRUUuQm94R2VvbWV0cnkoNiwgNCwgMTApXG4gICAgY29uc3QgYm9keU1hdGVyaWFsID0gbmV3IFRIUkVFLk1lc2hTdGFuZGFyZE1hdGVyaWFsKHsgY29sb3I6IDB4MzM2NmNjIH0pXG4gICAgY29uc3QgYm9keSA9IG5ldyBUSFJFRS5NZXNoKGJvZHlHZW9tZXRyeSwgYm9keU1hdGVyaWFsKVxuICAgIGJvZHkucG9zaXRpb24ueSA9IDJcbiAgICB0cnVjay5hZGQoYm9keSlcblxuICAgIC8vIFdoZWVsc1xuICAgIGNvbnN0IHdoZWVsR2VvbWV0cnkgPSBuZXcgVEhSRUUuQ3lsaW5kZXJHZW9tZXRyeSgxLCAxLCAwLjUsIDE2KVxuICAgIGNvbnN0IHdoZWVsTWF0ZXJpYWwgPSBuZXcgVEhSRUUuTWVzaFN0YW5kYXJkTWF0ZXJpYWwoeyBjb2xvcjogMHgzMzMzMzMgfSlcbiAgICBcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IDQ7IGkrKykge1xuICAgICAgY29uc3Qgd2hlZWwgPSBuZXcgVEhSRUUuTWVzaCh3aGVlbEdlb21ldHJ5LCB3aGVlbE1hdGVyaWFsKVxuICAgICAgd2hlZWwucm90YXRpb24ueiA9IE1hdGguUEkgLyAyXG4gICAgICB3aGVlbC5wb3NpdGlvbi5zZXQoXG4gICAgICAgIGkgPCAyID8gLTIgOiAyLFxuICAgICAgICAwLjUsXG4gICAgICAgIGkgJSAyID09PSAwID8gLTMgOiAzXG4gICAgICApXG4gICAgICB0cnVjay5hZGQod2hlZWwpXG4gICAgfVxuXG4gICAgdHJ1Y2sucG9zaXRpb24uc2V0KDAsIDAsIDE1KVxuICAgIHRoaXMuc2NlbmUuYWRkKHRydWNrKVxuICAgIHJldHVybiB0cnVja1xuICB9XG5cbiAgY3JlYXRlWm9uZUxhYmVscygpIHtcbiAgICAvLyBSZW1vdmUgZXhpc3RpbmcgbGFiZWxzXG4gICAgdGhpcy56b25lTGFiZWxzLmZvckVhY2gobGFiZWwgPT4ge1xuICAgICAgaWYgKGxhYmVsLnBhcmVudEVsZW1lbnQpIHtcbiAgICAgICAgbGFiZWwucGFyZW50RWxlbWVudC5yZW1vdmVDaGlsZChsYWJlbClcbiAgICAgIH1cbiAgICB9KVxuICAgIHRoaXMuem9uZUxhYmVscyA9IFtdXG5cbiAgICAvLyBDcmVhdGUgbmV3IGxhYmVsc1xuICAgIHRoaXMuem9uZXMuY2hpbGRyZW4uZm9yRWFjaCgoem9uZSwgaW5kZXgpID0+IHtcbiAgICAgIGNvbnN0IGxhYmVsID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2JylcbiAgICAgIGxhYmVsLmNsYXNzTmFtZSA9ICd6b25lLWxhYmVsJ1xuICAgICAgbGFiZWwudGV4dENvbnRlbnQgPSBgWm9uZSAke2luZGV4ICsgMX1gXG4gICAgICBkb2N1bWVudC5ib2R5LmFwcGVuZENoaWxkKGxhYmVsKVxuICAgICAgdGhpcy56b25lTGFiZWxzLnB1c2gobGFiZWwpXG4gICAgfSlcbiAgfVxuXG4gIHVwZGF0ZVpvbmVMYWJlbHMoKSB7XG4gICAgdGhpcy56b25lcy5jaGlsZHJlbi5mb3JFYWNoKCh6b25lLCBpbmRleCkgPT4ge1xuICAgICAgY29uc3QgbGFiZWwgPSB0aGlzLnpvbmVMYWJlbHNbaW5kZXhdXG4gICAgICBpZiAobGFiZWwpIHtcbiAgICAgICAgY29uc3QgcG9zaXRpb24gPSB6b25lLnBvc2l0aW9uLmNsb25lKClcbiAgICAgICAgcG9zaXRpb24ucHJvamVjdCh0aGlzLmNhbWVyYSlcbiAgICAgICAgXG4gICAgICAgIGNvbnN0IHggPSAocG9zaXRpb24ueCAqIDAuNSArIDAuNSkgKiB3aW5kb3cuaW5uZXJXaWR0aFxuICAgICAgICBjb25zdCB5ID0gKC1wb3NpdGlvbi55ICogMC41ICsgMC41KSAqIHdpbmRvdy5pbm5lckhlaWdodFxuICAgICAgICBcbiAgICAgICAgbGFiZWwuc3R5bGUudHJhbnNmb3JtID0gYHRyYW5zbGF0ZSgtNTAlLCAtNTAlKSB0cmFuc2xhdGUoJHt4fXB4LCAke3l9cHgpYFxuICAgICAgfVxuICAgIH0pXG4gIH1cblxuICBzZXR1cEdVSSgpIHtcbiAgICBjb25zdCBwYXJhbXMgPSB7XG4gICAgICBwcm9kdWN0VHlwZTogJ3doZWVsJyxcbiAgICAgIHpvbmU6IDAsXG4gICAgICBhZGRQcm9kdWN0OiAoKSA9PiB0aGlzLmFkZFByb2R1Y3RUb1pvbmUoKSxcbiAgICAgIGxvYWRJblRydWNrOiAoKSA9PiB0aGlzLnJlbW92ZVByb2R1Y3RGcm9tWm9uZSgpLFxuICAgICAgc3RhcnRUcnVjazogKCkgPT4gdGhpcy5zdGFydFRydWNrKClcbiAgICB9XG5cbiAgICB0aGlzLmd1aS5hZGQocGFyYW1zLCAncHJvZHVjdFR5cGUnLCBbJ3doZWVsJywgJ2JveCcsICdjeWxpbmRlciddKVxuICAgICAgLm9uQ2hhbmdlKHZhbHVlID0+IHRoaXMuY3VycmVudFByb2R1Y3RUeXBlID0gdmFsdWUpXG4gICAgXG4gICAgY29uc3Qgem9uZU9wdGlvbnM6IFJlY29yZDxzdHJpbmcsIG51bWJlcj4gPSB7fVxuICAgIGZvciAobGV0IGkgPSAxOyBpIDw9IDU7IGkrKykge1xuICAgICAgem9uZU9wdGlvbnNbYFpvbmUgJHtpfWBdID0gaSAtIDFcbiAgICB9XG4gICAgdGhpcy5ndWkuYWRkKHBhcmFtcywgJ3pvbmUnLCB6b25lT3B0aW9ucylcbiAgICAgIC5vbkNoYW5nZSh2YWx1ZSA9PiB0aGlzLnNlbGVjdGVkWm9uZSA9IHZhbHVlKVxuICAgIFxuICAgIHRoaXMuZ3VpLmFkZChwYXJhbXMsICdhZGRQcm9kdWN0JylcbiAgICB0aGlzLmd1aS5hZGQocGFyYW1zLCAnbG9hZEluVHJ1Y2snKVxuICAgIHRoaXMuZ3VpLmFkZChwYXJhbXMsICdzdGFydFRydWNrJylcbiAgfVxuXG4gIGFkZFByb2R1Y3RUb1pvbmUoKSB7XG4gICAgY29uc3Qgem9uZVByb2R1Y3RzID0gdGhpcy5pbnZlbnRvcnkuZ2V0KHRoaXMuc2VsZWN0ZWRab25lKSB8fCBbXVxuICAgIGlmICh6b25lUHJvZHVjdHMubGVuZ3RoID49IHRoaXMuWk9ORV9DQVBBQ0lUWSkge1xuICAgICAgY29uc29sZS53YXJuKGBab25lICR7dGhpcy5zZWxlY3RlZFpvbmUgKyAxfSBpcyBhdCBmdWxsIGNhcGFjaXR5IWApXG4gICAgICByZXR1cm5cbiAgICB9XG5cbiAgICBjb25zdCBwcm9kdWN0ID0gdGhpcy5jcmVhdGVQcm9kdWN0KHRoaXMuY3VycmVudFByb2R1Y3RUeXBlKVxuICAgIGNvbnN0IHpvbmUgPSB0aGlzLnpvbmVzLmNoaWxkcmVuW3RoaXMuc2VsZWN0ZWRab25lXVxuICAgIFxuICAgIHByb2R1Y3QucG9zaXRpb24uY29weSh6b25lLnBvc2l0aW9uKVxuICAgIHByb2R1Y3QucG9zaXRpb24ueSA9IDIgKyB6b25lUHJvZHVjdHMubGVuZ3RoICogMC41XG4gICAgdGhpcy5zY2VuZS5hZGQocHJvZHVjdClcblxuICAgIGlmICghdGhpcy5pbnZlbnRvcnkuaGFzKHRoaXMuc2VsZWN0ZWRab25lKSkge1xuICAgICAgdGhpcy5pbnZlbnRvcnkuc2V0KHRoaXMuc2VsZWN0ZWRab25lLCBbXSlcbiAgICB9XG4gICAgdGhpcy5pbnZlbnRvcnkuZ2V0KHRoaXMuc2VsZWN0ZWRab25lKT8ucHVzaChwcm9kdWN0KVxuICB9XG5cbiAgcmVtb3ZlUHJvZHVjdEZyb21ab25lKCkge1xuICAgIGNvbnN0IHByb2R1Y3RzID0gdGhpcy5pbnZlbnRvcnkuZ2V0KHRoaXMuc2VsZWN0ZWRab25lKVxuICAgIGlmIChwcm9kdWN0cyAmJiBwcm9kdWN0cy5sZW5ndGggPiAwKSB7XG4gICAgICBjb25zdCBwcm9kdWN0ID0gcHJvZHVjdHMucG9wKClcbiAgICAgIGlmIChwcm9kdWN0KSB7XG4gICAgICAgIG5ldyBUV0VFTi5Ud2Vlbihwcm9kdWN0LnBvc2l0aW9uKVxuICAgICAgICAgIC50byh7IHg6IHRoaXMudHJ1Y2sucG9zaXRpb24ueCwgeTogMiwgejogdGhpcy50cnVjay5wb3NpdGlvbi56IH0sIDEwMDApXG4gICAgICAgICAgLmVhc2luZyhUV0VFTi5FYXNpbmcuUXVhZHJhdGljLk91dClcbiAgICAgICAgICAub25Db21wbGV0ZSgoKSA9PiB7XG4gICAgICAgICAgICB0aGlzLnNjZW5lLnJlbW92ZShwcm9kdWN0KVxuICAgICAgICAgIH0pXG4gICAgICAgICAgLnN0YXJ0KClcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBzdGFydFRydWNrKCkge1xuICAgIG5ldyBUV0VFTi5Ud2Vlbih0aGlzLnRydWNrLnBvc2l0aW9uKVxuICAgICAgLnRvKHsgejogMzAgfSwgMjAwMClcbiAgICAgIC5lYXNpbmcoVFdFRU4uRWFzaW5nLlF1YWRyYXRpYy5Jbk91dClcbiAgICAgIC5vbkNvbXBsZXRlKCgpID0+IHtcbiAgICAgICAgdGhpcy50cnVjay5wb3NpdGlvbi56ID0gMTVcbiAgICAgIH0pXG4gICAgICAuc3RhcnQoKVxuICB9XG5cbiAgcHJpdmF0ZSBjcmVhdGVQcm9kdWN0KHR5cGU6IHN0cmluZyk6IFRIUkVFLk1lc2gge1xuICAgIGxldCBnZW9tZXRyeTogVEhSRUUuQnVmZmVyR2VvbWV0cnlcbiAgICBsZXQgbWF0ZXJpYWw6IFRIUkVFLk1hdGVyaWFsXG5cbiAgICBzd2l0Y2ggKHR5cGUpIHtcbiAgICAgIGNhc2UgJ3doZWVsJzpcbiAgICAgICAgZ2VvbWV0cnkgPSBuZXcgVEhSRUUuVG9ydXNHZW9tZXRyeSgwLjUsIDAuMiwgMTYsIDMyKVxuICAgICAgICBtYXRlcmlhbCA9IG5ldyBUSFJFRS5NZXNoU3RhbmRhcmRNYXRlcmlhbCh7IGNvbG9yOiAweDMzMzMzMyB9KVxuICAgICAgICBicmVha1xuICAgICAgY2FzZSAnYm94JzpcbiAgICAgICAgZ2VvbWV0cnkgPSBuZXcgVEhSRUUuQm94R2VvbWV0cnkoMSwgMSwgMSlcbiAgICAgICAgbWF0ZXJpYWwgPSBuZXcgVEhSRUUuTWVzaFN0YW5kYXJkTWF0ZXJpYWwoeyBjb2xvcjogMHg5OTU1MzMgfSlcbiAgICAgICAgYnJlYWtcbiAgICAgIGNhc2UgJ2N5bGluZGVyJzpcbiAgICAgICAgZ2VvbWV0cnkgPSBuZXcgVEhSRUUuQ3lsaW5kZXJHZW9tZXRyeSgwLjUsIDAuNSwgMSwgMTYpXG4gICAgICAgIG1hdGVyaWFsID0gbmV3IFRIUkVFLk1lc2hTdGFuZGFyZE1hdGVyaWFsKHsgY29sb3I6IDB4MzM5OTU1IH0pXG4gICAgICAgIGJyZWFrXG4gICAgICBkZWZhdWx0OlxuICAgICAgICBnZW9tZXRyeSA9IG5ldyBUSFJFRS5Cb3hHZW9tZXRyeSgxLCAxLCAxKVxuICAgICAgICBtYXRlcmlhbCA9IG5ldyBUSFJFRS5NZXNoU3RhbmRhcmRNYXRlcmlhbCh7IGNvbG9yOiAweGNjY2NjYyB9KVxuICAgIH1cblxuICAgIGNvbnN0IHByb2R1Y3QgPSBuZXcgVEhSRUUuTWVzaChnZW9tZXRyeSwgbWF0ZXJpYWwpXG4gICAgcHJvZHVjdC5jYXN0U2hhZG93ID0gdHJ1ZVxuICAgIHJldHVybiBwcm9kdWN0XG4gIH1cblxuICBhbmltYXRlKCkge1xuICAgIHRoaXMuY29udHJvbHMudXBkYXRlKClcbiAgICB0aGlzLnVwZGF0ZVpvbmVMYWJlbHMoKVxuICAgIHRoaXMucmVuZGVyZXIucmVuZGVyKHRoaXMuc2NlbmUsIHRoaXMuY2FtZXJhKVxuICB9XG5cbiAgZGlzcG9zZSgpIHtcbiAgICB0aGlzLmd1aS5kZXN0cm95KClcbiAgICB0aGlzLnpvbmVMYWJlbHMuZm9yRWFjaChsYWJlbCA9PiB7XG4gICAgICBpZiAobGFiZWwucGFyZW50RWxlbWVudCkge1xuICAgICAgICBsYWJlbC5wYXJlbnRFbGVtZW50LnJlbW92ZUNoaWxkKGxhYmVsKVxuICAgICAgfVxuICAgIH0pXG4gICAgdGhpcy5zY2VuZS50cmF2ZXJzZSgob2JqZWN0KSA9PiB7XG4gICAgICBpZiAob2JqZWN0IGluc3RhbmNlb2YgVEhSRUUuTWVzaCkge1xuICAgICAgICBvYmplY3QuZ2VvbWV0cnkuZGlzcG9zZSgpXG4gICAgICAgIGlmIChvYmplY3QubWF0ZXJpYWwgaW5zdGFuY2VvZiBUSFJFRS5NYXRlcmlhbCkge1xuICAgICAgICAgIG9iamVjdC5tYXRlcmlhbC5kaXNwb3NlKClcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0pXG4gICAgdGhpcy5pbnZlbnRvcnkuY2xlYXIoKVxuICB9XG59ICJdLCJuYW1lcyI6WyJUSFJFRSIsIk9yYml0Q29udHJvbHMiLCJHVUkiLCJUV0VFTiIsIldhcmVob3VzZVNpbXVsYXRpb24iLCJjcmVhdGVXYXJlaG91c2UiLCJ3YXJlaG91c2UiLCJHcm91cCIsImZsb29yR2VvbWV0cnkiLCJQbGFuZUdlb21ldHJ5IiwiZmxvb3JNYXRlcmlhbCIsIk1lc2hTdGFuZGFyZE1hdGVyaWFsIiwiY29sb3IiLCJmbG9vciIsIk1lc2giLCJyb3RhdGlvbiIsIngiLCJNYXRoIiwiUEkiLCJyZWNlaXZlU2hhZG93IiwiYWRkIiwid2FsbE1hdGVyaWFsIiwid2FsbEdlb21ldHJ5IiwiQm94R2VvbWV0cnkiLCJiYWNrV2FsbCIsInBvc2l0aW9uIiwic2V0IiwibGVmdFdhbGwiLCJ5IiwicmlnaHRXYWxsIiwic2NlbmUiLCJjcmVhdGVab25lcyIsInpvbmVzIiwiem9uZUdlb21ldHJ5Iiwiem9uZU1hdGVyaWFscyIsImkiLCJ6b25lIiwiY3JlYXRlVHJ1Y2siLCJ0cnVjayIsImJvZHlHZW9tZXRyeSIsImJvZHlNYXRlcmlhbCIsImJvZHkiLCJ3aGVlbEdlb21ldHJ5IiwiQ3lsaW5kZXJHZW9tZXRyeSIsIndoZWVsTWF0ZXJpYWwiLCJ3aGVlbCIsInoiLCJjcmVhdGVab25lTGFiZWxzIiwiem9uZUxhYmVscyIsImZvckVhY2giLCJsYWJlbCIsInBhcmVudEVsZW1lbnQiLCJyZW1vdmVDaGlsZCIsImNoaWxkcmVuIiwiaW5kZXgiLCJkb2N1bWVudCIsImNyZWF0ZUVsZW1lbnQiLCJjbGFzc05hbWUiLCJ0ZXh0Q29udGVudCIsImFwcGVuZENoaWxkIiwicHVzaCIsInVwZGF0ZVpvbmVMYWJlbHMiLCJjbG9uZSIsInByb2plY3QiLCJjYW1lcmEiLCJ3aW5kb3ciLCJpbm5lcldpZHRoIiwiaW5uZXJIZWlnaHQiLCJzdHlsZSIsInRyYW5zZm9ybSIsInNldHVwR1VJIiwicGFyYW1zIiwicHJvZHVjdFR5cGUiLCJhZGRQcm9kdWN0IiwiYWRkUHJvZHVjdFRvWm9uZSIsImxvYWRJblRydWNrIiwicmVtb3ZlUHJvZHVjdEZyb21ab25lIiwic3RhcnRUcnVjayIsImd1aSIsIm9uQ2hhbmdlIiwidmFsdWUiLCJjdXJyZW50UHJvZHVjdFR5cGUiLCJ6b25lT3B0aW9ucyIsInNlbGVjdGVkWm9uZSIsInpvbmVQcm9kdWN0cyIsImludmVudG9yeSIsImdldCIsImxlbmd0aCIsIlpPTkVfQ0FQQUNJVFkiLCJjb25zb2xlIiwid2FybiIsInByb2R1Y3QiLCJjcmVhdGVQcm9kdWN0IiwiY29weSIsImhhcyIsInByb2R1Y3RzIiwicG9wIiwiVHdlZW4iLCJ0byIsImVhc2luZyIsIkVhc2luZyIsIlF1YWRyYXRpYyIsIk91dCIsIm9uQ29tcGxldGUiLCJyZW1vdmUiLCJzdGFydCIsIkluT3V0IiwidHlwZSIsImdlb21ldHJ5IiwibWF0ZXJpYWwiLCJUb3J1c0dlb21ldHJ5IiwiY2FzdFNoYWRvdyIsImFuaW1hdGUiLCJjb250cm9scyIsInVwZGF0ZSIsInJlbmRlcmVyIiwicmVuZGVyIiwiZGlzcG9zZSIsImRlc3Ryb3kiLCJ0cmF2ZXJzZSIsIm9iamVjdCIsIk1hdGVyaWFsIiwiY2xlYXIiLCJjb25zdHJ1Y3RvciIsIk1hcCIsImRvbUVsZW1lbnQiLCJlbmFibGVEYW1waW5nIiwiZGFtcGluZ0ZhY3RvciJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(app-pages-browser)/./src/components/3d/WarehouseSimulation.ts\n"));

/***/ }),

/***/ "(app-pages-browser)/./src/components/3d/WarehouseVisualization.tsx":
/*!******************************************************!*\
  !*** ./src/components/3d/WarehouseVisualization.tsx ***!
  \******************************************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   WarehouseVisualization: function() { return /* binding */ WarehouseVisualization; }\n/* harmony export */ });\n/* harmony import */ var react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react/jsx-dev-runtime */ \"(app-pages-browser)/./node_modules/next/dist/compiled/react/jsx-dev-runtime.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react */ \"(app-pages-browser)/./node_modules/next/dist/compiled/react/index.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var three__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! three */ \"(app-pages-browser)/./node_modules/three/build/three.core.js\");\n/* harmony import */ var three__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! three */ \"(app-pages-browser)/./node_modules/three/build/three.module.js\");\n/* harmony import */ var _tweenjs_tween_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @tweenjs/tween.js */ \"(app-pages-browser)/./node_modules/@tweenjs/tween.js/dist/tween.esm.js\");\n/* harmony import */ var _WarehouseSimulation__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./WarehouseSimulation */ \"(app-pages-browser)/./src/components/3d/WarehouseSimulation.ts\");\n/* __next_internal_client_entry_do_not_use__ WarehouseVisualization auto */ \nvar _s = $RefreshSig$();\n\n\n\n\nfunction WarehouseVisualization() {\n    _s();\n    const containerRef = (0,react__WEBPACK_IMPORTED_MODULE_1__.useRef)(null);\n    (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)(()=>{\n        if (!containerRef.current) return;\n        // Initialize Three.js scene\n        const scene = new three__WEBPACK_IMPORTED_MODULE_4__.Scene();\n        scene.background = new three__WEBPACK_IMPORTED_MODULE_4__.Color(0x333333);\n        const camera = new three__WEBPACK_IMPORTED_MODULE_4__.PerspectiveCamera(75, window.innerWidth / window.innerHeight, 0.1, 1000);\n        camera.position.set(30, 30, 30);\n        const renderer = new three__WEBPACK_IMPORTED_MODULE_5__.WebGLRenderer({\n            antialias: true,\n            alpha: false\n        });\n        renderer.setSize(window.innerWidth, window.innerHeight);\n        renderer.setPixelRatio(window.devicePixelRatio);\n        renderer.shadowMap.enabled = true;\n        containerRef.current.appendChild(renderer.domElement);\n        // Initialize the simulation\n        const simulation = new _WarehouseSimulation__WEBPACK_IMPORTED_MODULE_3__.WarehouseSimulation(scene, camera, renderer);\n        // Animation loop\n        function animate() {\n            requestAnimationFrame(animate);\n            _tweenjs_tween_js__WEBPACK_IMPORTED_MODULE_2__[\"default\"].update();\n            simulation.animate();\n        }\n        animate();\n        // Handle window resize\n        const handleResize = ()=>{\n            camera.aspect = window.innerWidth / window.innerHeight;\n            camera.updateProjectionMatrix();\n            renderer.setSize(window.innerWidth, window.innerHeight);\n            simulation.createZoneLabels();\n        };\n        window.addEventListener(\"resize\", handleResize);\n        // Cleanup\n        return ()=>{\n            var _containerRef_current;\n            window.removeEventListener(\"resize\", handleResize);\n            simulation.dispose();\n            renderer.dispose();\n            (_containerRef_current = containerRef.current) === null || _containerRef_current === void 0 ? void 0 : _containerRef_current.removeChild(renderer.domElement);\n        };\n    }, []);\n    return /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n        ref: containerRef,\n        className: \"w-full h-full\"\n    }, void 0, false, {\n        fileName: \"/Users/arvindkumarchandramouleeswaran/CODEFEST2/src/components/3d/WarehouseVisualization.tsx\",\n        lineNumber: 62,\n        columnNumber: 10\n    }, this);\n}\n_s(WarehouseVisualization, \"8puyVO4ts1RhCfXUmci3vLI3Njw=\");\n_c = WarehouseVisualization;\nvar _c;\n$RefreshReg$(_c, \"WarehouseVisualization\");\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL3NyYy9jb21wb25lbnRzLzNkL1dhcmVob3VzZVZpc3VhbGl6YXRpb24udHN4IiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7QUFFeUM7QUFDWDtBQUdPO0FBQ3NCO0FBRXBELFNBQVNLOztJQUNkLE1BQU1DLGVBQWVMLDZDQUFNQSxDQUFpQjtJQUU1Q0QsZ0RBQVNBLENBQUM7UUFDUixJQUFJLENBQUNNLGFBQWFDLE9BQU8sRUFBRTtRQUUzQiw0QkFBNEI7UUFDNUIsTUFBTUMsUUFBUSxJQUFJTix3Q0FBVztRQUM3Qk0sTUFBTUUsVUFBVSxHQUFHLElBQUlSLHdDQUFXLENBQUM7UUFFbkMsTUFBTVUsU0FBUyxJQUFJVixvREFBdUIsQ0FBQyxJQUFJWSxPQUFPQyxVQUFVLEdBQUdELE9BQU9FLFdBQVcsRUFBRSxLQUFLO1FBQzVGSixPQUFPSyxRQUFRLENBQUNDLEdBQUcsQ0FBQyxJQUFJLElBQUk7UUFFNUIsTUFBTUMsV0FBVyxJQUFJakIsZ0RBQW1CLENBQUM7WUFDdkNtQixXQUFXO1lBQ1hDLE9BQU87UUFDVDtRQUVBSCxTQUFTSSxPQUFPLENBQUNULE9BQU9DLFVBQVUsRUFBRUQsT0FBT0UsV0FBVztRQUN0REcsU0FBU0ssYUFBYSxDQUFDVixPQUFPVyxnQkFBZ0I7UUFDOUNOLFNBQVNPLFNBQVMsQ0FBQ0MsT0FBTyxHQUFHO1FBQzdCckIsYUFBYUMsT0FBTyxDQUFDcUIsV0FBVyxDQUFDVCxTQUFTVSxVQUFVO1FBRXBELDRCQUE0QjtRQUM1QixNQUFNQyxhQUFhLElBQUkxQixxRUFBbUJBLENBQUNJLE9BQU9JLFFBQVFPO1FBRTFELGlCQUFpQjtRQUNqQixTQUFTWTtZQUNQQyxzQkFBc0JEO1lBQ3RCNUIsZ0VBQVk7WUFDWjJCLFdBQVdDLE9BQU87UUFDcEI7UUFDQUE7UUFFQSx1QkFBdUI7UUFDdkIsTUFBTUcsZUFBZTtZQUNuQnRCLE9BQU91QixNQUFNLEdBQUdyQixPQUFPQyxVQUFVLEdBQUdELE9BQU9FLFdBQVc7WUFDdERKLE9BQU93QixzQkFBc0I7WUFDN0JqQixTQUFTSSxPQUFPLENBQUNULE9BQU9DLFVBQVUsRUFBRUQsT0FBT0UsV0FBVztZQUN0RGMsV0FBV08sZ0JBQWdCO1FBQzdCO1FBQ0F2QixPQUFPd0IsZ0JBQWdCLENBQUMsVUFBVUo7UUFFbEMsVUFBVTtRQUNWLE9BQU87Z0JBSUw1QjtZQUhBUSxPQUFPeUIsbUJBQW1CLENBQUMsVUFBVUw7WUFDckNKLFdBQVdVLE9BQU87WUFDbEJyQixTQUFTcUIsT0FBTzthQUNoQmxDLHdCQUFBQSxhQUFhQyxPQUFPLGNBQXBCRCw0Q0FBQUEsc0JBQXNCbUMsV0FBVyxDQUFDdEIsU0FBU1UsVUFBVTtRQUN2RDtJQUNGLEdBQUcsRUFBRTtJQUVMLHFCQUFPLDhEQUFDYTtRQUFJQyxLQUFLckM7UUFBY3NDLFdBQVU7Ozs7OztBQUMzQztHQXJEZ0J2QztLQUFBQSIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi9zcmMvY29tcG9uZW50cy8zZC9XYXJlaG91c2VWaXN1YWxpemF0aW9uLnRzeD83MmUzIl0sInNvdXJjZXNDb250ZW50IjpbIid1c2UgY2xpZW50J1xuXG5pbXBvcnQgeyB1c2VFZmZlY3QsIHVzZVJlZiB9IGZyb20gJ3JlYWN0J1xuaW1wb3J0ICogYXMgVEhSRUUgZnJvbSAndGhyZWUnXG5pbXBvcnQgeyBPcmJpdENvbnRyb2xzIH0gZnJvbSAndGhyZWUvZXhhbXBsZXMvanNtL2NvbnRyb2xzL09yYml0Q29udHJvbHMnXG5pbXBvcnQgeyBHVUkgfSBmcm9tICd0aHJlZS9leGFtcGxlcy9qc20vbGlicy9saWwtZ3VpLm1vZHVsZS5taW4uanMnXG5pbXBvcnQgVFdFRU4gZnJvbSAnQHR3ZWVuanMvdHdlZW4uanMnXG5pbXBvcnQgeyBXYXJlaG91c2VTaW11bGF0aW9uIH0gZnJvbSAnLi9XYXJlaG91c2VTaW11bGF0aW9uJ1xuXG5leHBvcnQgZnVuY3Rpb24gV2FyZWhvdXNlVmlzdWFsaXphdGlvbigpIHtcbiAgY29uc3QgY29udGFpbmVyUmVmID0gdXNlUmVmPEhUTUxEaXZFbGVtZW50PihudWxsKVxuXG4gIHVzZUVmZmVjdCgoKSA9PiB7XG4gICAgaWYgKCFjb250YWluZXJSZWYuY3VycmVudCkgcmV0dXJuXG5cbiAgICAvLyBJbml0aWFsaXplIFRocmVlLmpzIHNjZW5lXG4gICAgY29uc3Qgc2NlbmUgPSBuZXcgVEhSRUUuU2NlbmUoKVxuICAgIHNjZW5lLmJhY2tncm91bmQgPSBuZXcgVEhSRUUuQ29sb3IoMHgzMzMzMzMpXG4gICAgXG4gICAgY29uc3QgY2FtZXJhID0gbmV3IFRIUkVFLlBlcnNwZWN0aXZlQ2FtZXJhKDc1LCB3aW5kb3cuaW5uZXJXaWR0aCAvIHdpbmRvdy5pbm5lckhlaWdodCwgMC4xLCAxMDAwKVxuICAgIGNhbWVyYS5wb3NpdGlvbi5zZXQoMzAsIDMwLCAzMClcbiAgICBcbiAgICBjb25zdCByZW5kZXJlciA9IG5ldyBUSFJFRS5XZWJHTFJlbmRlcmVyKHsgXG4gICAgICBhbnRpYWxpYXM6IHRydWUsXG4gICAgICBhbHBoYTogZmFsc2VcbiAgICB9KVxuICAgIFxuICAgIHJlbmRlcmVyLnNldFNpemUod2luZG93LmlubmVyV2lkdGgsIHdpbmRvdy5pbm5lckhlaWdodClcbiAgICByZW5kZXJlci5zZXRQaXhlbFJhdGlvKHdpbmRvdy5kZXZpY2VQaXhlbFJhdGlvKVxuICAgIHJlbmRlcmVyLnNoYWRvd01hcC5lbmFibGVkID0gdHJ1ZVxuICAgIGNvbnRhaW5lclJlZi5jdXJyZW50LmFwcGVuZENoaWxkKHJlbmRlcmVyLmRvbUVsZW1lbnQpXG5cbiAgICAvLyBJbml0aWFsaXplIHRoZSBzaW11bGF0aW9uXG4gICAgY29uc3Qgc2ltdWxhdGlvbiA9IG5ldyBXYXJlaG91c2VTaW11bGF0aW9uKHNjZW5lLCBjYW1lcmEsIHJlbmRlcmVyKVxuXG4gICAgLy8gQW5pbWF0aW9uIGxvb3BcbiAgICBmdW5jdGlvbiBhbmltYXRlKCkge1xuICAgICAgcmVxdWVzdEFuaW1hdGlvbkZyYW1lKGFuaW1hdGUpXG4gICAgICBUV0VFTi51cGRhdGUoKVxuICAgICAgc2ltdWxhdGlvbi5hbmltYXRlKClcbiAgICB9XG4gICAgYW5pbWF0ZSgpXG5cbiAgICAvLyBIYW5kbGUgd2luZG93IHJlc2l6ZVxuICAgIGNvbnN0IGhhbmRsZVJlc2l6ZSA9ICgpID0+IHtcbiAgICAgIGNhbWVyYS5hc3BlY3QgPSB3aW5kb3cuaW5uZXJXaWR0aCAvIHdpbmRvdy5pbm5lckhlaWdodFxuICAgICAgY2FtZXJhLnVwZGF0ZVByb2plY3Rpb25NYXRyaXgoKVxuICAgICAgcmVuZGVyZXIuc2V0U2l6ZSh3aW5kb3cuaW5uZXJXaWR0aCwgd2luZG93LmlubmVySGVpZ2h0KVxuICAgICAgc2ltdWxhdGlvbi5jcmVhdGVab25lTGFiZWxzKClcbiAgICB9XG4gICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoJ3Jlc2l6ZScsIGhhbmRsZVJlc2l6ZSlcblxuICAgIC8vIENsZWFudXBcbiAgICByZXR1cm4gKCkgPT4ge1xuICAgICAgd2luZG93LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ3Jlc2l6ZScsIGhhbmRsZVJlc2l6ZSlcbiAgICAgIHNpbXVsYXRpb24uZGlzcG9zZSgpXG4gICAgICByZW5kZXJlci5kaXNwb3NlKClcbiAgICAgIGNvbnRhaW5lclJlZi5jdXJyZW50Py5yZW1vdmVDaGlsZChyZW5kZXJlci5kb21FbGVtZW50KVxuICAgIH1cbiAgfSwgW10pXG5cbiAgcmV0dXJuIDxkaXYgcmVmPXtjb250YWluZXJSZWZ9IGNsYXNzTmFtZT1cInctZnVsbCBoLWZ1bGxcIiAvPlxufSAiXSwibmFtZXMiOlsidXNlRWZmZWN0IiwidXNlUmVmIiwiVEhSRUUiLCJUV0VFTiIsIldhcmVob3VzZVNpbXVsYXRpb24iLCJXYXJlaG91c2VWaXN1YWxpemF0aW9uIiwiY29udGFpbmVyUmVmIiwiY3VycmVudCIsInNjZW5lIiwiU2NlbmUiLCJiYWNrZ3JvdW5kIiwiQ29sb3IiLCJjYW1lcmEiLCJQZXJzcGVjdGl2ZUNhbWVyYSIsIndpbmRvdyIsImlubmVyV2lkdGgiLCJpbm5lckhlaWdodCIsInBvc2l0aW9uIiwic2V0IiwicmVuZGVyZXIiLCJXZWJHTFJlbmRlcmVyIiwiYW50aWFsaWFzIiwiYWxwaGEiLCJzZXRTaXplIiwic2V0UGl4ZWxSYXRpbyIsImRldmljZVBpeGVsUmF0aW8iLCJzaGFkb3dNYXAiLCJlbmFibGVkIiwiYXBwZW5kQ2hpbGQiLCJkb21FbGVtZW50Iiwic2ltdWxhdGlvbiIsImFuaW1hdGUiLCJyZXF1ZXN0QW5pbWF0aW9uRnJhbWUiLCJ1cGRhdGUiLCJoYW5kbGVSZXNpemUiLCJhc3BlY3QiLCJ1cGRhdGVQcm9qZWN0aW9uTWF0cml4IiwiY3JlYXRlWm9uZUxhYmVscyIsImFkZEV2ZW50TGlzdGVuZXIiLCJyZW1vdmVFdmVudExpc3RlbmVyIiwiZGlzcG9zZSIsInJlbW92ZUNoaWxkIiwiZGl2IiwicmVmIiwiY2xhc3NOYW1lIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(app-pages-browser)/./src/components/3d/WarehouseVisualization.tsx\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/three/examples/jsm/controls/OrbitControls.js":
/*!*******************************************************************!*\
  !*** ./node_modules/three/examples/jsm/controls/OrbitControls.js ***!
  \*******************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   OrbitControls: function() { return /* binding */ OrbitControls; }\n/* harmony export */ });\n/* harmony import */ var three__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! three */ \"(app-pages-browser)/./node_modules/three/build/three.core.js\");\n\n// OrbitControls performs orbiting, dollying (zooming), and panning.\n// Unlike TrackballControls, it maintains the \"up\" direction object.up (+Y by default).\n//\n//    Orbit - left mouse / touch: one-finger move\n//    Zoom - middle mouse, or mousewheel / touch: two-finger spread or squish\n//    Pan - right mouse, or left mouse + ctrl/meta/shiftKey, or arrow keys / touch: two-finger move\nconst _changeEvent = {\n    type: \"change\"\n};\nconst _startEvent = {\n    type: \"start\"\n};\nconst _endEvent = {\n    type: \"end\"\n};\nconst _ray = new three__WEBPACK_IMPORTED_MODULE_0__.Ray();\nconst _plane = new three__WEBPACK_IMPORTED_MODULE_0__.Plane();\nconst _TILT_LIMIT = Math.cos(70 * three__WEBPACK_IMPORTED_MODULE_0__.MathUtils.DEG2RAD);\nconst _v = new three__WEBPACK_IMPORTED_MODULE_0__.Vector3();\nconst _twoPI = 2 * Math.PI;\nconst _STATE = {\n    NONE: -1,\n    ROTATE: 0,\n    DOLLY: 1,\n    PAN: 2,\n    TOUCH_ROTATE: 3,\n    TOUCH_PAN: 4,\n    TOUCH_DOLLY_PAN: 5,\n    TOUCH_DOLLY_ROTATE: 6\n};\nconst _EPS = 0.000001;\nclass OrbitControls extends three__WEBPACK_IMPORTED_MODULE_0__.Controls {\n    connect() {\n        this.domElement.addEventListener(\"pointerdown\", this._onPointerDown);\n        this.domElement.addEventListener(\"pointercancel\", this._onPointerUp);\n        this.domElement.addEventListener(\"contextmenu\", this._onContextMenu);\n        this.domElement.addEventListener(\"wheel\", this._onMouseWheel, {\n            passive: false\n        });\n        const document = this.domElement.getRootNode(); // offscreen canvas compatibility\n        document.addEventListener(\"keydown\", this._interceptControlDown, {\n            passive: true,\n            capture: true\n        });\n        this.domElement.style.touchAction = \"none\"; // disable touch scroll\n    }\n    disconnect() {\n        this.domElement.removeEventListener(\"pointerdown\", this._onPointerDown);\n        this.domElement.removeEventListener(\"pointermove\", this._onPointerMove);\n        this.domElement.removeEventListener(\"pointerup\", this._onPointerUp);\n        this.domElement.removeEventListener(\"pointercancel\", this._onPointerUp);\n        this.domElement.removeEventListener(\"wheel\", this._onMouseWheel);\n        this.domElement.removeEventListener(\"contextmenu\", this._onContextMenu);\n        this.stopListenToKeyEvents();\n        const document = this.domElement.getRootNode(); // offscreen canvas compatibility\n        document.removeEventListener(\"keydown\", this._interceptControlDown, {\n            capture: true\n        });\n        this.domElement.style.touchAction = \"auto\";\n    }\n    dispose() {\n        this.disconnect();\n    }\n    getPolarAngle() {\n        return this._spherical.phi;\n    }\n    getAzimuthalAngle() {\n        return this._spherical.theta;\n    }\n    getDistance() {\n        return this.object.position.distanceTo(this.target);\n    }\n    listenToKeyEvents(domElement) {\n        domElement.addEventListener(\"keydown\", this._onKeyDown);\n        this._domElementKeyEvents = domElement;\n    }\n    stopListenToKeyEvents() {\n        if (this._domElementKeyEvents !== null) {\n            this._domElementKeyEvents.removeEventListener(\"keydown\", this._onKeyDown);\n            this._domElementKeyEvents = null;\n        }\n    }\n    saveState() {\n        this.target0.copy(this.target);\n        this.position0.copy(this.object.position);\n        this.zoom0 = this.object.zoom;\n    }\n    reset() {\n        this.target.copy(this.target0);\n        this.object.position.copy(this.position0);\n        this.object.zoom = this.zoom0;\n        this.object.updateProjectionMatrix();\n        this.dispatchEvent(_changeEvent);\n        this.update();\n        this.state = _STATE.NONE;\n    }\n    update() {\n        let deltaTime = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : null;\n        const position = this.object.position;\n        _v.copy(position).sub(this.target);\n        // rotate offset to \"y-axis-is-up\" space\n        _v.applyQuaternion(this._quat);\n        // angle from z-axis around y-axis\n        this._spherical.setFromVector3(_v);\n        if (this.autoRotate && this.state === _STATE.NONE) {\n            this._rotateLeft(this._getAutoRotationAngle(deltaTime));\n        }\n        if (this.enableDamping) {\n            this._spherical.theta += this._sphericalDelta.theta * this.dampingFactor;\n            this._spherical.phi += this._sphericalDelta.phi * this.dampingFactor;\n        } else {\n            this._spherical.theta += this._sphericalDelta.theta;\n            this._spherical.phi += this._sphericalDelta.phi;\n        }\n        // restrict theta to be between desired limits\n        let min = this.minAzimuthAngle;\n        let max = this.maxAzimuthAngle;\n        if (isFinite(min) && isFinite(max)) {\n            if (min < -Math.PI) min += _twoPI;\n            else if (min > Math.PI) min -= _twoPI;\n            if (max < -Math.PI) max += _twoPI;\n            else if (max > Math.PI) max -= _twoPI;\n            if (min <= max) {\n                this._spherical.theta = Math.max(min, Math.min(max, this._spherical.theta));\n            } else {\n                this._spherical.theta = this._spherical.theta > (min + max) / 2 ? Math.max(min, this._spherical.theta) : Math.min(max, this._spherical.theta);\n            }\n        }\n        // restrict phi to be between desired limits\n        this._spherical.phi = Math.max(this.minPolarAngle, Math.min(this.maxPolarAngle, this._spherical.phi));\n        this._spherical.makeSafe();\n        // move target to panned location\n        if (this.enableDamping === true) {\n            this.target.addScaledVector(this._panOffset, this.dampingFactor);\n        } else {\n            this.target.add(this._panOffset);\n        }\n        // Limit the target distance from the cursor to create a sphere around the center of interest\n        this.target.sub(this.cursor);\n        this.target.clampLength(this.minTargetRadius, this.maxTargetRadius);\n        this.target.add(this.cursor);\n        let zoomChanged = false;\n        // adjust the camera position based on zoom only if we're not zooming to the cursor or if it's an ortho camera\n        // we adjust zoom later in these cases\n        if (this.zoomToCursor && this._performCursorZoom || this.object.isOrthographicCamera) {\n            this._spherical.radius = this._clampDistance(this._spherical.radius);\n        } else {\n            const prevRadius = this._spherical.radius;\n            this._spherical.radius = this._clampDistance(this._spherical.radius * this._scale);\n            zoomChanged = prevRadius != this._spherical.radius;\n        }\n        _v.setFromSpherical(this._spherical);\n        // rotate offset back to \"camera-up-vector-is-up\" space\n        _v.applyQuaternion(this._quatInverse);\n        position.copy(this.target).add(_v);\n        this.object.lookAt(this.target);\n        if (this.enableDamping === true) {\n            this._sphericalDelta.theta *= 1 - this.dampingFactor;\n            this._sphericalDelta.phi *= 1 - this.dampingFactor;\n            this._panOffset.multiplyScalar(1 - this.dampingFactor);\n        } else {\n            this._sphericalDelta.set(0, 0, 0);\n            this._panOffset.set(0, 0, 0);\n        }\n        // adjust camera position\n        if (this.zoomToCursor && this._performCursorZoom) {\n            let newRadius = null;\n            if (this.object.isPerspectiveCamera) {\n                // move the camera down the pointer ray\n                // this method avoids floating point error\n                const prevRadius = _v.length();\n                newRadius = this._clampDistance(prevRadius * this._scale);\n                const radiusDelta = prevRadius - newRadius;\n                this.object.position.addScaledVector(this._dollyDirection, radiusDelta);\n                this.object.updateMatrixWorld();\n                zoomChanged = !!radiusDelta;\n            } else if (this.object.isOrthographicCamera) {\n                // adjust the ortho camera position based on zoom changes\n                const mouseBefore = new three__WEBPACK_IMPORTED_MODULE_0__.Vector3(this._mouse.x, this._mouse.y, 0);\n                mouseBefore.unproject(this.object);\n                const prevZoom = this.object.zoom;\n                this.object.zoom = Math.max(this.minZoom, Math.min(this.maxZoom, this.object.zoom / this._scale));\n                this.object.updateProjectionMatrix();\n                zoomChanged = prevZoom !== this.object.zoom;\n                const mouseAfter = new three__WEBPACK_IMPORTED_MODULE_0__.Vector3(this._mouse.x, this._mouse.y, 0);\n                mouseAfter.unproject(this.object);\n                this.object.position.sub(mouseAfter).add(mouseBefore);\n                this.object.updateMatrixWorld();\n                newRadius = _v.length();\n            } else {\n                console.warn(\"WARNING: OrbitControls.js encountered an unknown camera type - zoom to cursor disabled.\");\n                this.zoomToCursor = false;\n            }\n            // handle the placement of the target\n            if (newRadius !== null) {\n                if (this.screenSpacePanning) {\n                    // position the orbit target in front of the new camera position\n                    this.target.set(0, 0, -1).transformDirection(this.object.matrix).multiplyScalar(newRadius).add(this.object.position);\n                } else {\n                    // get the ray and translation plane to compute target\n                    _ray.origin.copy(this.object.position);\n                    _ray.direction.set(0, 0, -1).transformDirection(this.object.matrix);\n                    // if the camera is 20 degrees above the horizon then don't adjust the focus target to avoid\n                    // extremely large values\n                    if (Math.abs(this.object.up.dot(_ray.direction)) < _TILT_LIMIT) {\n                        this.object.lookAt(this.target);\n                    } else {\n                        _plane.setFromNormalAndCoplanarPoint(this.object.up, this.target);\n                        _ray.intersectPlane(_plane, this.target);\n                    }\n                }\n            }\n        } else if (this.object.isOrthographicCamera) {\n            const prevZoom = this.object.zoom;\n            this.object.zoom = Math.max(this.minZoom, Math.min(this.maxZoom, this.object.zoom / this._scale));\n            if (prevZoom !== this.object.zoom) {\n                this.object.updateProjectionMatrix();\n                zoomChanged = true;\n            }\n        }\n        this._scale = 1;\n        this._performCursorZoom = false;\n        // update condition is:\n        // min(camera displacement, camera rotation in radians)^2 > EPS\n        // using small-angle approximation cos(x/2) = 1 - x^2 / 8\n        if (zoomChanged || this._lastPosition.distanceToSquared(this.object.position) > _EPS || 8 * (1 - this._lastQuaternion.dot(this.object.quaternion)) > _EPS || this._lastTargetPosition.distanceToSquared(this.target) > _EPS) {\n            this.dispatchEvent(_changeEvent);\n            this._lastPosition.copy(this.object.position);\n            this._lastQuaternion.copy(this.object.quaternion);\n            this._lastTargetPosition.copy(this.target);\n            return true;\n        }\n        return false;\n    }\n    _getAutoRotationAngle(deltaTime) {\n        if (deltaTime !== null) {\n            return _twoPI / 60 * this.autoRotateSpeed * deltaTime;\n        } else {\n            return _twoPI / 60 / 60 * this.autoRotateSpeed;\n        }\n    }\n    _getZoomScale(delta) {\n        const normalizedDelta = Math.abs(delta * 0.01);\n        return Math.pow(0.95, this.zoomSpeed * normalizedDelta);\n    }\n    _rotateLeft(angle) {\n        this._sphericalDelta.theta -= angle;\n    }\n    _rotateUp(angle) {\n        this._sphericalDelta.phi -= angle;\n    }\n    _panLeft(distance, objectMatrix) {\n        _v.setFromMatrixColumn(objectMatrix, 0); // get X column of objectMatrix\n        _v.multiplyScalar(-distance);\n        this._panOffset.add(_v);\n    }\n    _panUp(distance, objectMatrix) {\n        if (this.screenSpacePanning === true) {\n            _v.setFromMatrixColumn(objectMatrix, 1);\n        } else {\n            _v.setFromMatrixColumn(objectMatrix, 0);\n            _v.crossVectors(this.object.up, _v);\n        }\n        _v.multiplyScalar(distance);\n        this._panOffset.add(_v);\n    }\n    // deltaX and deltaY are in pixels; right and down are positive\n    _pan(deltaX, deltaY) {\n        const element = this.domElement;\n        if (this.object.isPerspectiveCamera) {\n            // perspective\n            const position = this.object.position;\n            _v.copy(position).sub(this.target);\n            let targetDistance = _v.length();\n            // half of the fov is center to top of screen\n            targetDistance *= Math.tan(this.object.fov / 2 * Math.PI / 180.0);\n            // we use only clientHeight here so aspect ratio does not distort speed\n            this._panLeft(2 * deltaX * targetDistance / element.clientHeight, this.object.matrix);\n            this._panUp(2 * deltaY * targetDistance / element.clientHeight, this.object.matrix);\n        } else if (this.object.isOrthographicCamera) {\n            // orthographic\n            this._panLeft(deltaX * (this.object.right - this.object.left) / this.object.zoom / element.clientWidth, this.object.matrix);\n            this._panUp(deltaY * (this.object.top - this.object.bottom) / this.object.zoom / element.clientHeight, this.object.matrix);\n        } else {\n            // camera neither orthographic nor perspective\n            console.warn(\"WARNING: OrbitControls.js encountered an unknown camera type - pan disabled.\");\n            this.enablePan = false;\n        }\n    }\n    _dollyOut(dollyScale) {\n        if (this.object.isPerspectiveCamera || this.object.isOrthographicCamera) {\n            this._scale /= dollyScale;\n        } else {\n            console.warn(\"WARNING: OrbitControls.js encountered an unknown camera type - dolly/zoom disabled.\");\n            this.enableZoom = false;\n        }\n    }\n    _dollyIn(dollyScale) {\n        if (this.object.isPerspectiveCamera || this.object.isOrthographicCamera) {\n            this._scale *= dollyScale;\n        } else {\n            console.warn(\"WARNING: OrbitControls.js encountered an unknown camera type - dolly/zoom disabled.\");\n            this.enableZoom = false;\n        }\n    }\n    _updateZoomParameters(x, y) {\n        if (!this.zoomToCursor) {\n            return;\n        }\n        this._performCursorZoom = true;\n        const rect = this.domElement.getBoundingClientRect();\n        const dx = x - rect.left;\n        const dy = y - rect.top;\n        const w = rect.width;\n        const h = rect.height;\n        this._mouse.x = dx / w * 2 - 1;\n        this._mouse.y = -(dy / h) * 2 + 1;\n        this._dollyDirection.set(this._mouse.x, this._mouse.y, 1).unproject(this.object).sub(this.object.position).normalize();\n    }\n    _clampDistance(dist) {\n        return Math.max(this.minDistance, Math.min(this.maxDistance, dist));\n    }\n    //\n    // event callbacks - update the object state\n    //\n    _handleMouseDownRotate(event) {\n        this._rotateStart.set(event.clientX, event.clientY);\n    }\n    _handleMouseDownDolly(event) {\n        this._updateZoomParameters(event.clientX, event.clientX);\n        this._dollyStart.set(event.clientX, event.clientY);\n    }\n    _handleMouseDownPan(event) {\n        this._panStart.set(event.clientX, event.clientY);\n    }\n    _handleMouseMoveRotate(event) {\n        this._rotateEnd.set(event.clientX, event.clientY);\n        this._rotateDelta.subVectors(this._rotateEnd, this._rotateStart).multiplyScalar(this.rotateSpeed);\n        const element = this.domElement;\n        this._rotateLeft(_twoPI * this._rotateDelta.x / element.clientHeight); // yes, height\n        this._rotateUp(_twoPI * this._rotateDelta.y / element.clientHeight);\n        this._rotateStart.copy(this._rotateEnd);\n        this.update();\n    }\n    _handleMouseMoveDolly(event) {\n        this._dollyEnd.set(event.clientX, event.clientY);\n        this._dollyDelta.subVectors(this._dollyEnd, this._dollyStart);\n        if (this._dollyDelta.y > 0) {\n            this._dollyOut(this._getZoomScale(this._dollyDelta.y));\n        } else if (this._dollyDelta.y < 0) {\n            this._dollyIn(this._getZoomScale(this._dollyDelta.y));\n        }\n        this._dollyStart.copy(this._dollyEnd);\n        this.update();\n    }\n    _handleMouseMovePan(event) {\n        this._panEnd.set(event.clientX, event.clientY);\n        this._panDelta.subVectors(this._panEnd, this._panStart).multiplyScalar(this.panSpeed);\n        this._pan(this._panDelta.x, this._panDelta.y);\n        this._panStart.copy(this._panEnd);\n        this.update();\n    }\n    _handleMouseWheel(event) {\n        this._updateZoomParameters(event.clientX, event.clientY);\n        if (event.deltaY < 0) {\n            this._dollyIn(this._getZoomScale(event.deltaY));\n        } else if (event.deltaY > 0) {\n            this._dollyOut(this._getZoomScale(event.deltaY));\n        }\n        this.update();\n    }\n    _handleKeyDown(event) {\n        let needsUpdate = false;\n        switch(event.code){\n            case this.keys.UP:\n                if (event.ctrlKey || event.metaKey || event.shiftKey) {\n                    if (this.enableRotate) {\n                        this._rotateUp(_twoPI * this.keyRotateSpeed / this.domElement.clientHeight);\n                    }\n                } else {\n                    if (this.enablePan) {\n                        this._pan(0, this.keyPanSpeed);\n                    }\n                }\n                needsUpdate = true;\n                break;\n            case this.keys.BOTTOM:\n                if (event.ctrlKey || event.metaKey || event.shiftKey) {\n                    if (this.enableRotate) {\n                        this._rotateUp(-_twoPI * this.keyRotateSpeed / this.domElement.clientHeight);\n                    }\n                } else {\n                    if (this.enablePan) {\n                        this._pan(0, -this.keyPanSpeed);\n                    }\n                }\n                needsUpdate = true;\n                break;\n            case this.keys.LEFT:\n                if (event.ctrlKey || event.metaKey || event.shiftKey) {\n                    if (this.enableRotate) {\n                        this._rotateLeft(_twoPI * this.keyRotateSpeed / this.domElement.clientHeight);\n                    }\n                } else {\n                    if (this.enablePan) {\n                        this._pan(this.keyPanSpeed, 0);\n                    }\n                }\n                needsUpdate = true;\n                break;\n            case this.keys.RIGHT:\n                if (event.ctrlKey || event.metaKey || event.shiftKey) {\n                    if (this.enableRotate) {\n                        this._rotateLeft(-_twoPI * this.keyRotateSpeed / this.domElement.clientHeight);\n                    }\n                } else {\n                    if (this.enablePan) {\n                        this._pan(-this.keyPanSpeed, 0);\n                    }\n                }\n                needsUpdate = true;\n                break;\n        }\n        if (needsUpdate) {\n            // prevent the browser from scrolling on cursor keys\n            event.preventDefault();\n            this.update();\n        }\n    }\n    _handleTouchStartRotate(event) {\n        if (this._pointers.length === 1) {\n            this._rotateStart.set(event.pageX, event.pageY);\n        } else {\n            const position = this._getSecondPointerPosition(event);\n            const x = 0.5 * (event.pageX + position.x);\n            const y = 0.5 * (event.pageY + position.y);\n            this._rotateStart.set(x, y);\n        }\n    }\n    _handleTouchStartPan(event) {\n        if (this._pointers.length === 1) {\n            this._panStart.set(event.pageX, event.pageY);\n        } else {\n            const position = this._getSecondPointerPosition(event);\n            const x = 0.5 * (event.pageX + position.x);\n            const y = 0.5 * (event.pageY + position.y);\n            this._panStart.set(x, y);\n        }\n    }\n    _handleTouchStartDolly(event) {\n        const position = this._getSecondPointerPosition(event);\n        const dx = event.pageX - position.x;\n        const dy = event.pageY - position.y;\n        const distance = Math.sqrt(dx * dx + dy * dy);\n        this._dollyStart.set(0, distance);\n    }\n    _handleTouchStartDollyPan(event) {\n        if (this.enableZoom) this._handleTouchStartDolly(event);\n        if (this.enablePan) this._handleTouchStartPan(event);\n    }\n    _handleTouchStartDollyRotate(event) {\n        if (this.enableZoom) this._handleTouchStartDolly(event);\n        if (this.enableRotate) this._handleTouchStartRotate(event);\n    }\n    _handleTouchMoveRotate(event) {\n        if (this._pointers.length == 1) {\n            this._rotateEnd.set(event.pageX, event.pageY);\n        } else {\n            const position = this._getSecondPointerPosition(event);\n            const x = 0.5 * (event.pageX + position.x);\n            const y = 0.5 * (event.pageY + position.y);\n            this._rotateEnd.set(x, y);\n        }\n        this._rotateDelta.subVectors(this._rotateEnd, this._rotateStart).multiplyScalar(this.rotateSpeed);\n        const element = this.domElement;\n        this._rotateLeft(_twoPI * this._rotateDelta.x / element.clientHeight); // yes, height\n        this._rotateUp(_twoPI * this._rotateDelta.y / element.clientHeight);\n        this._rotateStart.copy(this._rotateEnd);\n    }\n    _handleTouchMovePan(event) {\n        if (this._pointers.length === 1) {\n            this._panEnd.set(event.pageX, event.pageY);\n        } else {\n            const position = this._getSecondPointerPosition(event);\n            const x = 0.5 * (event.pageX + position.x);\n            const y = 0.5 * (event.pageY + position.y);\n            this._panEnd.set(x, y);\n        }\n        this._panDelta.subVectors(this._panEnd, this._panStart).multiplyScalar(this.panSpeed);\n        this._pan(this._panDelta.x, this._panDelta.y);\n        this._panStart.copy(this._panEnd);\n    }\n    _handleTouchMoveDolly(event) {\n        const position = this._getSecondPointerPosition(event);\n        const dx = event.pageX - position.x;\n        const dy = event.pageY - position.y;\n        const distance = Math.sqrt(dx * dx + dy * dy);\n        this._dollyEnd.set(0, distance);\n        this._dollyDelta.set(0, Math.pow(this._dollyEnd.y / this._dollyStart.y, this.zoomSpeed));\n        this._dollyOut(this._dollyDelta.y);\n        this._dollyStart.copy(this._dollyEnd);\n        const centerX = (event.pageX + position.x) * 0.5;\n        const centerY = (event.pageY + position.y) * 0.5;\n        this._updateZoomParameters(centerX, centerY);\n    }\n    _handleTouchMoveDollyPan(event) {\n        if (this.enableZoom) this._handleTouchMoveDolly(event);\n        if (this.enablePan) this._handleTouchMovePan(event);\n    }\n    _handleTouchMoveDollyRotate(event) {\n        if (this.enableZoom) this._handleTouchMoveDolly(event);\n        if (this.enableRotate) this._handleTouchMoveRotate(event);\n    }\n    // pointers\n    _addPointer(event) {\n        this._pointers.push(event.pointerId);\n    }\n    _removePointer(event) {\n        delete this._pointerPositions[event.pointerId];\n        for(let i = 0; i < this._pointers.length; i++){\n            if (this._pointers[i] == event.pointerId) {\n                this._pointers.splice(i, 1);\n                return;\n            }\n        }\n    }\n    _isTrackingPointer(event) {\n        for(let i = 0; i < this._pointers.length; i++){\n            if (this._pointers[i] == event.pointerId) return true;\n        }\n        return false;\n    }\n    _trackPointer(event) {\n        let position = this._pointerPositions[event.pointerId];\n        if (position === undefined) {\n            position = new three__WEBPACK_IMPORTED_MODULE_0__.Vector2();\n            this._pointerPositions[event.pointerId] = position;\n        }\n        position.set(event.pageX, event.pageY);\n    }\n    _getSecondPointerPosition(event) {\n        const pointerId = event.pointerId === this._pointers[0] ? this._pointers[1] : this._pointers[0];\n        return this._pointerPositions[pointerId];\n    }\n    //\n    _customWheelEvent(event) {\n        const mode = event.deltaMode;\n        // minimal wheel event altered to meet delta-zoom demand\n        const newEvent = {\n            clientX: event.clientX,\n            clientY: event.clientY,\n            deltaY: event.deltaY\n        };\n        switch(mode){\n            case 1:\n                newEvent.deltaY *= 16;\n                break;\n            case 2:\n                newEvent.deltaY *= 100;\n                break;\n        }\n        // detect if event was triggered by pinching\n        if (event.ctrlKey && !this._controlActive) {\n            newEvent.deltaY *= 10;\n        }\n        return newEvent;\n    }\n    constructor(object, domElement = null){\n        super(object, domElement);\n        this.state = _STATE.NONE;\n        // Set to false to disable this control\n        this.enabled = true;\n        // \"target\" sets the location of focus, where the object orbits around\n        this.target = new three__WEBPACK_IMPORTED_MODULE_0__.Vector3();\n        // Sets the 3D cursor (similar to Blender), from which the maxTargetRadius takes effect\n        this.cursor = new three__WEBPACK_IMPORTED_MODULE_0__.Vector3();\n        // How far you can dolly in and out ( PerspectiveCamera only )\n        this.minDistance = 0;\n        this.maxDistance = Infinity;\n        // How far you can zoom in and out ( OrthographicCamera only )\n        this.minZoom = 0;\n        this.maxZoom = Infinity;\n        // Limit camera target within a spherical area around the cursor\n        this.minTargetRadius = 0;\n        this.maxTargetRadius = Infinity;\n        // How far you can orbit vertically, upper and lower limits.\n        // Range is 0 to Math.PI radians.\n        this.minPolarAngle = 0; // radians\n        this.maxPolarAngle = Math.PI; // radians\n        // How far you can orbit horizontally, upper and lower limits.\n        // If set, the interval [ min, max ] must be a sub-interval of [ - 2 PI, 2 PI ], with ( max - min < 2 PI )\n        this.minAzimuthAngle = -Infinity; // radians\n        this.maxAzimuthAngle = Infinity; // radians\n        // Set to true to enable damping (inertia)\n        // If damping is enabled, you must call controls.update() in your animation loop\n        this.enableDamping = false;\n        this.dampingFactor = 0.05;\n        // This option actually enables dollying in and out; left as \"zoom\" for backwards compatibility.\n        // Set to false to disable zooming\n        this.enableZoom = true;\n        this.zoomSpeed = 1.0;\n        // Set to false to disable rotating\n        this.enableRotate = true;\n        this.rotateSpeed = 1.0;\n        this.keyRotateSpeed = 1.0;\n        // Set to false to disable panning\n        this.enablePan = true;\n        this.panSpeed = 1.0;\n        this.screenSpacePanning = true; // if false, pan orthogonal to world-space direction camera.up\n        this.keyPanSpeed = 7.0; // pixels moved per arrow key push\n        this.zoomToCursor = false;\n        // Set to true to automatically rotate around the target\n        // If auto-rotate is enabled, you must call controls.update() in your animation loop\n        this.autoRotate = false;\n        this.autoRotateSpeed = 2.0; // 30 seconds per orbit when fps is 60\n        // The four arrow keys\n        this.keys = {\n            LEFT: \"ArrowLeft\",\n            UP: \"ArrowUp\",\n            RIGHT: \"ArrowRight\",\n            BOTTOM: \"ArrowDown\"\n        };\n        // Mouse buttons\n        this.mouseButtons = {\n            LEFT: three__WEBPACK_IMPORTED_MODULE_0__.MOUSE.ROTATE,\n            MIDDLE: three__WEBPACK_IMPORTED_MODULE_0__.MOUSE.DOLLY,\n            RIGHT: three__WEBPACK_IMPORTED_MODULE_0__.MOUSE.PAN\n        };\n        // Touch fingers\n        this.touches = {\n            ONE: three__WEBPACK_IMPORTED_MODULE_0__.TOUCH.ROTATE,\n            TWO: three__WEBPACK_IMPORTED_MODULE_0__.TOUCH.DOLLY_PAN\n        };\n        // for reset\n        this.target0 = this.target.clone();\n        this.position0 = this.object.position.clone();\n        this.zoom0 = this.object.zoom;\n        // the target DOM element for key events\n        this._domElementKeyEvents = null;\n        // internals\n        this._lastPosition = new three__WEBPACK_IMPORTED_MODULE_0__.Vector3();\n        this._lastQuaternion = new three__WEBPACK_IMPORTED_MODULE_0__.Quaternion();\n        this._lastTargetPosition = new three__WEBPACK_IMPORTED_MODULE_0__.Vector3();\n        // so camera.up is the orbit axis\n        this._quat = new three__WEBPACK_IMPORTED_MODULE_0__.Quaternion().setFromUnitVectors(object.up, new three__WEBPACK_IMPORTED_MODULE_0__.Vector3(0, 1, 0));\n        this._quatInverse = this._quat.clone().invert();\n        // current position in spherical coordinates\n        this._spherical = new three__WEBPACK_IMPORTED_MODULE_0__.Spherical();\n        this._sphericalDelta = new three__WEBPACK_IMPORTED_MODULE_0__.Spherical();\n        this._scale = 1;\n        this._panOffset = new three__WEBPACK_IMPORTED_MODULE_0__.Vector3();\n        this._rotateStart = new three__WEBPACK_IMPORTED_MODULE_0__.Vector2();\n        this._rotateEnd = new three__WEBPACK_IMPORTED_MODULE_0__.Vector2();\n        this._rotateDelta = new three__WEBPACK_IMPORTED_MODULE_0__.Vector2();\n        this._panStart = new three__WEBPACK_IMPORTED_MODULE_0__.Vector2();\n        this._panEnd = new three__WEBPACK_IMPORTED_MODULE_0__.Vector2();\n        this._panDelta = new three__WEBPACK_IMPORTED_MODULE_0__.Vector2();\n        this._dollyStart = new three__WEBPACK_IMPORTED_MODULE_0__.Vector2();\n        this._dollyEnd = new three__WEBPACK_IMPORTED_MODULE_0__.Vector2();\n        this._dollyDelta = new three__WEBPACK_IMPORTED_MODULE_0__.Vector2();\n        this._dollyDirection = new three__WEBPACK_IMPORTED_MODULE_0__.Vector3();\n        this._mouse = new three__WEBPACK_IMPORTED_MODULE_0__.Vector2();\n        this._performCursorZoom = false;\n        this._pointers = [];\n        this._pointerPositions = {};\n        this._controlActive = false;\n        // event listeners\n        this._onPointerMove = onPointerMove.bind(this);\n        this._onPointerDown = onPointerDown.bind(this);\n        this._onPointerUp = onPointerUp.bind(this);\n        this._onContextMenu = onContextMenu.bind(this);\n        this._onMouseWheel = onMouseWheel.bind(this);\n        this._onKeyDown = onKeyDown.bind(this);\n        this._onTouchStart = onTouchStart.bind(this);\n        this._onTouchMove = onTouchMove.bind(this);\n        this._onMouseDown = onMouseDown.bind(this);\n        this._onMouseMove = onMouseMove.bind(this);\n        this._interceptControlDown = interceptControlDown.bind(this);\n        this._interceptControlUp = interceptControlUp.bind(this);\n        //\n        if (this.domElement !== null) {\n            this.connect();\n        }\n        this.update();\n    }\n}\nfunction onPointerDown(event) {\n    if (this.enabled === false) return;\n    if (this._pointers.length === 0) {\n        this.domElement.setPointerCapture(event.pointerId);\n        this.domElement.addEventListener(\"pointermove\", this._onPointerMove);\n        this.domElement.addEventListener(\"pointerup\", this._onPointerUp);\n    }\n    //\n    if (this._isTrackingPointer(event)) return;\n    //\n    this._addPointer(event);\n    if (event.pointerType === \"touch\") {\n        this._onTouchStart(event);\n    } else {\n        this._onMouseDown(event);\n    }\n}\nfunction onPointerMove(event) {\n    if (this.enabled === false) return;\n    if (event.pointerType === \"touch\") {\n        this._onTouchMove(event);\n    } else {\n        this._onMouseMove(event);\n    }\n}\nfunction onPointerUp(event) {\n    this._removePointer(event);\n    switch(this._pointers.length){\n        case 0:\n            this.domElement.releasePointerCapture(event.pointerId);\n            this.domElement.removeEventListener(\"pointermove\", this._onPointerMove);\n            this.domElement.removeEventListener(\"pointerup\", this._onPointerUp);\n            this.dispatchEvent(_endEvent);\n            this.state = _STATE.NONE;\n            break;\n        case 1:\n            const pointerId = this._pointers[0];\n            const position = this._pointerPositions[pointerId];\n            // minimal placeholder event - allows state correction on pointer-up\n            this._onTouchStart({\n                pointerId: pointerId,\n                pageX: position.x,\n                pageY: position.y\n            });\n            break;\n    }\n}\nfunction onMouseDown(event) {\n    let mouseAction;\n    switch(event.button){\n        case 0:\n            mouseAction = this.mouseButtons.LEFT;\n            break;\n        case 1:\n            mouseAction = this.mouseButtons.MIDDLE;\n            break;\n        case 2:\n            mouseAction = this.mouseButtons.RIGHT;\n            break;\n        default:\n            mouseAction = -1;\n    }\n    switch(mouseAction){\n        case three__WEBPACK_IMPORTED_MODULE_0__.MOUSE.DOLLY:\n            if (this.enableZoom === false) return;\n            this._handleMouseDownDolly(event);\n            this.state = _STATE.DOLLY;\n            break;\n        case three__WEBPACK_IMPORTED_MODULE_0__.MOUSE.ROTATE:\n            if (event.ctrlKey || event.metaKey || event.shiftKey) {\n                if (this.enablePan === false) return;\n                this._handleMouseDownPan(event);\n                this.state = _STATE.PAN;\n            } else {\n                if (this.enableRotate === false) return;\n                this._handleMouseDownRotate(event);\n                this.state = _STATE.ROTATE;\n            }\n            break;\n        case three__WEBPACK_IMPORTED_MODULE_0__.MOUSE.PAN:\n            if (event.ctrlKey || event.metaKey || event.shiftKey) {\n                if (this.enableRotate === false) return;\n                this._handleMouseDownRotate(event);\n                this.state = _STATE.ROTATE;\n            } else {\n                if (this.enablePan === false) return;\n                this._handleMouseDownPan(event);\n                this.state = _STATE.PAN;\n            }\n            break;\n        default:\n            this.state = _STATE.NONE;\n    }\n    if (this.state !== _STATE.NONE) {\n        this.dispatchEvent(_startEvent);\n    }\n}\nfunction onMouseMove(event) {\n    switch(this.state){\n        case _STATE.ROTATE:\n            if (this.enableRotate === false) return;\n            this._handleMouseMoveRotate(event);\n            break;\n        case _STATE.DOLLY:\n            if (this.enableZoom === false) return;\n            this._handleMouseMoveDolly(event);\n            break;\n        case _STATE.PAN:\n            if (this.enablePan === false) return;\n            this._handleMouseMovePan(event);\n            break;\n    }\n}\nfunction onMouseWheel(event) {\n    if (this.enabled === false || this.enableZoom === false || this.state !== _STATE.NONE) return;\n    event.preventDefault();\n    this.dispatchEvent(_startEvent);\n    this._handleMouseWheel(this._customWheelEvent(event));\n    this.dispatchEvent(_endEvent);\n}\nfunction onKeyDown(event) {\n    if (this.enabled === false) return;\n    this._handleKeyDown(event);\n}\nfunction onTouchStart(event) {\n    this._trackPointer(event);\n    switch(this._pointers.length){\n        case 1:\n            switch(this.touches.ONE){\n                case three__WEBPACK_IMPORTED_MODULE_0__.TOUCH.ROTATE:\n                    if (this.enableRotate === false) return;\n                    this._handleTouchStartRotate(event);\n                    this.state = _STATE.TOUCH_ROTATE;\n                    break;\n                case three__WEBPACK_IMPORTED_MODULE_0__.TOUCH.PAN:\n                    if (this.enablePan === false) return;\n                    this._handleTouchStartPan(event);\n                    this.state = _STATE.TOUCH_PAN;\n                    break;\n                default:\n                    this.state = _STATE.NONE;\n            }\n            break;\n        case 2:\n            switch(this.touches.TWO){\n                case three__WEBPACK_IMPORTED_MODULE_0__.TOUCH.DOLLY_PAN:\n                    if (this.enableZoom === false && this.enablePan === false) return;\n                    this._handleTouchStartDollyPan(event);\n                    this.state = _STATE.TOUCH_DOLLY_PAN;\n                    break;\n                case three__WEBPACK_IMPORTED_MODULE_0__.TOUCH.DOLLY_ROTATE:\n                    if (this.enableZoom === false && this.enableRotate === false) return;\n                    this._handleTouchStartDollyRotate(event);\n                    this.state = _STATE.TOUCH_DOLLY_ROTATE;\n                    break;\n                default:\n                    this.state = _STATE.NONE;\n            }\n            break;\n        default:\n            this.state = _STATE.NONE;\n    }\n    if (this.state !== _STATE.NONE) {\n        this.dispatchEvent(_startEvent);\n    }\n}\nfunction onTouchMove(event) {\n    this._trackPointer(event);\n    switch(this.state){\n        case _STATE.TOUCH_ROTATE:\n            if (this.enableRotate === false) return;\n            this._handleTouchMoveRotate(event);\n            this.update();\n            break;\n        case _STATE.TOUCH_PAN:\n            if (this.enablePan === false) return;\n            this._handleTouchMovePan(event);\n            this.update();\n            break;\n        case _STATE.TOUCH_DOLLY_PAN:\n            if (this.enableZoom === false && this.enablePan === false) return;\n            this._handleTouchMoveDollyPan(event);\n            this.update();\n            break;\n        case _STATE.TOUCH_DOLLY_ROTATE:\n            if (this.enableZoom === false && this.enableRotate === false) return;\n            this._handleTouchMoveDollyRotate(event);\n            this.update();\n            break;\n        default:\n            this.state = _STATE.NONE;\n    }\n}\nfunction onContextMenu(event) {\n    if (this.enabled === false) return;\n    event.preventDefault();\n}\nfunction interceptControlDown(event) {\n    if (event.key === \"Control\") {\n        this._controlActive = true;\n        const document = this.domElement.getRootNode(); // offscreen canvas compatibility\n        document.addEventListener(\"keyup\", this._interceptControlUp, {\n            passive: true,\n            capture: true\n        });\n    }\n}\nfunction interceptControlUp(event) {\n    if (event.key === \"Control\") {\n        this._controlActive = false;\n        const document = this.domElement.getRootNode(); // offscreen canvas compatibility\n        document.removeEventListener(\"keyup\", this._interceptControlUp, {\n            passive: true,\n            capture: true\n        });\n    }\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy90aHJlZS9leGFtcGxlcy9qc20vY29udHJvbHMvT3JiaXRDb250cm9scy5qcyIsIm1hcHBpbmdzIjoiOzs7OztBQVdlO0FBRWYsb0VBQW9FO0FBQ3BFLHVGQUF1RjtBQUN2RixFQUFFO0FBQ0YsaURBQWlEO0FBQ2pELDZFQUE2RTtBQUM3RSxtR0FBbUc7QUFFbkcsTUFBTVUsZUFBZTtJQUFFQyxNQUFNO0FBQVM7QUFDdEMsTUFBTUMsY0FBYztJQUFFRCxNQUFNO0FBQVE7QUFDcEMsTUFBTUUsWUFBWTtJQUFFRixNQUFNO0FBQU07QUFDaEMsTUFBTUcsT0FBTyxJQUFJTixzQ0FBR0E7QUFDcEIsTUFBTU8sU0FBUyxJQUFJUix3Q0FBS0E7QUFDeEIsTUFBTVMsY0FBY0MsS0FBS0MsR0FBRyxDQUFFLEtBQUtULDRDQUFTQSxDQUFDVSxPQUFPO0FBRXBELE1BQU1DLEtBQUssSUFBSWQsMENBQU9BO0FBQ3RCLE1BQU1lLFNBQVMsSUFBSUosS0FBS0ssRUFBRTtBQUUxQixNQUFNQyxTQUFTO0lBQ2RDLE1BQU0sQ0FBRTtJQUNSQyxRQUFRO0lBQ1JDLE9BQU87SUFDUEMsS0FBSztJQUNMQyxjQUFjO0lBQ2RDLFdBQVc7SUFDWEMsaUJBQWlCO0lBQ2pCQyxvQkFBb0I7QUFDckI7QUFDQSxNQUFNQyxPQUFPO0FBRWIsTUFBTUMsc0JBQXNCakMsMkNBQVFBO0lBdUpuQ2tDLFVBQVU7UUFFVCxJQUFJLENBQUNDLFVBQVUsQ0FBQ0MsZ0JBQWdCLENBQUUsZUFBZSxJQUFJLENBQUNDLGNBQWM7UUFDcEUsSUFBSSxDQUFDRixVQUFVLENBQUNDLGdCQUFnQixDQUFFLGlCQUFpQixJQUFJLENBQUNFLFlBQVk7UUFFcEUsSUFBSSxDQUFDSCxVQUFVLENBQUNDLGdCQUFnQixDQUFFLGVBQWUsSUFBSSxDQUFDRyxjQUFjO1FBQ3BFLElBQUksQ0FBQ0osVUFBVSxDQUFDQyxnQkFBZ0IsQ0FBRSxTQUFTLElBQUksQ0FBQ0ksYUFB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O1lBQU1JLFNBQVM7UUFBSztJQUU5RjtBQUVEO0FBRUEsU0FBU3NQLG1CQUFvQmpHLEtBQUs7SUFFakMsSUFBS0EsTUFBTXdHLEdBQUcsS0FBSyxXQUFZO1FBRTlCLElBQUksQ0FBQ3JDLGNBQWMsR0FBRztRQUV0QixNQUFNM04sV0FBVyxJQUFJLENBQUNQLFVBQVUsQ0FBQ1EsV0FBVyxJQUFJLGlDQUFpQztRQUVqRkQsU0FBU08sbUJBQW1CLENBQUUsU0FBUyxJQUFJLENBQUNpUCxtQkFBbUIsRUFBRTtZQUFFelAsU0FBUztZQUFNSSxTQUFTO1FBQUs7SUFFakc7QUFFRDtBQUV5QiIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi9ub2RlX21vZHVsZXMvdGhyZWUvZXhhbXBsZXMvanNtL2NvbnRyb2xzL09yYml0Q29udHJvbHMuanM/ZDFmZCJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge1xuXHRDb250cm9scyxcblx0TU9VU0UsXG5cdFF1YXRlcm5pb24sXG5cdFNwaGVyaWNhbCxcblx0VE9VQ0gsXG5cdFZlY3RvcjIsXG5cdFZlY3RvcjMsXG5cdFBsYW5lLFxuXHRSYXksXG5cdE1hdGhVdGlsc1xufSBmcm9tICd0aHJlZSc7XG5cbi8vIE9yYml0Q29udHJvbHMgcGVyZm9ybXMgb3JiaXRpbmcsIGRvbGx5aW5nICh6b29taW5nKSwgYW5kIHBhbm5pbmcuXG4vLyBVbmxpa2UgVHJhY2tiYWxsQ29udHJvbHMsIGl0IG1haW50YWlucyB0aGUgXCJ1cFwiIGRpcmVjdGlvbiBvYmplY3QudXAgKCtZIGJ5IGRlZmF1bHQpLlxuLy9cbi8vICAgIE9yYml0IC0gbGVmdCBtb3VzZSAvIHRvdWNoOiBvbmUtZmluZ2VyIG1vdmVcbi8vICAgIFpvb20gLSBtaWRkbGUgbW91c2UsIG9yIG1vdXNld2hlZWwgLyB0b3VjaDogdHdvLWZpbmdlciBzcHJlYWQgb3Igc3F1aXNoXG4vLyAgICBQYW4gLSByaWdodCBtb3VzZSwgb3IgbGVmdCBtb3VzZSArIGN0cmwvbWV0YS9zaGlmdEtleSwgb3IgYXJyb3cga2V5cyAvIHRvdWNoOiB0d28tZmluZ2VyIG1vdmVcblxuY29uc3QgX2NoYW5nZUV2ZW50ID0geyB0eXBlOiAnY2hhbmdlJyB9O1xuY29uc3QgX3N0YXJ0RXZlbnQgPSB7IHR5cGU6ICdzdGFydCcgfTtcbmNvbnN0IF9lbmRFdmVudCA9IHsgdHlwZTogJ2VuZCcgfTtcbmNvbnN0IF9yYXkgPSBuZXcgUmF5KCk7XG5jb25zdCBfcGxhbmUgPSBuZXcgUGxhbmUoKTtcbmNvbnN0IF9USUxUX0xJTUlUID0gTWF0aC5jb3MoIDcwICogTWF0aFV0aWxzLkRFRzJSQUQgKTtcblxuY29uc3QgX3YgPSBuZXcgVmVjdG9yMygpO1xuY29uc3QgX3R3b1BJID0gMiAqIE1hdGguUEk7XG5cbmNvbnN0IF9TVEFURSA9IHtcblx0Tk9ORTogLSAxLFxuXHRST1RBVEU6IDAsXG5cdERPTExZOiAxLFxuXHRQQU46IDIsXG5cdFRPVUNIX1JPVEFURTogMyxcblx0VE9VQ0hfUEFOOiA0LFxuXHRUT1VDSF9ET0xMWV9QQU46IDUsXG5cdFRPVUNIX0RPTExZX1JPVEFURTogNlxufTtcbmNvbnN0IF9FUFMgPSAwLjAwMDAwMTtcblxuY2xhc3MgT3JiaXRDb250cm9scyBleHRlbmRzIENvbnRyb2xzIHtcblxuXHRjb25zdHJ1Y3Rvciggb2JqZWN0LCBkb21FbGVtZW50ID0gbnVsbCApIHtcblxuXHRcdHN1cGVyKCBvYmplY3QsIGRvbUVsZW1lbnQgKTtcblxuXHRcdHRoaXMuc3RhdGUgPSBfU1RBVEUuTk9ORTtcblxuXHRcdC8vIFNldCB0byBmYWxzZSB0byBkaXNhYmxlIHRoaXMgY29udHJvbFxuXHRcdHRoaXMuZW5hYmxlZCA9IHRydWU7XG5cblx0XHQvLyBcInRhcmdldFwiIHNldHMgdGhlIGxvY2F0aW9uIG9mIGZvY3VzLCB3aGVyZSB0aGUgb2JqZWN0IG9yYml0cyBhcm91bmRcblx0XHR0aGlzLnRhcmdldCA9IG5ldyBWZWN0b3IzKCk7XG5cblx0XHQvLyBTZXRzIHRoZSAzRCBjdXJzb3IgKHNpbWlsYXIgdG8gQmxlbmRlciksIGZyb20gd2hpY2ggdGhlIG1heFRhcmdldFJhZGl1cyB0YWtlcyBlZmZlY3Rcblx0XHR0aGlzLmN1cnNvciA9IG5ldyBWZWN0b3IzKCk7XG5cblx0XHQvLyBIb3cgZmFyIHlvdSBjYW4gZG9sbHkgaW4gYW5kIG91dCAoIFBlcnNwZWN0aXZlQ2FtZXJhIG9ubHkgKVxuXHRcdHRoaXMubWluRGlzdGFuY2UgPSAwO1xuXHRcdHRoaXMubWF4RGlzdGFuY2UgPSBJbmZpbml0eTtcblxuXHRcdC8vIEhvdyBmYXIgeW91IGNhbiB6b29tIGluIGFuZCBvdXQgKCBPcnRob2dyYXBoaWNDYW1lcmEgb25seSApXG5cdFx0dGhpcy5taW5ab29tID0gMDtcblx0XHR0aGlzLm1heFpvb20gPSBJbmZpbml0eTtcblxuXHRcdC8vIExpbWl0IGNhbWVyYSB0YXJnZXQgd2l0aGluIGEgc3BoZXJpY2FsIGFyZWEgYXJvdW5kIHRoZSBjdXJzb3Jcblx0XHR0aGlzLm1pblRhcmdldFJhZGl1cyA9IDA7XG5cdFx0dGhpcy5tYXhUYXJnZXRSYWRpdXMgPSBJbmZpbml0eTtcblxuXHRcdC8vIEhvdyBmYXIgeW91IGNhbiBvcmJpdCB2ZXJ0aWNhbGx5LCB1cHBlciBhbmQgbG93ZXIgbGltaXRzLlxuXHRcdC8vIFJhbmdlIGlzIDAgdG8gTWF0aC5QSSByYWRpYW5zLlxuXHRcdHRoaXMubWluUG9sYXJBbmdsZSA9IDA7IC8vIHJhZGlhbnNcblx0XHR0aGlzLm1heFBvbGFyQW5nbGUgPSBNYXRoLlBJOyAvLyByYWRpYW5zXG5cblx0XHQvLyBIb3cgZmFyIHlvdSBjYW4gb3JiaXQgaG9yaXpvbnRhbGx5LCB1cHBlciBhbmQgbG93ZXIgbGltaXRzLlxuXHRcdC8vIElmIHNldCwgdGhlIGludGVydmFsIFsgbWluLCBtYXggXSBtdXN0IGJlIGEgc3ViLWludGVydmFsIG9mIFsgLSAyIFBJLCAyIFBJIF0sIHdpdGggKCBtYXggLSBtaW4gPCAyIFBJIClcblx0XHR0aGlzLm1pbkF6aW11dGhBbmdsZSA9IC0gSW5maW5pdHk7IC8vIHJhZGlhbnNcblx0XHR0aGlzLm1heEF6aW11dGhBbmdsZSA9IEluZmluaXR5OyAvLyByYWRpYW5zXG5cblx0XHQvLyBTZXQgdG8gdHJ1ZSB0byBlbmFibGUgZGFtcGluZyAoaW5lcnRpYSlcblx0XHQvLyBJZiBkYW1waW5nIGlzIGVuYWJsZWQsIHlvdSBtdXN0IGNhbGwgY29udHJvbHMudXBkYXRlKCkgaW4geW91ciBhbmltYXRpb24gbG9vcFxuXHRcdHRoaXMuZW5hYmxlRGFtcGluZyA9IGZhbHNlO1xuXHRcdHRoaXMuZGFtcGluZ0ZhY3RvciA9IDAuMDU7XG5cblx0XHQvLyBUaGlzIG9wdGlvbiBhY3R1YWxseSBlbmFibGVzIGRvbGx5aW5nIGluIGFuZCBvdXQ7IGxlZnQgYXMgXCJ6b29tXCIgZm9yIGJhY2t3YXJkcyBjb21wYXRpYmlsaXR5LlxuXHRcdC8vIFNldCB0byBmYWxzZSB0byBkaXNhYmxlIHpvb21pbmdcblx0XHR0aGlzLmVuYWJsZVpvb20gPSB0cnVlO1xuXHRcdHRoaXMuem9vbVNwZWVkID0gMS4wO1xuXG5cdFx0Ly8gU2V0IHRvIGZhbHNlIHRvIGRpc2FibGUgcm90YXRpbmdcblx0XHR0aGlzLmVuYWJsZVJvdGF0ZSA9IHRydWU7XG5cdFx0dGhpcy5yb3RhdGVTcGVlZCA9IDEuMDtcblx0XHR0aGlzLmtleVJvdGF0ZVNwZWVkID0gMS4wO1xuXG5cdFx0Ly8gU2V0IHRvIGZhbHNlIHRvIGRpc2FibGUgcGFubmluZ1xuXHRcdHRoaXMuZW5hYmxlUGFuID0gdHJ1ZTtcblx0XHR0aGlzLnBhblNwZWVkID0gMS4wO1xuXHRcdHRoaXMuc2NyZWVuU3BhY2VQYW5uaW5nID0gdHJ1ZTsgLy8gaWYgZmFsc2UsIHBhbiBvcnRob2dvbmFsIHRvIHdvcmxkLXNwYWNlIGRpcmVjdGlvbiBjYW1lcmEudXBcblx0XHR0aGlzLmtleVBhblNwZWVkID0gNy4wO1x0Ly8gcGl4ZWxzIG1vdmVkIHBlciBhcnJvdyBrZXkgcHVzaFxuXHRcdHRoaXMuem9vbVRvQ3Vyc29yID0gZmFsc2U7XG5cblx0XHQvLyBTZXQgdG8gdHJ1ZSB0byBhdXRvbWF0aWNhbGx5IHJvdGF0ZSBhcm91bmQgdGhlIHRhcmdldFxuXHRcdC8vIElmIGF1dG8tcm90YXRlIGlzIGVuYWJsZWQsIHlvdSBtdXN0IGNhbGwgY29udHJvbHMudXBkYXRlKCkgaW4geW91ciBhbmltYXRpb24gbG9vcFxuXHRcdHRoaXMuYXV0b1JvdGF0ZSA9IGZhbHNlO1xuXHRcdHRoaXMuYXV0b1JvdGF0ZVNwZWVkID0gMi4wOyAvLyAzMCBzZWNvbmRzIHBlciBvcmJpdCB3aGVuIGZwcyBpcyA2MFxuXG5cdFx0Ly8gVGhlIGZvdXIgYXJyb3cga2V5c1xuXHRcdHRoaXMua2V5cyA9IHsgTEVGVDogJ0Fycm93TGVmdCcsIFVQOiAnQXJyb3dVcCcsIFJJR0hUOiAnQXJyb3dSaWdodCcsIEJPVFRPTTogJ0Fycm93RG93bicgfTtcblxuXHRcdC8vIE1vdXNlIGJ1dHRvbnNcblx0XHR0aGlzLm1vdXNlQnV0dG9ucyA9IHsgTEVGVDogTU9VU0UuUk9UQVRFLCBNSURETEU6IE1PVVNFLkRPTExZLCBSSUdIVDogTU9VU0UuUEFOIH07XG5cblx0XHQvLyBUb3VjaCBmaW5nZXJzXG5cdFx0dGhpcy50b3VjaGVzID0geyBPTkU6IFRPVUNILlJPVEFURSwgVFdPOiBUT1VDSC5ET0xMWV9QQU4gfTtcblxuXHRcdC8vIGZvciByZXNldFxuXHRcdHRoaXMudGFyZ2V0MCA9IHRoaXMudGFyZ2V0LmNsb25lKCk7XG5cdFx0dGhpcy5wb3NpdGlvbjAgPSB0aGlzLm9iamVjdC5wb3NpdGlvbi5jbG9uZSgpO1xuXHRcdHRoaXMuem9vbTAgPSB0aGlzLm9iamVjdC56b29tO1xuXG5cdFx0Ly8gdGhlIHRhcmdldCBET00gZWxlbWVudCBmb3Iga2V5IGV2ZW50c1xuXHRcdHRoaXMuX2RvbUVsZW1lbnRLZXlFdmVudHMgPSBudWxsO1xuXG5cdFx0Ly8gaW50ZXJuYWxzXG5cblx0XHR0aGlzLl9sYXN0UG9zaXRpb24gPSBuZXcgVmVjdG9yMygpO1xuXHRcdHRoaXMuX2xhc3RRdWF0ZXJuaW9uID0gbmV3IFF1YXRlcm5pb24oKTtcblx0XHR0aGlzLl9sYXN0VGFyZ2V0UG9zaXRpb24gPSBuZXcgVmVjdG9yMygpO1xuXG5cdFx0Ly8gc28gY2FtZXJhLnVwIGlzIHRoZSBvcmJpdCBheGlzXG5cdFx0dGhpcy5fcXVhdCA9IG5ldyBRdWF0ZXJuaW9uKCkuc2V0RnJvbVVuaXRWZWN0b3JzKCBvYmplY3QudXAsIG5ldyBWZWN0b3IzKCAwLCAxLCAwICkgKTtcblx0XHR0aGlzLl9xdWF0SW52ZXJzZSA9IHRoaXMuX3F1YXQuY2xvbmUoKS5pbnZlcnQoKTtcblxuXHRcdC8vIGN1cnJlbnQgcG9zaXRpb24gaW4gc3BoZXJpY2FsIGNvb3JkaW5hdGVzXG5cdFx0dGhpcy5fc3BoZXJpY2FsID0gbmV3IFNwaGVyaWNhbCgpO1xuXHRcdHRoaXMuX3NwaGVyaWNhbERlbHRhID0gbmV3IFNwaGVyaWNhbCgpO1xuXG5cdFx0dGhpcy5fc2NhbGUgPSAxO1xuXHRcdHRoaXMuX3Bhbk9mZnNldCA9IG5ldyBWZWN0b3IzKCk7XG5cblx0XHR0aGlzLl9yb3RhdGVTdGFydCA9IG5ldyBWZWN0b3IyKCk7XG5cdFx0dGhpcy5fcm90YXRlRW5kID0gbmV3IFZlY3RvcjIoKTtcblx0XHR0aGlzLl9yb3RhdGVEZWx0YSA9IG5ldyBWZWN0b3IyKCk7XG5cblx0XHR0aGlzLl9wYW5TdGFydCA9IG5ldyBWZWN0b3IyKCk7XG5cdFx0dGhpcy5fcGFuRW5kID0gbmV3IFZlY3RvcjIoKTtcblx0XHR0aGlzLl9wYW5EZWx0YSA9IG5ldyBWZWN0b3IyKCk7XG5cblx0XHR0aGlzLl9kb2xseVN0YXJ0ID0gbmV3IFZlY3RvcjIoKTtcblx0XHR0aGlzLl9kb2xseUVuZCA9IG5ldyBWZWN0b3IyKCk7XG5cdFx0dGhpcy5fZG9sbHlEZWx0YSA9IG5ldyBWZWN0b3IyKCk7XG5cblx0XHR0aGlzLl9kb2xseURpcmVjdGlvbiA9IG5ldyBWZWN0b3IzKCk7XG5cdFx0dGhpcy5fbW91c2UgPSBuZXcgVmVjdG9yMigpO1xuXHRcdHRoaXMuX3BlcmZvcm1DdXJzb3Jab29tID0gZmFsc2U7XG5cblx0XHR0aGlzLl9wb2ludGVycyA9IFtdO1xuXHRcdHRoaXMuX3BvaW50ZXJQb3NpdGlvbnMgPSB7fTtcblxuXHRcdHRoaXMuX2NvbnRyb2xBY3RpdmUgPSBmYWxzZTtcblxuXHRcdC8vIGV2ZW50IGxpc3RlbmVyc1xuXG5cdFx0dGhpcy5fb25Qb2ludGVyTW92ZSA9IG9uUG9pbnRlck1vdmUuYmluZCggdGhpcyApO1xuXHRcdHRoaXMuX29uUG9pbnRlckRvd24gPSBvblBvaW50ZXJEb3duLmJpbmQoIHRoaXMgKTtcblx0XHR0aGlzLl9vblBvaW50ZXJVcCA9IG9uUG9pbnRlclVwLmJpbmQoIHRoaXMgKTtcblx0XHR0aGlzLl9vbkNvbnRleHRNZW51ID0gb25Db250ZXh0TWVudS5iaW5kKCB0aGlzICk7XG5cdFx0dGhpcy5fb25Nb3VzZVdoZWVsID0gb25Nb3VzZVdoZWVsLmJpbmQoIHRoaXMgKTtcblx0XHR0aGlzLl9vbktleURvd24gPSBvbktleURvd24uYmluZCggdGhpcyApO1xuXG5cdFx0dGhpcy5fb25Ub3VjaFN0YXJ0ID0gb25Ub3VjaFN0YXJ0LmJpbmQoIHRoaXMgKTtcblx0XHR0aGlzLl9vblRvdWNoTW92ZSA9IG9uVG91Y2hNb3ZlLmJpbmQoIHRoaXMgKTtcblxuXHRcdHRoaXMuX29uTW91c2VEb3duID0gb25Nb3VzZURvd24uYmluZCggdGhpcyApO1xuXHRcdHRoaXMuX29uTW91c2VNb3ZlID0gb25Nb3VzZU1vdmUuYmluZCggdGhpcyApO1xuXG5cdFx0dGhpcy5faW50ZXJjZXB0Q29udHJvbERvd24gPSBpbnRlcmNlcHRDb250cm9sRG93bi5iaW5kKCB0aGlzICk7XG5cdFx0dGhpcy5faW50ZXJjZXB0Q29udHJvbFVwID0gaW50ZXJjZXB0Q29udHJvbFVwLmJpbmQoIHRoaXMgKTtcblxuXHRcdC8vXG5cblx0XHRpZiAoIHRoaXMuZG9tRWxlbWVudCAhPT0gbnVsbCApIHtcblxuXHRcdFx0dGhpcy5jb25uZWN0KCk7XG5cblx0XHR9XG5cblx0XHR0aGlzLnVwZGF0ZSgpO1xuXG5cdH1cblxuXHRjb25uZWN0KCkge1xuXG5cdFx0dGhpcy5kb21FbGVtZW50LmFkZEV2ZW50TGlzdGVuZXIoICdwb2ludGVyZG93bicsIHRoaXMuX29uUG9pbnRlckRvd24gKTtcblx0XHR0aGlzLmRvbUVsZW1lbnQuYWRkRXZlbnRMaXN0ZW5lciggJ3BvaW50ZXJjYW5jZWwnLCB0aGlzLl9vblBvaW50ZXJVcCApO1xuXG5cdFx0dGhpcy5kb21FbGVtZW50LmFkZEV2ZW50TGlzdGVuZXIoICdjb250ZXh0bWVudScsIHRoaXMuX29uQ29udGV4dE1lbnUgKTtcblx0XHR0aGlzLmRvbUVsZW1lbnQuYWRkRXZlbnRMaXN0ZW5lciggJ3doZWVsJywgdGhpcy5fb25Nb3VzZVdoZWVsLCB7IHBhc3NpdmU6IGZhbHNlIH0gKTtcblxuXHRcdGNvbnN0IGRvY3VtZW50ID0gdGhpcy5kb21FbGVtZW50LmdldFJvb3ROb2RlKCk7IC8vIG9mZnNjcmVlbiBjYW52YXMgY29tcGF0aWJpbGl0eVxuXHRcdGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoICdrZXlkb3duJywgdGhpcy5faW50ZXJjZXB0Q29udHJvbERvd24sIHsgcGFzc2l2ZTogdHJ1ZSwgY2FwdHVyZTogdHJ1ZSB9ICk7XG5cblx0XHR0aGlzLmRvbUVsZW1lbnQuc3R5bGUudG91Y2hBY3Rpb24gPSAnbm9uZSc7IC8vIGRpc2FibGUgdG91Y2ggc2Nyb2xsXG5cblx0fVxuXG5cdGRpc2Nvbm5lY3QoKSB7XG5cblx0XHR0aGlzLmRvbUVsZW1lbnQucmVtb3ZlRXZlbnRMaXN0ZW5lciggJ3BvaW50ZXJkb3duJywgdGhpcy5fb25Qb2ludGVyRG93biApO1xuXHRcdHRoaXMuZG9tRWxlbWVudC5yZW1vdmVFdmVudExpc3RlbmVyKCAncG9pbnRlcm1vdmUnLCB0aGlzLl9vblBvaW50ZXJNb3ZlICk7XG5cdFx0dGhpcy5kb21FbGVtZW50LnJlbW92ZUV2ZW50TGlzdGVuZXIoICdwb2ludGVydXAnLCB0aGlzLl9vblBvaW50ZXJVcCApO1xuXHRcdHRoaXMuZG9tRWxlbWVudC5yZW1vdmVFdmVudExpc3RlbmVyKCAncG9pbnRlcmNhbmNlbCcsIHRoaXMuX29uUG9pbnRlclVwICk7XG5cblx0XHR0aGlzLmRvbUVsZW1lbnQucmVtb3ZlRXZlbnRMaXN0ZW5lciggJ3doZWVsJywgdGhpcy5fb25Nb3VzZVdoZWVsICk7XG5cdFx0dGhpcy5kb21FbGVtZW50LnJlbW92ZUV2ZW50TGlzdGVuZXIoICdjb250ZXh0bWVudScsIHRoaXMuX29uQ29udGV4dE1lbnUgKTtcblxuXHRcdHRoaXMuc3RvcExpc3RlblRvS2V5RXZlbnRzKCk7XG5cblx0XHRjb25zdCBkb2N1bWVudCA9IHRoaXMuZG9tRWxlbWVudC5nZXRSb290Tm9kZSgpOyAvLyBvZmZzY3JlZW4gY2FudmFzIGNvbXBhdGliaWxpdHlcblx0XHRkb2N1bWVudC5yZW1vdmVFdmVudExpc3RlbmVyKCAna2V5ZG93bicsIHRoaXMuX2ludGVyY2VwdENvbnRyb2xEb3duLCB7IGNhcHR1cmU6IHRydWUgfSApO1xuXG5cdFx0dGhpcy5kb21FbGVtZW50LnN0eWxlLnRvdWNoQWN0aW9uID0gJ2F1dG8nO1xuXG5cdH1cblxuXHRkaXNwb3NlKCkge1xuXG5cdFx0dGhpcy5kaXNjb25uZWN0KCk7XG5cblx0fVxuXG5cdGdldFBvbGFyQW5nbGUoKSB7XG5cblx0XHRyZXR1cm4gdGhpcy5fc3BoZXJpY2FsLnBoaTtcblxuXHR9XG5cblx0Z2V0QXppbXV0aGFsQW5nbGUoKSB7XG5cblx0XHRyZXR1cm4gdGhpcy5fc3BoZXJpY2FsLnRoZXRhO1xuXG5cdH1cblxuXHRnZXREaXN0YW5jZSgpIHtcblxuXHRcdHJldHVybiB0aGlzLm9iamVjdC5wb3NpdGlvbi5kaXN0YW5jZVRvKCB0aGlzLnRhcmdldCApO1xuXG5cdH1cblxuXHRsaXN0ZW5Ub0tleUV2ZW50cyggZG9tRWxlbWVudCApIHtcblxuXHRcdGRvbUVsZW1lbnQuYWRkRXZlbnRMaXN0ZW5lciggJ2tleWRvd24nLCB0aGlzLl9vbktleURvd24gKTtcblx0XHR0aGlzLl9kb21FbGVtZW50S2V5RXZlbnRzID0gZG9tRWxlbWVudDtcblxuXHR9XG5cblx0c3RvcExpc3RlblRvS2V5RXZlbnRzKCkge1xuXG5cdFx0aWYgKCB0aGlzLl9kb21FbGVtZW50S2V5RXZlbnRzICE9PSBudWxsICkge1xuXG5cdFx0XHR0aGlzLl9kb21FbGVtZW50S2V5RXZlbnRzLnJlbW92ZUV2ZW50TGlzdGVuZXIoICdrZXlkb3duJywgdGhpcy5fb25LZXlEb3duICk7XG5cdFx0XHR0aGlzLl9kb21FbGVtZW50S2V5RXZlbnRzID0gbnVsbDtcblxuXHRcdH1cblxuXHR9XG5cblx0c2F2ZVN0YXRlKCkge1xuXG5cdFx0dGhpcy50YXJnZXQwLmNvcHkoIHRoaXMudGFyZ2V0ICk7XG5cdFx0dGhpcy5wb3NpdGlvbjAuY29weSggdGhpcy5vYmplY3QucG9zaXRpb24gKTtcblx0XHR0aGlzLnpvb20wID0gdGhpcy5vYmplY3Quem9vbTtcblxuXHR9XG5cblx0cmVzZXQoKSB7XG5cblx0XHR0aGlzLnRhcmdldC5jb3B5KCB0aGlzLnRhcmdldDAgKTtcblx0XHR0aGlzLm9iamVjdC5wb3NpdGlvbi5jb3B5KCB0aGlzLnBvc2l0aW9uMCApO1xuXHRcdHRoaXMub2JqZWN0Lnpvb20gPSB0aGlzLnpvb20wO1xuXG5cdFx0dGhpcy5vYmplY3QudXBkYXRlUHJvamVjdGlvbk1hdHJpeCgpO1xuXHRcdHRoaXMuZGlzcGF0Y2hFdmVudCggX2NoYW5nZUV2ZW50ICk7XG5cblx0XHR0aGlzLnVwZGF0ZSgpO1xuXG5cdFx0dGhpcy5zdGF0ZSA9IF9TVEFURS5OT05FO1xuXG5cdH1cblxuXHR1cGRhdGUoIGRlbHRhVGltZSA9IG51bGwgKSB7XG5cblx0XHRjb25zdCBwb3NpdGlvbiA9IHRoaXMub2JqZWN0LnBvc2l0aW9uO1xuXG5cdFx0X3YuY29weSggcG9zaXRpb24gKS5zdWIoIHRoaXMudGFyZ2V0ICk7XG5cblx0XHQvLyByb3RhdGUgb2Zmc2V0IHRvIFwieS1heGlzLWlzLXVwXCIgc3BhY2Vcblx0XHRfdi5hcHBseVF1YXRlcm5pb24oIHRoaXMuX3F1YXQgKTtcblxuXHRcdC8vIGFuZ2xlIGZyb20gei1heGlzIGFyb3VuZCB5LWF4aXNcblx0XHR0aGlzLl9zcGhlcmljYWwuc2V0RnJvbVZlY3RvcjMoIF92ICk7XG5cblx0XHRpZiAoIHRoaXMuYXV0b1JvdGF0ZSAmJiB0aGlzLnN0YXRlID09PSBfU1RBVEUuTk9ORSApIHtcblxuXHRcdFx0dGhpcy5fcm90YXRlTGVmdCggdGhpcy5fZ2V0QXV0b1JvdGF0aW9uQW5nbGUoIGRlbHRhVGltZSApICk7XG5cblx0XHR9XG5cblx0XHRpZiAoIHRoaXMuZW5hYmxlRGFtcGluZyApIHtcblxuXHRcdFx0dGhpcy5fc3BoZXJpY2FsLnRoZXRhICs9IHRoaXMuX3NwaGVyaWNhbERlbHRhLnRoZXRhICogdGhpcy5kYW1waW5nRmFjdG9yO1xuXHRcdFx0dGhpcy5fc3BoZXJpY2FsLnBoaSArPSB0aGlzLl9zcGhlcmljYWxEZWx0YS5waGkgKiB0aGlzLmRhbXBpbmdGYWN0b3I7XG5cblx0XHR9IGVsc2Uge1xuXG5cdFx0XHR0aGlzLl9zcGhlcmljYWwudGhldGEgKz0gdGhpcy5fc3BoZXJpY2FsRGVsdGEudGhldGE7XG5cdFx0XHR0aGlzLl9zcGhlcmljYWwucGhpICs9IHRoaXMuX3NwaGVyaWNhbERlbHRhLnBoaTtcblxuXHRcdH1cblxuXHRcdC8vIHJlc3RyaWN0IHRoZXRhIHRvIGJlIGJldHdlZW4gZGVzaXJlZCBsaW1pdHNcblxuXHRcdGxldCBtaW4gPSB0aGlzLm1pbkF6aW11dGhBbmdsZTtcblx0XHRsZXQgbWF4ID0gdGhpcy5tYXhBemltdXRoQW5nbGU7XG5cblx0XHRpZiAoIGlzRmluaXRlKCBtaW4gKSAmJiBpc0Zpbml0ZSggbWF4ICkgKSB7XG5cblx0XHRcdGlmICggbWluIDwgLSBNYXRoLlBJICkgbWluICs9IF90d29QSTsgZWxzZSBpZiAoIG1pbiA+IE1hdGguUEkgKSBtaW4gLT0gX3R3b1BJO1xuXG5cdFx0XHRpZiAoIG1heCA8IC0gTWF0aC5QSSApIG1heCArPSBfdHdvUEk7IGVsc2UgaWYgKCBtYXggPiBNYXRoLlBJICkgbWF4IC09IF90d29QSTtcblxuXHRcdFx0aWYgKCBtaW4gPD0gbWF4ICkge1xuXG5cdFx0XHRcdHRoaXMuX3NwaGVyaWNhbC50aGV0YSA9IE1hdGgubWF4KCBtaW4sIE1hdGgubWluKCBtYXgsIHRoaXMuX3NwaGVyaWNhbC50aGV0YSApICk7XG5cblx0XHRcdH0gZWxzZSB7XG5cblx0XHRcdFx0dGhpcy5fc3BoZXJpY2FsLnRoZXRhID0gKCB0aGlzLl9zcGhlcmljYWwudGhldGEgPiAoIG1pbiArIG1heCApIC8gMiApID9cblx0XHRcdFx0XHRNYXRoLm1heCggbWluLCB0aGlzLl9zcGhlcmljYWwudGhldGEgKSA6XG5cdFx0XHRcdFx0TWF0aC5taW4oIG1heCwgdGhpcy5fc3BoZXJpY2FsLnRoZXRhICk7XG5cblx0XHRcdH1cblxuXHRcdH1cblxuXHRcdC8vIHJlc3RyaWN0IHBoaSB0byBiZSBiZXR3ZWVuIGRlc2lyZWQgbGltaXRzXG5cdFx0dGhpcy5fc3BoZXJpY2FsLnBoaSA9IE1hdGgubWF4KCB0aGlzLm1pblBvbGFyQW5nbGUsIE1hdGgubWluKCB0aGlzLm1heFBvbGFyQW5nbGUsIHRoaXMuX3NwaGVyaWNhbC5waGkgKSApO1xuXG5cdFx0dGhpcy5fc3BoZXJpY2FsLm1ha2VTYWZlKCk7XG5cblxuXHRcdC8vIG1vdmUgdGFyZ2V0IHRvIHBhbm5lZCBsb2NhdGlvblxuXG5cdFx0aWYgKCB0aGlzLmVuYWJsZURhbXBpbmcgPT09IHRydWUgKSB7XG5cblx0XHRcdHRoaXMudGFyZ2V0LmFkZFNjYWxlZFZlY3RvciggdGhpcy5fcGFuT2Zmc2V0LCB0aGlzLmRhbXBpbmdGYWN0b3IgKTtcblxuXHRcdH0gZWxzZSB7XG5cblx0XHRcdHRoaXMudGFyZ2V0LmFkZCggdGhpcy5fcGFuT2Zmc2V0ICk7XG5cblx0XHR9XG5cblx0XHQvLyBMaW1pdCB0aGUgdGFyZ2V0IGRpc3RhbmNlIGZyb20gdGhlIGN1cnNvciB0byBjcmVhdGUgYSBzcGhlcmUgYXJvdW5kIHRoZSBjZW50ZXIgb2YgaW50ZXJlc3Rcblx0XHR0aGlzLnRhcmdldC5zdWIoIHRoaXMuY3Vyc29yICk7XG5cdFx0dGhpcy50YXJnZXQuY2xhbXBMZW5ndGgoIHRoaXMubWluVGFyZ2V0UmFkaXVzLCB0aGlzLm1heFRhcmdldFJhZGl1cyApO1xuXHRcdHRoaXMudGFyZ2V0LmFkZCggdGhpcy5jdXJzb3IgKTtcblxuXHRcdGxldCB6b29tQ2hhbmdlZCA9IGZhbHNlO1xuXHRcdC8vIGFkanVzdCB0aGUgY2FtZXJhIHBvc2l0aW9uIGJhc2VkIG9uIHpvb20gb25seSBpZiB3ZSdyZSBub3Qgem9vbWluZyB0byB0aGUgY3Vyc29yIG9yIGlmIGl0J3MgYW4gb3J0aG8gY2FtZXJhXG5cdFx0Ly8gd2UgYWRqdXN0IHpvb20gbGF0ZXIgaW4gdGhlc2UgY2FzZXNcblx0XHRpZiAoIHRoaXMuem9vbVRvQ3Vyc29yICYmIHRoaXMuX3BlcmZvcm1DdXJzb3Jab29tIHx8IHRoaXMub2JqZWN0LmlzT3J0aG9ncmFwaGljQ2FtZXJhICkge1xuXG5cdFx0XHR0aGlzLl9zcGhlcmljYWwucmFkaXVzID0gdGhpcy5fY2xhbXBEaXN0YW5jZSggdGhpcy5fc3BoZXJpY2FsLnJhZGl1cyApO1xuXG5cdFx0fSBlbHNlIHtcblxuXHRcdFx0Y29uc3QgcHJldlJhZGl1cyA9IHRoaXMuX3NwaGVyaWNhbC5yYWRpdXM7XG5cdFx0XHR0aGlzLl9zcGhlcmljYWwucmFkaXVzID0gdGhpcy5fY2xhbXBEaXN0YW5jZSggdGhpcy5fc3BoZXJpY2FsLnJhZGl1cyAqIHRoaXMuX3NjYWxlICk7XG5cdFx0XHR6b29tQ2hhbmdlZCA9IHByZXZSYWRpdXMgIT0gdGhpcy5fc3BoZXJpY2FsLnJhZGl1cztcblxuXHRcdH1cblxuXHRcdF92LnNldEZyb21TcGhlcmljYWwoIHRoaXMuX3NwaGVyaWNhbCApO1xuXG5cdFx0Ly8gcm90YXRlIG9mZnNldCBiYWNrIHRvIFwiY2FtZXJhLXVwLXZlY3Rvci1pcy11cFwiIHNwYWNlXG5cdFx0X3YuYXBwbHlRdWF0ZXJuaW9uKCB0aGlzLl9xdWF0SW52ZXJzZSApO1xuXG5cdFx0cG9zaXRpb24uY29weSggdGhpcy50YXJnZXQgKS5hZGQoIF92ICk7XG5cblx0XHR0aGlzLm9iamVjdC5sb29rQXQoIHRoaXMudGFyZ2V0ICk7XG5cblx0XHRpZiAoIHRoaXMuZW5hYmxlRGFtcGluZyA9PT0gdHJ1ZSApIHtcblxuXHRcdFx0dGhpcy5fc3BoZXJpY2FsRGVsdGEudGhldGEgKj0gKCAxIC0gdGhpcy5kYW1waW5nRmFjdG9yICk7XG5cdFx0XHR0aGlzLl9zcGhlcmljYWxEZWx0YS5waGkgKj0gKCAxIC0gdGhpcy5kYW1waW5nRmFjdG9yICk7XG5cblx0XHRcdHRoaXMuX3Bhbk9mZnNldC5tdWx0aXBseVNjYWxhciggMSAtIHRoaXMuZGFtcGluZ0ZhY3RvciApO1xuXG5cdFx0fSBlbHNlIHtcblxuXHRcdFx0dGhpcy5fc3BoZXJpY2FsRGVsdGEuc2V0KCAwLCAwLCAwICk7XG5cblx0XHRcdHRoaXMuX3Bhbk9mZnNldC5zZXQoIDAsIDAsIDAgKTtcblxuXHRcdH1cblxuXHRcdC8vIGFkanVzdCBjYW1lcmEgcG9zaXRpb25cblx0XHRpZiAoIHRoaXMuem9vbVRvQ3Vyc29yICYmIHRoaXMuX3BlcmZvcm1DdXJzb3Jab29tICkge1xuXG5cdFx0XHRsZXQgbmV3UmFkaXVzID0gbnVsbDtcblx0XHRcdGlmICggdGhpcy5vYmplY3QuaXNQZXJzcGVjdGl2ZUNhbWVyYSApIHtcblxuXHRcdFx0XHQvLyBtb3ZlIHRoZSBjYW1lcmEgZG93biB0aGUgcG9pbnRlciByYXlcblx0XHRcdFx0Ly8gdGhpcyBtZXRob2QgYXZvaWRzIGZsb2F0aW5nIHBvaW50IGVycm9yXG5cdFx0XHRcdGNvbnN0IHByZXZSYWRpdXMgPSBfdi5sZW5ndGgoKTtcblx0XHRcdFx0bmV3UmFkaXVzID0gdGhpcy5fY2xhbXBEaXN0YW5jZSggcHJldlJhZGl1cyAqIHRoaXMuX3NjYWxlICk7XG5cblx0XHRcdFx0Y29uc3QgcmFkaXVzRGVsdGEgPSBwcmV2UmFkaXVzIC0gbmV3UmFkaXVzO1xuXHRcdFx0XHR0aGlzLm9iamVjdC5wb3NpdGlvbi5hZGRTY2FsZWRWZWN0b3IoIHRoaXMuX2RvbGx5RGlyZWN0aW9uLCByYWRpdXNEZWx0YSApO1xuXHRcdFx0XHR0aGlzLm9iamVjdC51cGRhdGVNYXRyaXhXb3JsZCgpO1xuXG5cdFx0XHRcdHpvb21DaGFuZ2VkID0gISEgcmFkaXVzRGVsdGE7XG5cblx0XHRcdH0gZWxzZSBpZiAoIHRoaXMub2JqZWN0LmlzT3J0aG9ncmFwaGljQ2FtZXJhICkge1xuXG5cdFx0XHRcdC8vIGFkanVzdCB0aGUgb3J0aG8gY2FtZXJhIHBvc2l0aW9uIGJhc2VkIG9uIHpvb20gY2hhbmdlc1xuXHRcdFx0XHRjb25zdCBtb3VzZUJlZm9yZSA9IG5ldyBWZWN0b3IzKCB0aGlzLl9tb3VzZS54LCB0aGlzLl9tb3VzZS55LCAwICk7XG5cdFx0XHRcdG1vdXNlQmVmb3JlLnVucHJvamVjdCggdGhpcy5vYmplY3QgKTtcblxuXHRcdFx0XHRjb25zdCBwcmV2Wm9vbSA9IHRoaXMub2JqZWN0Lnpvb207XG5cdFx0XHRcdHRoaXMub2JqZWN0Lnpvb20gPSBNYXRoLm1heCggdGhpcy5taW5ab29tLCBNYXRoLm1pbiggdGhpcy5tYXhab29tLCB0aGlzLm9iamVjdC56b29tIC8gdGhpcy5fc2NhbGUgKSApO1xuXHRcdFx0XHR0aGlzLm9iamVjdC51cGRhdGVQcm9qZWN0aW9uTWF0cml4KCk7XG5cblx0XHRcdFx0em9vbUNoYW5nZWQgPSBwcmV2Wm9vbSAhPT0gdGhpcy5vYmplY3Quem9vbTtcblxuXHRcdFx0XHRjb25zdCBtb3VzZUFmdGVyID0gbmV3IFZlY3RvcjMoIHRoaXMuX21vdXNlLngsIHRoaXMuX21vdXNlLnksIDAgKTtcblx0XHRcdFx0bW91c2VBZnRlci51bnByb2plY3QoIHRoaXMub2JqZWN0ICk7XG5cblx0XHRcdFx0dGhpcy5vYmplY3QucG9zaXRpb24uc3ViKCBtb3VzZUFmdGVyICkuYWRkKCBtb3VzZUJlZm9yZSApO1xuXHRcdFx0XHR0aGlzLm9iamVjdC51cGRhdGVNYXRyaXhXb3JsZCgpO1xuXG5cdFx0XHRcdG5ld1JhZGl1cyA9IF92Lmxlbmd0aCgpO1xuXG5cdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdGNvbnNvbGUud2FybiggJ1dBUk5JTkc6IE9yYml0Q29udHJvbHMuanMgZW5jb3VudGVyZWQgYW4gdW5rbm93biBjYW1lcmEgdHlwZSAtIHpvb20gdG8gY3Vyc29yIGRpc2FibGVkLicgKTtcblx0XHRcdFx0dGhpcy56b29tVG9DdXJzb3IgPSBmYWxzZTtcblxuXHRcdFx0fVxuXG5cdFx0XHQvLyBoYW5kbGUgdGhlIHBsYWNlbWVudCBvZiB0aGUgdGFyZ2V0XG5cdFx0XHRpZiAoIG5ld1JhZGl1cyAhPT0gbnVsbCApIHtcblxuXHRcdFx0XHRpZiAoIHRoaXMuc2NyZWVuU3BhY2VQYW5uaW5nICkge1xuXG5cdFx0XHRcdFx0Ly8gcG9zaXRpb24gdGhlIG9yYml0IHRhcmdldCBpbiBmcm9udCBvZiB0aGUgbmV3IGNhbWVyYSBwb3NpdGlvblxuXHRcdFx0XHRcdHRoaXMudGFyZ2V0LnNldCggMCwgMCwgLSAxIClcblx0XHRcdFx0XHRcdC50cmFuc2Zvcm1EaXJlY3Rpb24oIHRoaXMub2JqZWN0Lm1hdHJpeCApXG5cdFx0XHRcdFx0XHQubXVsdGlwbHlTY2FsYXIoIG5ld1JhZGl1cyApXG5cdFx0XHRcdFx0XHQuYWRkKCB0aGlzLm9iamVjdC5wb3NpdGlvbiApO1xuXG5cdFx0XHRcdH0gZWxzZSB7XG5cblx0XHRcdFx0XHQvLyBnZXQgdGhlIHJheSBhbmQgdHJhbnNsYXRpb24gcGxhbmUgdG8gY29tcHV0ZSB0YXJnZXRcblx0XHRcdFx0XHRfcmF5Lm9yaWdpbi5jb3B5KCB0aGlzLm9iamVjdC5wb3NpdGlvbiApO1xuXHRcdFx0XHRcdF9yYXkuZGlyZWN0aW9uLnNldCggMCwgMCwgLSAxICkudHJhbnNmb3JtRGlyZWN0aW9uKCB0aGlzLm9iamVjdC5tYXRyaXggKTtcblxuXHRcdFx0XHRcdC8vIGlmIHRoZSBjYW1lcmEgaXMgMjAgZGVncmVlcyBhYm92ZSB0aGUgaG9yaXpvbiB0aGVuIGRvbid0IGFkanVzdCB0aGUgZm9jdXMgdGFyZ2V0IHRvIGF2b2lkXG5cdFx0XHRcdFx0Ly8gZXh0cmVtZWx5IGxhcmdlIHZhbHVlc1xuXHRcdFx0XHRcdGlmICggTWF0aC5hYnMoIHRoaXMub2JqZWN0LnVwLmRvdCggX3JheS5kaXJlY3Rpb24gKSApIDwgX1RJTFRfTElNSVQgKSB7XG5cblx0XHRcdFx0XHRcdHRoaXMub2JqZWN0Lmxvb2tBdCggdGhpcy50YXJnZXQgKTtcblxuXHRcdFx0XHRcdH0gZWxzZSB7XG5cblx0XHRcdFx0XHRcdF9wbGFuZS5zZXRGcm9tTm9ybWFsQW5kQ29wbGFuYXJQb2ludCggdGhpcy5vYmplY3QudXAsIHRoaXMudGFyZ2V0ICk7XG5cdFx0XHRcdFx0XHRfcmF5LmludGVyc2VjdFBsYW5lKCBfcGxhbmUsIHRoaXMudGFyZ2V0ICk7XG5cblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0fVxuXG5cdFx0XHR9XG5cblx0XHR9IGVsc2UgaWYgKCB0aGlzLm9iamVjdC5pc09ydGhvZ3JhcGhpY0NhbWVyYSApIHtcblxuXHRcdFx0Y29uc3QgcHJldlpvb20gPSB0aGlzLm9iamVjdC56b29tO1xuXHRcdFx0dGhpcy5vYmplY3Quem9vbSA9IE1hdGgubWF4KCB0aGlzLm1pblpvb20sIE1hdGgubWluKCB0aGlzLm1heFpvb20sIHRoaXMub2JqZWN0Lnpvb20gLyB0aGlzLl9zY2FsZSApICk7XG5cblx0XHRcdGlmICggcHJldlpvb20gIT09IHRoaXMub2JqZWN0Lnpvb20gKSB7XG5cblx0XHRcdFx0dGhpcy5vYmplY3QudXBkYXRlUHJvamVjdGlvbk1hdHJpeCgpO1xuXHRcdFx0XHR6b29tQ2hhbmdlZCA9IHRydWU7XG5cblx0XHRcdH1cblxuXHRcdH1cblxuXHRcdHRoaXMuX3NjYWxlID0gMTtcblx0XHR0aGlzLl9wZXJmb3JtQ3Vyc29yWm9vbSA9IGZhbHNlO1xuXG5cdFx0Ly8gdXBkYXRlIGNvbmRpdGlvbiBpczpcblx0XHQvLyBtaW4oY2FtZXJhIGRpc3BsYWNlbWVudCwgY2FtZXJhIHJvdGF0aW9uIGluIHJhZGlhbnMpXjIgPiBFUFNcblx0XHQvLyB1c2luZyBzbWFsbC1hbmdsZSBhcHByb3hpbWF0aW9uIGNvcyh4LzIpID0gMSAtIHheMiAvIDhcblxuXHRcdGlmICggem9vbUNoYW5nZWQgfHxcblx0XHRcdHRoaXMuX2xhc3RQb3NpdGlvbi5kaXN0YW5jZVRvU3F1YXJlZCggdGhpcy5vYmplY3QucG9zaXRpb24gKSA+IF9FUFMgfHxcblx0XHRcdDggKiAoIDEgLSB0aGlzLl9sYXN0UXVhdGVybmlvbi5kb3QoIHRoaXMub2JqZWN0LnF1YXRlcm5pb24gKSApID4gX0VQUyB8fFxuXHRcdFx0dGhpcy5fbGFzdFRhcmdldFBvc2l0aW9uLmRpc3RhbmNlVG9TcXVhcmVkKCB0aGlzLnRhcmdldCApID4gX0VQUyApIHtcblxuXHRcdFx0dGhpcy5kaXNwYXRjaEV2ZW50KCBfY2hhbmdlRXZlbnQgKTtcblxuXHRcdFx0dGhpcy5fbGFzdFBvc2l0aW9uLmNvcHkoIHRoaXMub2JqZWN0LnBvc2l0aW9uICk7XG5cdFx0XHR0aGlzLl9sYXN0UXVhdGVybmlvbi5jb3B5KCB0aGlzLm9iamVjdC5xdWF0ZXJuaW9uICk7XG5cdFx0XHR0aGlzLl9sYXN0VGFyZ2V0UG9zaXRpb24uY29weSggdGhpcy50YXJnZXQgKTtcblxuXHRcdFx0cmV0dXJuIHRydWU7XG5cblx0XHR9XG5cblx0XHRyZXR1cm4gZmFsc2U7XG5cblx0fVxuXG5cdF9nZXRBdXRvUm90YXRpb25BbmdsZSggZGVsdGFUaW1lICkge1xuXG5cdFx0aWYgKCBkZWx0YVRpbWUgIT09IG51bGwgKSB7XG5cblx0XHRcdHJldHVybiAoIF90d29QSSAvIDYwICogdGhpcy5hdXRvUm90YXRlU3BlZWQgKSAqIGRlbHRhVGltZTtcblxuXHRcdH0gZWxzZSB7XG5cblx0XHRcdHJldHVybiBfdHdvUEkgLyA2MCAvIDYwICogdGhpcy5hdXRvUm90YXRlU3BlZWQ7XG5cblx0XHR9XG5cblx0fVxuXG5cdF9nZXRab29tU2NhbGUoIGRlbHRhICkge1xuXG5cdFx0Y29uc3Qgbm9ybWFsaXplZERlbHRhID0gTWF0aC5hYnMoIGRlbHRhICogMC4wMSApO1xuXHRcdHJldHVybiBNYXRoLnBvdyggMC45NSwgdGhpcy56b29tU3BlZWQgKiBub3JtYWxpemVkRGVsdGEgKTtcblxuXHR9XG5cblx0X3JvdGF0ZUxlZnQoIGFuZ2xlICkge1xuXG5cdFx0dGhpcy5fc3BoZXJpY2FsRGVsdGEudGhldGEgLT0gYW5nbGU7XG5cblx0fVxuXG5cdF9yb3RhdGVVcCggYW5nbGUgKSB7XG5cblx0XHR0aGlzLl9zcGhlcmljYWxEZWx0YS5waGkgLT0gYW5nbGU7XG5cblx0fVxuXG5cdF9wYW5MZWZ0KCBkaXN0YW5jZSwgb2JqZWN0TWF0cml4ICkge1xuXG5cdFx0X3Yuc2V0RnJvbU1hdHJpeENvbHVtbiggb2JqZWN0TWF0cml4LCAwICk7IC8vIGdldCBYIGNvbHVtbiBvZiBvYmplY3RNYXRyaXhcblx0XHRfdi5tdWx0aXBseVNjYWxhciggLSBkaXN0YW5jZSApO1xuXG5cdFx0dGhpcy5fcGFuT2Zmc2V0LmFkZCggX3YgKTtcblxuXHR9XG5cblx0X3BhblVwKCBkaXN0YW5jZSwgb2JqZWN0TWF0cml4ICkge1xuXG5cdFx0aWYgKCB0aGlzLnNjcmVlblNwYWNlUGFubmluZyA9PT0gdHJ1ZSApIHtcblxuXHRcdFx0X3Yuc2V0RnJvbU1hdHJpeENvbHVtbiggb2JqZWN0TWF0cml4LCAxICk7XG5cblx0XHR9IGVsc2Uge1xuXG5cdFx0XHRfdi5zZXRGcm9tTWF0cml4Q29sdW1uKCBvYmplY3RNYXRyaXgsIDAgKTtcblx0XHRcdF92LmNyb3NzVmVjdG9ycyggdGhpcy5vYmplY3QudXAsIF92ICk7XG5cblx0XHR9XG5cblx0XHRfdi5tdWx0aXBseVNjYWxhciggZGlzdGFuY2UgKTtcblxuXHRcdHRoaXMuX3Bhbk9mZnNldC5hZGQoIF92ICk7XG5cblx0fVxuXG5cdC8vIGRlbHRhWCBhbmQgZGVsdGFZIGFyZSBpbiBwaXhlbHM7IHJpZ2h0IGFuZCBkb3duIGFyZSBwb3NpdGl2ZVxuXHRfcGFuKCBkZWx0YVgsIGRlbHRhWSApIHtcblxuXHRcdGNvbnN0IGVsZW1lbnQgPSB0aGlzLmRvbUVsZW1lbnQ7XG5cblx0XHRpZiAoIHRoaXMub2JqZWN0LmlzUGVyc3BlY3RpdmVDYW1lcmEgKSB7XG5cblx0XHRcdC8vIHBlcnNwZWN0aXZlXG5cdFx0XHRjb25zdCBwb3NpdGlvbiA9IHRoaXMub2JqZWN0LnBvc2l0aW9uO1xuXHRcdFx0X3YuY29weSggcG9zaXRpb24gKS5zdWIoIHRoaXMudGFyZ2V0ICk7XG5cdFx0XHRsZXQgdGFyZ2V0RGlzdGFuY2UgPSBfdi5sZW5ndGgoKTtcblxuXHRcdFx0Ly8gaGFsZiBvZiB0aGUgZm92IGlzIGNlbnRlciB0byB0b3Agb2Ygc2NyZWVuXG5cdFx0XHR0YXJnZXREaXN0YW5jZSAqPSBNYXRoLnRhbiggKCB0aGlzLm9iamVjdC5mb3YgLyAyICkgKiBNYXRoLlBJIC8gMTgwLjAgKTtcblxuXHRcdFx0Ly8gd2UgdXNlIG9ubHkgY2xpZW50SGVpZ2h0IGhlcmUgc28gYXNwZWN0IHJhdGlvIGRvZXMgbm90IGRpc3RvcnQgc3BlZWRcblx0XHRcdHRoaXMuX3BhbkxlZnQoIDIgKiBkZWx0YVggKiB0YXJnZXREaXN0YW5jZSAvIGVsZW1lbnQuY2xpZW50SGVpZ2h0LCB0aGlzLm9iamVjdC5tYXRyaXggKTtcblx0XHRcdHRoaXMuX3BhblVwKCAyICogZGVsdGFZICogdGFyZ2V0RGlzdGFuY2UgLyBlbGVtZW50LmNsaWVudEhlaWdodCwgdGhpcy5vYmplY3QubWF0cml4ICk7XG5cblx0XHR9IGVsc2UgaWYgKCB0aGlzLm9iamVjdC5pc09ydGhvZ3JhcGhpY0NhbWVyYSApIHtcblxuXHRcdFx0Ly8gb3J0aG9ncmFwaGljXG5cdFx0XHR0aGlzLl9wYW5MZWZ0KCBkZWx0YVggKiAoIHRoaXMub2JqZWN0LnJpZ2h0IC0gdGhpcy5vYmplY3QubGVmdCApIC8gdGhpcy5vYmplY3Quem9vbSAvIGVsZW1lbnQuY2xpZW50V2lkdGgsIHRoaXMub2JqZWN0Lm1hdHJpeCApO1xuXHRcdFx0dGhpcy5fcGFuVXAoIGRlbHRhWSAqICggdGhpcy5vYmplY3QudG9wIC0gdGhpcy5vYmplY3QuYm90dG9tICkgLyB0aGlzLm9iamVjdC56b29tIC8gZWxlbWVudC5jbGllbnRIZWlnaHQsIHRoaXMub2JqZWN0Lm1hdHJpeCApO1xuXG5cdFx0fSBlbHNlIHtcblxuXHRcdFx0Ly8gY2FtZXJhIG5laXRoZXIgb3J0aG9ncmFwaGljIG5vciBwZXJzcGVjdGl2ZVxuXHRcdFx0Y29uc29sZS53YXJuKCAnV0FSTklORzogT3JiaXRDb250cm9scy5qcyBlbmNvdW50ZXJlZCBhbiB1bmtub3duIGNhbWVyYSB0eXBlIC0gcGFuIGRpc2FibGVkLicgKTtcblx0XHRcdHRoaXMuZW5hYmxlUGFuID0gZmFsc2U7XG5cblx0XHR9XG5cblx0fVxuXG5cdF9kb2xseU91dCggZG9sbHlTY2FsZSApIHtcblxuXHRcdGlmICggdGhpcy5vYmplY3QuaXNQZXJzcGVjdGl2ZUNhbWVyYSB8fCB0aGlzLm9iamVjdC5pc09ydGhvZ3JhcGhpY0NhbWVyYSApIHtcblxuXHRcdFx0dGhpcy5fc2NhbGUgLz0gZG9sbHlTY2FsZTtcblxuXHRcdH0gZWxzZSB7XG5cblx0XHRcdGNvbnNvbGUud2FybiggJ1dBUk5JTkc6IE9yYml0Q29udHJvbHMuanMgZW5jb3VudGVyZWQgYW4gdW5rbm93biBjYW1lcmEgdHlwZSAtIGRvbGx5L3pvb20gZGlzYWJsZWQuJyApO1xuXHRcdFx0dGhpcy5lbmFibGVab29tID0gZmFsc2U7XG5cblx0XHR9XG5cblx0fVxuXG5cdF9kb2xseUluKCBkb2xseVNjYWxlICkge1xuXG5cdFx0aWYgKCB0aGlzLm9iamVjdC5pc1BlcnNwZWN0aXZlQ2FtZXJhIHx8IHRoaXMub2JqZWN0LmlzT3J0aG9ncmFwaGljQ2FtZXJhICkge1xuXG5cdFx0XHR0aGlzLl9zY2FsZSAqPSBkb2xseVNjYWxlO1xuXG5cdFx0fSBlbHNlIHtcblxuXHRcdFx0Y29uc29sZS53YXJuKCAnV0FSTklORzogT3JiaXRDb250cm9scy5qcyBlbmNvdW50ZXJlZCBhbiB1bmtub3duIGNhbWVyYSB0eXBlIC0gZG9sbHkvem9vbSBkaXNhYmxlZC4nICk7XG5cdFx0XHR0aGlzLmVuYWJsZVpvb20gPSBmYWxzZTtcblxuXHRcdH1cblxuXHR9XG5cblx0X3VwZGF0ZVpvb21QYXJhbWV0ZXJzKCB4LCB5ICkge1xuXG5cdFx0aWYgKCAhIHRoaXMuem9vbVRvQ3Vyc29yICkge1xuXG5cdFx0XHRyZXR1cm47XG5cblx0XHR9XG5cblx0XHR0aGlzLl9wZXJmb3JtQ3Vyc29yWm9vbSA9IHRydWU7XG5cblx0XHRjb25zdCByZWN0ID0gdGhpcy5kb21FbGVtZW50LmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO1xuXHRcdGNvbnN0IGR4ID0geCAtIHJlY3QubGVmdDtcblx0XHRjb25zdCBkeSA9IHkgLSByZWN0LnRvcDtcblx0XHRjb25zdCB3ID0gcmVjdC53aWR0aDtcblx0XHRjb25zdCBoID0gcmVjdC5oZWlnaHQ7XG5cblx0XHR0aGlzLl9tb3VzZS54ID0gKCBkeCAvIHcgKSAqIDIgLSAxO1xuXHRcdHRoaXMuX21vdXNlLnkgPSAtICggZHkgLyBoICkgKiAyICsgMTtcblxuXHRcdHRoaXMuX2RvbGx5RGlyZWN0aW9uLnNldCggdGhpcy5fbW91c2UueCwgdGhpcy5fbW91c2UueSwgMSApLnVucHJvamVjdCggdGhpcy5vYmplY3QgKS5zdWIoIHRoaXMub2JqZWN0LnBvc2l0aW9uICkubm9ybWFsaXplKCk7XG5cblx0fVxuXG5cdF9jbGFtcERpc3RhbmNlKCBkaXN0ICkge1xuXG5cdFx0cmV0dXJuIE1hdGgubWF4KCB0aGlzLm1pbkRpc3RhbmNlLCBNYXRoLm1pbiggdGhpcy5tYXhEaXN0YW5jZSwgZGlzdCApICk7XG5cblx0fVxuXG5cdC8vXG5cdC8vIGV2ZW50IGNhbGxiYWNrcyAtIHVwZGF0ZSB0aGUgb2JqZWN0IHN0YXRlXG5cdC8vXG5cblx0X2hhbmRsZU1vdXNlRG93blJvdGF0ZSggZXZlbnQgKSB7XG5cblx0XHR0aGlzLl9yb3RhdGVTdGFydC5zZXQoIGV2ZW50LmNsaWVudFgsIGV2ZW50LmNsaWVudFkgKTtcblxuXHR9XG5cblx0X2hhbmRsZU1vdXNlRG93bkRvbGx5KCBldmVudCApIHtcblxuXHRcdHRoaXMuX3VwZGF0ZVpvb21QYXJhbWV0ZXJzKCBldmVudC5jbGllbnRYLCBldmVudC5jbGllbnRYICk7XG5cdFx0dGhpcy5fZG9sbHlTdGFydC5zZXQoIGV2ZW50LmNsaWVudFgsIGV2ZW50LmNsaWVudFkgKTtcblxuXHR9XG5cblx0X2hhbmRsZU1vdXNlRG93blBhbiggZXZlbnQgKSB7XG5cblx0XHR0aGlzLl9wYW5TdGFydC5zZXQoIGV2ZW50LmNsaWVudFgsIGV2ZW50LmNsaWVudFkgKTtcblxuXHR9XG5cblx0X2hhbmRsZU1vdXNlTW92ZVJvdGF0ZSggZXZlbnQgKSB7XG5cblx0XHR0aGlzLl9yb3RhdGVFbmQuc2V0KCBldmVudC5jbGllbnRYLCBldmVudC5jbGllbnRZICk7XG5cblx0XHR0aGlzLl9yb3RhdGVEZWx0YS5zdWJWZWN0b3JzKCB0aGlzLl9yb3RhdGVFbmQsIHRoaXMuX3JvdGF0ZVN0YXJ0ICkubXVsdGlwbHlTY2FsYXIoIHRoaXMucm90YXRlU3BlZWQgKTtcblxuXHRcdGNvbnN0IGVsZW1lbnQgPSB0aGlzLmRvbUVsZW1lbnQ7XG5cblx0XHR0aGlzLl9yb3RhdGVMZWZ0KCBfdHdvUEkgKiB0aGlzLl9yb3RhdGVEZWx0YS54IC8gZWxlbWVudC5jbGllbnRIZWlnaHQgKTsgLy8geWVzLCBoZWlnaHRcblxuXHRcdHRoaXMuX3JvdGF0ZVVwKCBfdHdvUEkgKiB0aGlzLl9yb3RhdGVEZWx0YS55IC8gZWxlbWVudC5jbGllbnRIZWlnaHQgKTtcblxuXHRcdHRoaXMuX3JvdGF0ZVN0YXJ0LmNvcHkoIHRoaXMuX3JvdGF0ZUVuZCApO1xuXG5cdFx0dGhpcy51cGRhdGUoKTtcblxuXHR9XG5cblx0X2hhbmRsZU1vdXNlTW92ZURvbGx5KCBldmVudCApIHtcblxuXHRcdHRoaXMuX2RvbGx5RW5kLnNldCggZXZlbnQuY2xpZW50WCwgZXZlbnQuY2xpZW50WSApO1xuXG5cdFx0dGhpcy5fZG9sbHlEZWx0YS5zdWJWZWN0b3JzKCB0aGlzLl9kb2xseUVuZCwgdGhpcy5fZG9sbHlTdGFydCApO1xuXG5cdFx0aWYgKCB0aGlzLl9kb2xseURlbHRhLnkgPiAwICkge1xuXG5cdFx0XHR0aGlzLl9kb2xseU91dCggdGhpcy5fZ2V0Wm9vbVNjYWxlKCB0aGlzLl9kb2xseURlbHRhLnkgKSApO1xuXG5cdFx0fSBlbHNlIGlmICggdGhpcy5fZG9sbHlEZWx0YS55IDwgMCApIHtcblxuXHRcdFx0dGhpcy5fZG9sbHlJbiggdGhpcy5fZ2V0Wm9vbVNjYWxlKCB0aGlzLl9kb2xseURlbHRhLnkgKSApO1xuXG5cdFx0fVxuXG5cdFx0dGhpcy5fZG9sbHlTdGFydC5jb3B5KCB0aGlzLl9kb2xseUVuZCApO1xuXG5cdFx0dGhpcy51cGRhdGUoKTtcblxuXHR9XG5cblx0X2hhbmRsZU1vdXNlTW92ZVBhbiggZXZlbnQgKSB7XG5cblx0XHR0aGlzLl9wYW5FbmQuc2V0KCBldmVudC5jbGllbnRYLCBldmVudC5jbGllbnRZICk7XG5cblx0XHR0aGlzLl9wYW5EZWx0YS5zdWJWZWN0b3JzKCB0aGlzLl9wYW5FbmQsIHRoaXMuX3BhblN0YXJ0ICkubXVsdGlwbHlTY2FsYXIoIHRoaXMucGFuU3BlZWQgKTtcblxuXHRcdHRoaXMuX3BhbiggdGhpcy5fcGFuRGVsdGEueCwgdGhpcy5fcGFuRGVsdGEueSApO1xuXG5cdFx0dGhpcy5fcGFuU3RhcnQuY29weSggdGhpcy5fcGFuRW5kICk7XG5cblx0XHR0aGlzLnVwZGF0ZSgpO1xuXG5cdH1cblxuXHRfaGFuZGxlTW91c2VXaGVlbCggZXZlbnQgKSB7XG5cblx0XHR0aGlzLl91cGRhdGVab29tUGFyYW1ldGVycyggZXZlbnQuY2xpZW50WCwgZXZlbnQuY2xpZW50WSApO1xuXG5cdFx0aWYgKCBldmVudC5kZWx0YVkgPCAwICkge1xuXG5cdFx0XHR0aGlzLl9kb2xseUluKCB0aGlzLl9nZXRab29tU2NhbGUoIGV2ZW50LmRlbHRhWSApICk7XG5cblx0XHR9IGVsc2UgaWYgKCBldmVudC5kZWx0YVkgPiAwICkge1xuXG5cdFx0XHR0aGlzLl9kb2xseU91dCggdGhpcy5fZ2V0Wm9vbVNjYWxlKCBldmVudC5kZWx0YVkgKSApO1xuXG5cdFx0fVxuXG5cdFx0dGhpcy51cGRhdGUoKTtcblxuXHR9XG5cblx0X2hhbmRsZUtleURvd24oIGV2ZW50ICkge1xuXG5cdFx0bGV0IG5lZWRzVXBkYXRlID0gZmFsc2U7XG5cblx0XHRzd2l0Y2ggKCBldmVudC5jb2RlICkge1xuXG5cdFx0XHRjYXNlIHRoaXMua2V5cy5VUDpcblxuXHRcdFx0XHRpZiAoIGV2ZW50LmN0cmxLZXkgfHwgZXZlbnQubWV0YUtleSB8fCBldmVudC5zaGlmdEtleSApIHtcblxuXHRcdFx0XHRcdGlmICggdGhpcy5lbmFibGVSb3RhdGUgKSB7XG5cblx0XHRcdFx0XHRcdHRoaXMuX3JvdGF0ZVVwKCBfdHdvUEkgKiB0aGlzLmtleVJvdGF0ZVNwZWVkIC8gdGhpcy5kb21FbGVtZW50LmNsaWVudEhlaWdodCApO1xuXG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdH0gZWxzZSB7XG5cblx0XHRcdFx0XHRpZiAoIHRoaXMuZW5hYmxlUGFuICkge1xuXG5cdFx0XHRcdFx0XHR0aGlzLl9wYW4oIDAsIHRoaXMua2V5UGFuU3BlZWQgKTtcblxuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHR9XG5cblx0XHRcdFx0bmVlZHNVcGRhdGUgPSB0cnVlO1xuXHRcdFx0XHRicmVhaztcblxuXHRcdFx0Y2FzZSB0aGlzLmtleXMuQk9UVE9NOlxuXG5cdFx0XHRcdGlmICggZXZlbnQuY3RybEtleSB8fCBldmVudC5tZXRhS2V5IHx8IGV2ZW50LnNoaWZ0S2V5ICkge1xuXG5cdFx0XHRcdFx0aWYgKCB0aGlzLmVuYWJsZVJvdGF0ZSApIHtcblxuXHRcdFx0XHRcdFx0dGhpcy5fcm90YXRlVXAoIC0gX3R3b1BJICogdGhpcy5rZXlSb3RhdGVTcGVlZCAvIHRoaXMuZG9tRWxlbWVudC5jbGllbnRIZWlnaHQgKTtcblxuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdFx0aWYgKCB0aGlzLmVuYWJsZVBhbiApIHtcblxuXHRcdFx0XHRcdFx0dGhpcy5fcGFuKCAwLCAtIHRoaXMua2V5UGFuU3BlZWQgKTtcblxuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHR9XG5cblx0XHRcdFx0bmVlZHNVcGRhdGUgPSB0cnVlO1xuXHRcdFx0XHRicmVhaztcblxuXHRcdFx0Y2FzZSB0aGlzLmtleXMuTEVGVDpcblxuXHRcdFx0XHRpZiAoIGV2ZW50LmN0cmxLZXkgfHwgZXZlbnQubWV0YUtleSB8fCBldmVudC5zaGlmdEtleSApIHtcblxuXHRcdFx0XHRcdGlmICggdGhpcy5lbmFibGVSb3RhdGUgKSB7XG5cblx0XHRcdFx0XHRcdHRoaXMuX3JvdGF0ZUxlZnQoIF90d29QSSAqIHRoaXMua2V5Um90YXRlU3BlZWQgLyB0aGlzLmRvbUVsZW1lbnQuY2xpZW50SGVpZ2h0ICk7XG5cblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHRcdGlmICggdGhpcy5lbmFibGVQYW4gKSB7XG5cblx0XHRcdFx0XHRcdHRoaXMuX3BhbiggdGhpcy5rZXlQYW5TcGVlZCwgMCApO1xuXG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdH1cblxuXHRcdFx0XHRuZWVkc1VwZGF0ZSA9IHRydWU7XG5cdFx0XHRcdGJyZWFrO1xuXG5cdFx0XHRjYXNlIHRoaXMua2V5cy5SSUdIVDpcblxuXHRcdFx0XHRpZiAoIGV2ZW50LmN0cmxLZXkgfHwgZXZlbnQubWV0YUtleSB8fCBldmVudC5zaGlmdEtleSApIHtcblxuXHRcdFx0XHRcdGlmICggdGhpcy5lbmFibGVSb3RhdGUgKSB7XG5cblx0XHRcdFx0XHRcdHRoaXMuX3JvdGF0ZUxlZnQoIC0gX3R3b1BJICogdGhpcy5rZXlSb3RhdGVTcGVlZCAvIHRoaXMuZG9tRWxlbWVudC5jbGllbnRIZWlnaHQgKTtcblxuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdFx0aWYgKCB0aGlzLmVuYWJsZVBhbiApIHtcblxuXHRcdFx0XHRcdFx0dGhpcy5fcGFuKCAtIHRoaXMua2V5UGFuU3BlZWQsIDAgKTtcblxuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHR9XG5cblx0XHRcdFx0bmVlZHNVcGRhdGUgPSB0cnVlO1xuXHRcdFx0XHRicmVhaztcblxuXHRcdH1cblxuXHRcdGlmICggbmVlZHNVcGRhdGUgKSB7XG5cblx0XHRcdC8vIHByZXZlbnQgdGhlIGJyb3dzZXIgZnJvbSBzY3JvbGxpbmcgb24gY3Vyc29yIGtleXNcblx0XHRcdGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG5cblx0XHRcdHRoaXMudXBkYXRlKCk7XG5cblx0XHR9XG5cblxuXHR9XG5cblx0X2hhbmRsZVRvdWNoU3RhcnRSb3RhdGUoIGV2ZW50ICkge1xuXG5cdFx0aWYgKCB0aGlzLl9wb2ludGVycy5sZW5ndGggPT09IDEgKSB7XG5cblx0XHRcdHRoaXMuX3JvdGF0ZVN0YXJ0LnNldCggZXZlbnQucGFnZVgsIGV2ZW50LnBhZ2VZICk7XG5cblx0XHR9IGVsc2Uge1xuXG5cdFx0XHRjb25zdCBwb3NpdGlvbiA9IHRoaXMuX2dldFNlY29uZFBvaW50ZXJQb3NpdGlvbiggZXZlbnQgKTtcblxuXHRcdFx0Y29uc3QgeCA9IDAuNSAqICggZXZlbnQucGFnZVggKyBwb3NpdGlvbi54ICk7XG5cdFx0XHRjb25zdCB5ID0gMC41ICogKCBldmVudC5wYWdlWSArIHBvc2l0aW9uLnkgKTtcblxuXHRcdFx0dGhpcy5fcm90YXRlU3RhcnQuc2V0KCB4LCB5ICk7XG5cblx0XHR9XG5cblx0fVxuXG5cdF9oYW5kbGVUb3VjaFN0YXJ0UGFuKCBldmVudCApIHtcblxuXHRcdGlmICggdGhpcy5fcG9pbnRlcnMubGVuZ3RoID09PSAxICkge1xuXG5cdFx0XHR0aGlzLl9wYW5TdGFydC5zZXQoIGV2ZW50LnBhZ2VYLCBldmVudC5wYWdlWSApO1xuXG5cdFx0fSBlbHNlIHtcblxuXHRcdFx0Y29uc3QgcG9zaXRpb24gPSB0aGlzLl9nZXRTZWNvbmRQb2ludGVyUG9zaXRpb24oIGV2ZW50ICk7XG5cblx0XHRcdGNvbnN0IHggPSAwLjUgKiAoIGV2ZW50LnBhZ2VYICsgcG9zaXRpb24ueCApO1xuXHRcdFx0Y29uc3QgeSA9IDAuNSAqICggZXZlbnQucGFnZVkgKyBwb3NpdGlvbi55ICk7XG5cblx0XHRcdHRoaXMuX3BhblN0YXJ0LnNldCggeCwgeSApO1xuXG5cdFx0fVxuXG5cdH1cblxuXHRfaGFuZGxlVG91Y2hTdGFydERvbGx5KCBldmVudCApIHtcblxuXHRcdGNvbnN0IHBvc2l0aW9uID0gdGhpcy5fZ2V0U2Vjb25kUG9pbnRlclBvc2l0aW9uKCBldmVudCApO1xuXG5cdFx0Y29uc3QgZHggPSBldmVudC5wYWdlWCAtIHBvc2l0aW9uLng7XG5cdFx0Y29uc3QgZHkgPSBldmVudC5wYWdlWSAtIHBvc2l0aW9uLnk7XG5cblx0XHRjb25zdCBkaXN0YW5jZSA9IE1hdGguc3FydCggZHggKiBkeCArIGR5ICogZHkgKTtcblxuXHRcdHRoaXMuX2RvbGx5U3RhcnQuc2V0KCAwLCBkaXN0YW5jZSApO1xuXG5cdH1cblxuXHRfaGFuZGxlVG91Y2hTdGFydERvbGx5UGFuKCBldmVudCApIHtcblxuXHRcdGlmICggdGhpcy5lbmFibGVab29tICkgdGhpcy5faGFuZGxlVG91Y2hTdGFydERvbGx5KCBldmVudCApO1xuXG5cdFx0aWYgKCB0aGlzLmVuYWJsZVBhbiApIHRoaXMuX2hhbmRsZVRvdWNoU3RhcnRQYW4oIGV2ZW50ICk7XG5cblx0fVxuXG5cdF9oYW5kbGVUb3VjaFN0YXJ0RG9sbHlSb3RhdGUoIGV2ZW50ICkge1xuXG5cdFx0aWYgKCB0aGlzLmVuYWJsZVpvb20gKSB0aGlzLl9oYW5kbGVUb3VjaFN0YXJ0RG9sbHkoIGV2ZW50ICk7XG5cblx0XHRpZiAoIHRoaXMuZW5hYmxlUm90YXRlICkgdGhpcy5faGFuZGxlVG91Y2hTdGFydFJvdGF0ZSggZXZlbnQgKTtcblxuXHR9XG5cblx0X2hhbmRsZVRvdWNoTW92ZVJvdGF0ZSggZXZlbnQgKSB7XG5cblx0XHRpZiAoIHRoaXMuX3BvaW50ZXJzLmxlbmd0aCA9PSAxICkge1xuXG5cdFx0XHR0aGlzLl9yb3RhdGVFbmQuc2V0KCBldmVudC5wYWdlWCwgZXZlbnQucGFnZVkgKTtcblxuXHRcdH0gZWxzZSB7XG5cblx0XHRcdGNvbnN0IHBvc2l0aW9uID0gdGhpcy5fZ2V0U2Vjb25kUG9pbnRlclBvc2l0aW9uKCBldmVudCApO1xuXG5cdFx0XHRjb25zdCB4ID0gMC41ICogKCBldmVudC5wYWdlWCArIHBvc2l0aW9uLnggKTtcblx0XHRcdGNvbnN0IHkgPSAwLjUgKiAoIGV2ZW50LnBhZ2VZICsgcG9zaXRpb24ueSApO1xuXG5cdFx0XHR0aGlzLl9yb3RhdGVFbmQuc2V0KCB4LCB5ICk7XG5cblx0XHR9XG5cblx0XHR0aGlzLl9yb3RhdGVEZWx0YS5zdWJWZWN0b3JzKCB0aGlzLl9yb3RhdGVFbmQsIHRoaXMuX3JvdGF0ZVN0YXJ0ICkubXVsdGlwbHlTY2FsYXIoIHRoaXMucm90YXRlU3BlZWQgKTtcblxuXHRcdGNvbnN0IGVsZW1lbnQgPSB0aGlzLmRvbUVsZW1lbnQ7XG5cblx0XHR0aGlzLl9yb3RhdGVMZWZ0KCBfdHdvUEkgKiB0aGlzLl9yb3RhdGVEZWx0YS54IC8gZWxlbWVudC5jbGllbnRIZWlnaHQgKTsgLy8geWVzLCBoZWlnaHRcblxuXHRcdHRoaXMuX3JvdGF0ZVVwKCBfdHdvUEkgKiB0aGlzLl9yb3RhdGVEZWx0YS55IC8gZWxlbWVudC5jbGllbnRIZWlnaHQgKTtcblxuXHRcdHRoaXMuX3JvdGF0ZVN0YXJ0LmNvcHkoIHRoaXMuX3JvdGF0ZUVuZCApO1xuXG5cdH1cblxuXHRfaGFuZGxlVG91Y2hNb3ZlUGFuKCBldmVudCApIHtcblxuXHRcdGlmICggdGhpcy5fcG9pbnRlcnMubGVuZ3RoID09PSAxICkge1xuXG5cdFx0XHR0aGlzLl9wYW5FbmQuc2V0KCBldmVudC5wYWdlWCwgZXZlbnQucGFnZVkgKTtcblxuXHRcdH0gZWxzZSB7XG5cblx0XHRcdGNvbnN0IHBvc2l0aW9uID0gdGhpcy5fZ2V0U2Vjb25kUG9pbnRlclBvc2l0aW9uKCBldmVudCApO1xuXG5cdFx0XHRjb25zdCB4ID0gMC41ICogKCBldmVudC5wYWdlWCArIHBvc2l0aW9uLnggKTtcblx0XHRcdGNvbnN0IHkgPSAwLjUgKiAoIGV2ZW50LnBhZ2VZICsgcG9zaXRpb24ueSApO1xuXG5cdFx0XHR0aGlzLl9wYW5FbmQuc2V0KCB4LCB5ICk7XG5cblx0XHR9XG5cblx0XHR0aGlzLl9wYW5EZWx0YS5zdWJWZWN0b3JzKCB0aGlzLl9wYW5FbmQsIHRoaXMuX3BhblN0YXJ0ICkubXVsdGlwbHlTY2FsYXIoIHRoaXMucGFuU3BlZWQgKTtcblxuXHRcdHRoaXMuX3BhbiggdGhpcy5fcGFuRGVsdGEueCwgdGhpcy5fcGFuRGVsdGEueSApO1xuXG5cdFx0dGhpcy5fcGFuU3RhcnQuY29weSggdGhpcy5fcGFuRW5kICk7XG5cblx0fVxuXG5cdF9oYW5kbGVUb3VjaE1vdmVEb2xseSggZXZlbnQgKSB7XG5cblx0XHRjb25zdCBwb3NpdGlvbiA9IHRoaXMuX2dldFNlY29uZFBvaW50ZXJQb3NpdGlvbiggZXZlbnQgKTtcblxuXHRcdGNvbnN0IGR4ID0gZXZlbnQucGFnZVggLSBwb3NpdGlvbi54O1xuXHRcdGNvbnN0IGR5ID0gZXZlbnQucGFnZVkgLSBwb3NpdGlvbi55O1xuXG5cdFx0Y29uc3QgZGlzdGFuY2UgPSBNYXRoLnNxcnQoIGR4ICogZHggKyBkeSAqIGR5ICk7XG5cblx0XHR0aGlzLl9kb2xseUVuZC5zZXQoIDAsIGRpc3RhbmNlICk7XG5cblx0XHR0aGlzLl9kb2xseURlbHRhLnNldCggMCwgTWF0aC5wb3coIHRoaXMuX2RvbGx5RW5kLnkgLyB0aGlzLl9kb2xseVN0YXJ0LnksIHRoaXMuem9vbVNwZWVkICkgKTtcblxuXHRcdHRoaXMuX2RvbGx5T3V0KCB0aGlzLl9kb2xseURlbHRhLnkgKTtcblxuXHRcdHRoaXMuX2RvbGx5U3RhcnQuY29weSggdGhpcy5fZG9sbHlFbmQgKTtcblxuXHRcdGNvbnN0IGNlbnRlclggPSAoIGV2ZW50LnBhZ2VYICsgcG9zaXRpb24ueCApICogMC41O1xuXHRcdGNvbnN0IGNlbnRlclkgPSAoIGV2ZW50LnBhZ2VZICsgcG9zaXRpb24ueSApICogMC41O1xuXG5cdFx0dGhpcy5fdXBkYXRlWm9vbVBhcmFtZXRlcnMoIGNlbnRlclgsIGNlbnRlclkgKTtcblxuXHR9XG5cblx0X2hhbmRsZVRvdWNoTW92ZURvbGx5UGFuKCBldmVudCApIHtcblxuXHRcdGlmICggdGhpcy5lbmFibGVab29tICkgdGhpcy5faGFuZGxlVG91Y2hNb3ZlRG9sbHkoIGV2ZW50ICk7XG5cblx0XHRpZiAoIHRoaXMuZW5hYmxlUGFuICkgdGhpcy5faGFuZGxlVG91Y2hNb3ZlUGFuKCBldmVudCApO1xuXG5cdH1cblxuXHRfaGFuZGxlVG91Y2hNb3ZlRG9sbHlSb3RhdGUoIGV2ZW50ICkge1xuXG5cdFx0aWYgKCB0aGlzLmVuYWJsZVpvb20gKSB0aGlzLl9oYW5kbGVUb3VjaE1vdmVEb2xseSggZXZlbnQgKTtcblxuXHRcdGlmICggdGhpcy5lbmFibGVSb3RhdGUgKSB0aGlzLl9oYW5kbGVUb3VjaE1vdmVSb3RhdGUoIGV2ZW50ICk7XG5cblx0fVxuXG5cdC8vIHBvaW50ZXJzXG5cblx0X2FkZFBvaW50ZXIoIGV2ZW50ICkge1xuXG5cdFx0dGhpcy5fcG9pbnRlcnMucHVzaCggZXZlbnQucG9pbnRlcklkICk7XG5cblx0fVxuXG5cdF9yZW1vdmVQb2ludGVyKCBldmVudCApIHtcblxuXHRcdGRlbGV0ZSB0aGlzLl9wb2ludGVyUG9zaXRpb25zWyBldmVudC5wb2ludGVySWQgXTtcblxuXHRcdGZvciAoIGxldCBpID0gMDsgaSA8IHRoaXMuX3BvaW50ZXJzLmxlbmd0aDsgaSArKyApIHtcblxuXHRcdFx0aWYgKCB0aGlzLl9wb2ludGVyc1sgaSBdID09IGV2ZW50LnBvaW50ZXJJZCApIHtcblxuXHRcdFx0XHR0aGlzLl9wb2ludGVycy5zcGxpY2UoIGksIDEgKTtcblx0XHRcdFx0cmV0dXJuO1xuXG5cdFx0XHR9XG5cblx0XHR9XG5cblx0fVxuXG5cdF9pc1RyYWNraW5nUG9pbnRlciggZXZlbnQgKSB7XG5cblx0XHRmb3IgKCBsZXQgaSA9IDA7IGkgPCB0aGlzLl9wb2ludGVycy5sZW5ndGg7IGkgKysgKSB7XG5cblx0XHRcdGlmICggdGhpcy5fcG9pbnRlcnNbIGkgXSA9PSBldmVudC5wb2ludGVySWQgKSByZXR1cm4gdHJ1ZTtcblxuXHRcdH1cblxuXHRcdHJldHVybiBmYWxzZTtcblxuXHR9XG5cblx0X3RyYWNrUG9pbnRlciggZXZlbnQgKSB7XG5cblx0XHRsZXQgcG9zaXRpb24gPSB0aGlzLl9wb2ludGVyUG9zaXRpb25zWyBldmVudC5wb2ludGVySWQgXTtcblxuXHRcdGlmICggcG9zaXRpb24gPT09IHVuZGVmaW5lZCApIHtcblxuXHRcdFx0cG9zaXRpb24gPSBuZXcgVmVjdG9yMigpO1xuXHRcdFx0dGhpcy5fcG9pbnRlclBvc2l0aW9uc1sgZXZlbnQucG9pbnRlcklkIF0gPSBwb3NpdGlvbjtcblxuXHRcdH1cblxuXHRcdHBvc2l0aW9uLnNldCggZXZlbnQucGFnZVgsIGV2ZW50LnBhZ2VZICk7XG5cblx0fVxuXG5cdF9nZXRTZWNvbmRQb2ludGVyUG9zaXRpb24oIGV2ZW50ICkge1xuXG5cdFx0Y29uc3QgcG9pbnRlcklkID0gKCBldmVudC5wb2ludGVySWQgPT09IHRoaXMuX3BvaW50ZXJzWyAwIF0gKSA/IHRoaXMuX3BvaW50ZXJzWyAxIF0gOiB0aGlzLl9wb2ludGVyc1sgMCBdO1xuXG5cdFx0cmV0dXJuIHRoaXMuX3BvaW50ZXJQb3NpdGlvbnNbIHBvaW50ZXJJZCBdO1xuXG5cdH1cblxuXHQvL1xuXG5cdF9jdXN0b21XaGVlbEV2ZW50KCBldmVudCApIHtcblxuXHRcdGNvbnN0IG1vZGUgPSBldmVudC5kZWx0YU1vZGU7XG5cblx0XHQvLyBtaW5pbWFsIHdoZWVsIGV2ZW50IGFsdGVyZWQgdG8gbWVldCBkZWx0YS16b29tIGRlbWFuZFxuXHRcdGNvbnN0IG5ld0V2ZW50ID0ge1xuXHRcdFx0Y2xpZW50WDogZXZlbnQuY2xpZW50WCxcblx0XHRcdGNsaWVudFk6IGV2ZW50LmNsaWVudFksXG5cdFx0XHRkZWx0YVk6IGV2ZW50LmRlbHRhWSxcblx0XHR9O1xuXG5cdFx0c3dpdGNoICggbW9kZSApIHtcblxuXHRcdFx0Y2FzZSAxOiAvLyBMSU5FX01PREVcblx0XHRcdFx0bmV3RXZlbnQuZGVsdGFZICo9IDE2O1xuXHRcdFx0XHRicmVhaztcblxuXHRcdFx0Y2FzZSAyOiAvLyBQQUdFX01PREVcblx0XHRcdFx0bmV3RXZlbnQuZGVsdGFZICo9IDEwMDtcblx0XHRcdFx0YnJlYWs7XG5cblx0XHR9XG5cblx0XHQvLyBkZXRlY3QgaWYgZXZlbnQgd2FzIHRyaWdnZXJlZCBieSBwaW5jaGluZ1xuXHRcdGlmICggZXZlbnQuY3RybEtleSAmJiAhIHRoaXMuX2NvbnRyb2xBY3RpdmUgKSB7XG5cblx0XHRcdG5ld0V2ZW50LmRlbHRhWSAqPSAxMDtcblxuXHRcdH1cblxuXHRcdHJldHVybiBuZXdFdmVudDtcblxuXHR9XG5cbn1cblxuZnVuY3Rpb24gb25Qb2ludGVyRG93biggZXZlbnQgKSB7XG5cblx0aWYgKCB0aGlzLmVuYWJsZWQgPT09IGZhbHNlICkgcmV0dXJuO1xuXG5cdGlmICggdGhpcy5fcG9pbnRlcnMubGVuZ3RoID09PSAwICkge1xuXG5cdFx0dGhpcy5kb21FbGVtZW50LnNldFBvaW50ZXJDYXB0dXJlKCBldmVudC5wb2ludGVySWQgKTtcblxuXHRcdHRoaXMuZG9tRWxlbWVudC5hZGRFdmVudExpc3RlbmVyKCAncG9pbnRlcm1vdmUnLCB0aGlzLl9vblBvaW50ZXJNb3ZlICk7XG5cdFx0dGhpcy5kb21FbGVtZW50LmFkZEV2ZW50TGlzdGVuZXIoICdwb2ludGVydXAnLCB0aGlzLl9vblBvaW50ZXJVcCApO1xuXG5cdH1cblxuXHQvL1xuXG5cdGlmICggdGhpcy5faXNUcmFja2luZ1BvaW50ZXIoIGV2ZW50ICkgKSByZXR1cm47XG5cblx0Ly9cblxuXHR0aGlzLl9hZGRQb2ludGVyKCBldmVudCApO1xuXG5cdGlmICggZXZlbnQucG9pbnRlclR5cGUgPT09ICd0b3VjaCcgKSB7XG5cblx0XHR0aGlzLl9vblRvdWNoU3RhcnQoIGV2ZW50ICk7XG5cblx0fSBlbHNlIHtcblxuXHRcdHRoaXMuX29uTW91c2VEb3duKCBldmVudCApO1xuXG5cdH1cblxufVxuXG5mdW5jdGlvbiBvblBvaW50ZXJNb3ZlKCBldmVudCApIHtcblxuXHRpZiAoIHRoaXMuZW5hYmxlZCA9PT0gZmFsc2UgKSByZXR1cm47XG5cblx0aWYgKCBldmVudC5wb2ludGVyVHlwZSA9PT0gJ3RvdWNoJyApIHtcblxuXHRcdHRoaXMuX29uVG91Y2hNb3ZlKCBldmVudCApO1xuXG5cdH0gZWxzZSB7XG5cblx0XHR0aGlzLl9vbk1vdXNlTW92ZSggZXZlbnQgKTtcblxuXHR9XG5cbn1cblxuZnVuY3Rpb24gb25Qb2ludGVyVXAoIGV2ZW50ICkge1xuXG5cdHRoaXMuX3JlbW92ZVBvaW50ZXIoIGV2ZW50ICk7XG5cblx0c3dpdGNoICggdGhpcy5fcG9pbnRlcnMubGVuZ3RoICkge1xuXG5cdFx0Y2FzZSAwOlxuXG5cdFx0XHR0aGlzLmRvbUVsZW1lbnQucmVsZWFzZVBvaW50ZXJDYXB0dXJlKCBldmVudC5wb2ludGVySWQgKTtcblxuXHRcdFx0dGhpcy5kb21FbGVtZW50LnJlbW92ZUV2ZW50TGlzdGVuZXIoICdwb2ludGVybW92ZScsIHRoaXMuX29uUG9pbnRlck1vdmUgKTtcblx0XHRcdHRoaXMuZG9tRWxlbWVudC5yZW1vdmVFdmVudExpc3RlbmVyKCAncG9pbnRlcnVwJywgdGhpcy5fb25Qb2ludGVyVXAgKTtcblxuXHRcdFx0dGhpcy5kaXNwYXRjaEV2ZW50KCBfZW5kRXZlbnQgKTtcblxuXHRcdFx0dGhpcy5zdGF0ZSA9IF9TVEFURS5OT05FO1xuXG5cdFx0XHRicmVhaztcblxuXHRcdGNhc2UgMTpcblxuXHRcdFx0Y29uc3QgcG9pbnRlcklkID0gdGhpcy5fcG9pbnRlcnNbIDAgXTtcblx0XHRcdGNvbnN0IHBvc2l0aW9uID0gdGhpcy5fcG9pbnRlclBvc2l0aW9uc1sgcG9pbnRlcklkIF07XG5cblx0XHRcdC8vIG1pbmltYWwgcGxhY2Vob2xkZXIgZXZlbnQgLSBhbGxvd3Mgc3RhdGUgY29ycmVjdGlvbiBvbiBwb2ludGVyLXVwXG5cdFx0XHR0aGlzLl9vblRvdWNoU3RhcnQoIHsgcG9pbnRlcklkOiBwb2ludGVySWQsIHBhZ2VYOiBwb3NpdGlvbi54LCBwYWdlWTogcG9zaXRpb24ueSB9ICk7XG5cblx0XHRcdGJyZWFrO1xuXG5cdH1cblxufVxuXG5mdW5jdGlvbiBvbk1vdXNlRG93biggZXZlbnQgKSB7XG5cblx0bGV0IG1vdXNlQWN0aW9uO1xuXG5cdHN3aXRjaCAoIGV2ZW50LmJ1dHRvbiApIHtcblxuXHRcdGNhc2UgMDpcblxuXHRcdFx0bW91c2VBY3Rpb24gPSB0aGlzLm1vdXNlQnV0dG9ucy5MRUZUO1xuXHRcdFx0YnJlYWs7XG5cblx0XHRjYXNlIDE6XG5cblx0XHRcdG1vdXNlQWN0aW9uID0gdGhpcy5tb3VzZUJ1dHRvbnMuTUlERExFO1xuXHRcdFx0YnJlYWs7XG5cblx0XHRjYXNlIDI6XG5cblx0XHRcdG1vdXNlQWN0aW9uID0gdGhpcy5tb3VzZUJ1dHRvbnMuUklHSFQ7XG5cdFx0XHRicmVhaztcblxuXHRcdGRlZmF1bHQ6XG5cblx0XHRcdG1vdXNlQWN0aW9uID0gLSAxO1xuXG5cdH1cblxuXHRzd2l0Y2ggKCBtb3VzZUFjdGlvbiApIHtcblxuXHRcdGNhc2UgTU9VU0UuRE9MTFk6XG5cblx0XHRcdGlmICggdGhpcy5lbmFibGVab29tID09PSBmYWxzZSApIHJldHVybjtcblxuXHRcdFx0dGhpcy5faGFuZGxlTW91c2VEb3duRG9sbHkoIGV2ZW50ICk7XG5cblx0XHRcdHRoaXMuc3RhdGUgPSBfU1RBVEUuRE9MTFk7XG5cblx0XHRcdGJyZWFrO1xuXG5cdFx0Y2FzZSBNT1VTRS5ST1RBVEU6XG5cblx0XHRcdGlmICggZXZlbnQuY3RybEtleSB8fCBldmVudC5tZXRhS2V5IHx8IGV2ZW50LnNoaWZ0S2V5ICkge1xuXG5cdFx0XHRcdGlmICggdGhpcy5lbmFibGVQYW4gPT09IGZhbHNlICkgcmV0dXJuO1xuXG5cdFx0XHRcdHRoaXMuX2hhbmRsZU1vdXNlRG93blBhbiggZXZlbnQgKTtcblxuXHRcdFx0XHR0aGlzLnN0YXRlID0gX1NUQVRFLlBBTjtcblxuXHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHRpZiAoIHRoaXMuZW5hYmxlUm90YXRlID09PSBmYWxzZSApIHJldHVybjtcblxuXHRcdFx0XHR0aGlzLl9oYW5kbGVNb3VzZURvd25Sb3RhdGUoIGV2ZW50ICk7XG5cblx0XHRcdFx0dGhpcy5zdGF0ZSA9IF9TVEFURS5ST1RBVEU7XG5cblx0XHRcdH1cblxuXHRcdFx0YnJlYWs7XG5cblx0XHRjYXNlIE1PVVNFLlBBTjpcblxuXHRcdFx0aWYgKCBldmVudC5jdHJsS2V5IHx8IGV2ZW50Lm1ldGFLZXkgfHwgZXZlbnQuc2hpZnRLZXkgKSB7XG5cblx0XHRcdFx0aWYgKCB0aGlzLmVuYWJsZVJvdGF0ZSA9PT0gZmFsc2UgKSByZXR1cm47XG5cblx0XHRcdFx0dGhpcy5faGFuZGxlTW91c2VEb3duUm90YXRlKCBldmVudCApO1xuXG5cdFx0XHRcdHRoaXMuc3RhdGUgPSBfU1RBVEUuUk9UQVRFO1xuXG5cdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdGlmICggdGhpcy5lbmFibGVQYW4gPT09IGZhbHNlICkgcmV0dXJuO1xuXG5cdFx0XHRcdHRoaXMuX2hhbmRsZU1vdXNlRG93blBhbiggZXZlbnQgKTtcblxuXHRcdFx0XHR0aGlzLnN0YXRlID0gX1NUQVRFLlBBTjtcblxuXHRcdFx0fVxuXG5cdFx0XHRicmVhaztcblxuXHRcdGRlZmF1bHQ6XG5cblx0XHRcdHRoaXMuc3RhdGUgPSBfU1RBVEUuTk9ORTtcblxuXHR9XG5cblx0aWYgKCB0aGlzLnN0YXRlICE9PSBfU1RBVEUuTk9ORSApIHtcblxuXHRcdHRoaXMuZGlzcGF0Y2hFdmVudCggX3N0YXJ0RXZlbnQgKTtcblxuXHR9XG5cbn1cblxuZnVuY3Rpb24gb25Nb3VzZU1vdmUoIGV2ZW50ICkge1xuXG5cdHN3aXRjaCAoIHRoaXMuc3RhdGUgKSB7XG5cblx0XHRjYXNlIF9TVEFURS5ST1RBVEU6XG5cblx0XHRcdGlmICggdGhpcy5lbmFibGVSb3RhdGUgPT09IGZhbHNlICkgcmV0dXJuO1xuXG5cdFx0XHR0aGlzLl9oYW5kbGVNb3VzZU1vdmVSb3RhdGUoIGV2ZW50ICk7XG5cblx0XHRcdGJyZWFrO1xuXG5cdFx0Y2FzZSBfU1RBVEUuRE9MTFk6XG5cblx0XHRcdGlmICggdGhpcy5lbmFibGVab29tID09PSBmYWxzZSApIHJldHVybjtcblxuXHRcdFx0dGhpcy5faGFuZGxlTW91c2VNb3ZlRG9sbHkoIGV2ZW50ICk7XG5cblx0XHRcdGJyZWFrO1xuXG5cdFx0Y2FzZSBfU1RBVEUuUEFOOlxuXG5cdFx0XHRpZiAoIHRoaXMuZW5hYmxlUGFuID09PSBmYWxzZSApIHJldHVybjtcblxuXHRcdFx0dGhpcy5faGFuZGxlTW91c2VNb3ZlUGFuKCBldmVudCApO1xuXG5cdFx0XHRicmVhaztcblxuXHR9XG5cbn1cblxuZnVuY3Rpb24gb25Nb3VzZVdoZWVsKCBldmVudCApIHtcblxuXHRpZiAoIHRoaXMuZW5hYmxlZCA9PT0gZmFsc2UgfHwgdGhpcy5lbmFibGVab29tID09PSBmYWxzZSB8fCB0aGlzLnN0YXRlICE9PSBfU1RBVEUuTk9ORSApIHJldHVybjtcblxuXHRldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuXG5cdHRoaXMuZGlzcGF0Y2hFdmVudCggX3N0YXJ0RXZlbnQgKTtcblxuXHR0aGlzLl9oYW5kbGVNb3VzZVdoZWVsKCB0aGlzLl9jdXN0b21XaGVlbEV2ZW50KCBldmVudCApICk7XG5cblx0dGhpcy5kaXNwYXRjaEV2ZW50KCBfZW5kRXZlbnQgKTtcblxufVxuXG5mdW5jdGlvbiBvbktleURvd24oIGV2ZW50ICkge1xuXG5cdGlmICggdGhpcy5lbmFibGVkID09PSBmYWxzZSApIHJldHVybjtcblxuXHR0aGlzLl9oYW5kbGVLZXlEb3duKCBldmVudCApO1xuXG59XG5cbmZ1bmN0aW9uIG9uVG91Y2hTdGFydCggZXZlbnQgKSB7XG5cblx0dGhpcy5fdHJhY2tQb2ludGVyKCBldmVudCApO1xuXG5cdHN3aXRjaCAoIHRoaXMuX3BvaW50ZXJzLmxlbmd0aCApIHtcblxuXHRcdGNhc2UgMTpcblxuXHRcdFx0c3dpdGNoICggdGhpcy50b3VjaGVzLk9ORSApIHtcblxuXHRcdFx0XHRjYXNlIFRPVUNILlJPVEFURTpcblxuXHRcdFx0XHRcdGlmICggdGhpcy5lbmFibGVSb3RhdGUgPT09IGZhbHNlICkgcmV0dXJuO1xuXG5cdFx0XHRcdFx0dGhpcy5faGFuZGxlVG91Y2hTdGFydFJvdGF0ZSggZXZlbnQgKTtcblxuXHRcdFx0XHRcdHRoaXMuc3RhdGUgPSBfU1RBVEUuVE9VQ0hfUk9UQVRFO1xuXG5cdFx0XHRcdFx0YnJlYWs7XG5cblx0XHRcdFx0Y2FzZSBUT1VDSC5QQU46XG5cblx0XHRcdFx0XHRpZiAoIHRoaXMuZW5hYmxlUGFuID09PSBmYWxzZSApIHJldHVybjtcblxuXHRcdFx0XHRcdHRoaXMuX2hhbmRsZVRvdWNoU3RhcnRQYW4oIGV2ZW50ICk7XG5cblx0XHRcdFx0XHR0aGlzLnN0YXRlID0gX1NUQVRFLlRPVUNIX1BBTjtcblxuXHRcdFx0XHRcdGJyZWFrO1xuXG5cdFx0XHRcdGRlZmF1bHQ6XG5cblx0XHRcdFx0XHR0aGlzLnN0YXRlID0gX1NUQVRFLk5PTkU7XG5cblx0XHRcdH1cblxuXHRcdFx0YnJlYWs7XG5cblx0XHRjYXNlIDI6XG5cblx0XHRcdHN3aXRjaCAoIHRoaXMudG91Y2hlcy5UV08gKSB7XG5cblx0XHRcdFx0Y2FzZSBUT1VDSC5ET0xMWV9QQU46XG5cblx0XHRcdFx0XHRpZiAoIHRoaXMuZW5hYmxlWm9vbSA9PT0gZmFsc2UgJiYgdGhpcy5lbmFibGVQYW4gPT09IGZhbHNlICkgcmV0dXJuO1xuXG5cdFx0XHRcdFx0dGhpcy5faGFuZGxlVG91Y2hTdGFydERvbGx5UGFuKCBldmVudCApO1xuXG5cdFx0XHRcdFx0dGhpcy5zdGF0ZSA9IF9TVEFURS5UT1VDSF9ET0xMWV9QQU47XG5cblx0XHRcdFx0XHRicmVhaztcblxuXHRcdFx0XHRjYXNlIFRPVUNILkRPTExZX1JPVEFURTpcblxuXHRcdFx0XHRcdGlmICggdGhpcy5lbmFibGVab29tID09PSBmYWxzZSAmJiB0aGlzLmVuYWJsZVJvdGF0ZSA9PT0gZmFsc2UgKSByZXR1cm47XG5cblx0XHRcdFx0XHR0aGlzLl9oYW5kbGVUb3VjaFN0YXJ0RG9sbHlSb3RhdGUoIGV2ZW50ICk7XG5cblx0XHRcdFx0XHR0aGlzLnN0YXRlID0gX1NUQVRFLlRPVUNIX0RPTExZX1JPVEFURTtcblxuXHRcdFx0XHRcdGJyZWFrO1xuXG5cdFx0XHRcdGRlZmF1bHQ6XG5cblx0XHRcdFx0XHR0aGlzLnN0YXRlID0gX1NUQVRFLk5PTkU7XG5cblx0XHRcdH1cblxuXHRcdFx0YnJlYWs7XG5cblx0XHRkZWZhdWx0OlxuXG5cdFx0XHR0aGlzLnN0YXRlID0gX1NUQVRFLk5PTkU7XG5cblx0fVxuXG5cdGlmICggdGhpcy5zdGF0ZSAhPT0gX1NUQVRFLk5PTkUgKSB7XG5cblx0XHR0aGlzLmRpc3BhdGNoRXZlbnQoIF9zdGFydEV2ZW50ICk7XG5cblx0fVxuXG59XG5cbmZ1bmN0aW9uIG9uVG91Y2hNb3ZlKCBldmVudCApIHtcblxuXHR0aGlzLl90cmFja1BvaW50ZXIoIGV2ZW50ICk7XG5cblx0c3dpdGNoICggdGhpcy5zdGF0ZSApIHtcblxuXHRcdGNhc2UgX1NUQVRFLlRPVUNIX1JPVEFURTpcblxuXHRcdFx0aWYgKCB0aGlzLmVuYWJsZVJvdGF0ZSA9PT0gZmFsc2UgKSByZXR1cm47XG5cblx0XHRcdHRoaXMuX2hhbmRsZVRvdWNoTW92ZVJvdGF0ZSggZXZlbnQgKTtcblxuXHRcdFx0dGhpcy51cGRhdGUoKTtcblxuXHRcdFx0YnJlYWs7XG5cblx0XHRjYXNlIF9TVEFURS5UT1VDSF9QQU46XG5cblx0XHRcdGlmICggdGhpcy5lbmFibGVQYW4gPT09IGZhbHNlICkgcmV0dXJuO1xuXG5cdFx0XHR0aGlzLl9oYW5kbGVUb3VjaE1vdmVQYW4oIGV2ZW50ICk7XG5cblx0XHRcdHRoaXMudXBkYXRlKCk7XG5cblx0XHRcdGJyZWFrO1xuXG5cdFx0Y2FzZSBfU1RBVEUuVE9VQ0hfRE9MTFlfUEFOOlxuXG5cdFx0XHRpZiAoIHRoaXMuZW5hYmxlWm9vbSA9PT0gZmFsc2UgJiYgdGhpcy5lbmFibGVQYW4gPT09IGZhbHNlICkgcmV0dXJuO1xuXG5cdFx0XHR0aGlzLl9oYW5kbGVUb3VjaE1vdmVEb2xseVBhbiggZXZlbnQgKTtcblxuXHRcdFx0dGhpcy51cGRhdGUoKTtcblxuXHRcdFx0YnJlYWs7XG5cblx0XHRjYXNlIF9TVEFURS5UT1VDSF9ET0xMWV9ST1RBVEU6XG5cblx0XHRcdGlmICggdGhpcy5lbmFibGVab29tID09PSBmYWxzZSAmJiB0aGlzLmVuYWJsZVJvdGF0ZSA9PT0gZmFsc2UgKSByZXR1cm47XG5cblx0XHRcdHRoaXMuX2hhbmRsZVRvdWNoTW92ZURvbGx5Um90YXRlKCBldmVudCApO1xuXG5cdFx0XHR0aGlzLnVwZGF0ZSgpO1xuXG5cdFx0XHRicmVhaztcblxuXHRcdGRlZmF1bHQ6XG5cblx0XHRcdHRoaXMuc3RhdGUgPSBfU1RBVEUuTk9ORTtcblxuXHR9XG5cbn1cblxuZnVuY3Rpb24gb25Db250ZXh0TWVudSggZXZlbnQgKSB7XG5cblx0aWYgKCB0aGlzLmVuYWJsZWQgPT09IGZhbHNlICkgcmV0dXJuO1xuXG5cdGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG5cbn1cblxuZnVuY3Rpb24gaW50ZXJjZXB0Q29udHJvbERvd24oIGV2ZW50ICkge1xuXG5cdGlmICggZXZlbnQua2V5ID09PSAnQ29udHJvbCcgKSB7XG5cblx0XHR0aGlzLl9jb250cm9sQWN0aXZlID0gdHJ1ZTtcblxuXHRcdGNvbnN0IGRvY3VtZW50ID0gdGhpcy5kb21FbGVtZW50LmdldFJvb3ROb2RlKCk7IC8vIG9mZnNjcmVlbiBjYW52YXMgY29tcGF0aWJpbGl0eVxuXG5cdFx0ZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lciggJ2tleXVwJywgdGhpcy5faW50ZXJjZXB0Q29udHJvbFVwLCB7IHBhc3NpdmU6IHRydWUsIGNhcHR1cmU6IHRydWUgfSApO1xuXG5cdH1cblxufVxuXG5mdW5jdGlvbiBpbnRlcmNlcHRDb250cm9sVXAoIGV2ZW50ICkge1xuXG5cdGlmICggZXZlbnQua2V5ID09PSAnQ29udHJvbCcgKSB7XG5cblx0XHR0aGlzLl9jb250cm9sQWN0aXZlID0gZmFsc2U7XG5cblx0XHRjb25zdCBkb2N1bWVudCA9IHRoaXMuZG9tRWxlbWVudC5nZXRSb290Tm9kZSgpOyAvLyBvZmZzY3JlZW4gY2FudmFzIGNvbXBhdGliaWxpdHlcblxuXHRcdGRvY3VtZW50LnJlbW92ZUV2ZW50TGlzdGVuZXIoICdrZXl1cCcsIHRoaXMuX2ludGVyY2VwdENvbnRyb2xVcCwgeyBwYXNzaXZlOiB0cnVlLCBjYXB0dXJlOiB0cnVlIH0gKTtcblxuXHR9XG5cbn1cblxuZXhwb3J0IHsgT3JiaXRDb250cm9scyB9O1xuIl0sIm5hbWVzIjpbIkNvbnRyb2xzIiwiTU9VU0UiLCJRdWF0ZXJuaW9uIiwiU3BoZXJpY2FsIiwiVE9VQ0giLCJWZWN0b3IyIiwiVmVjdG9yMyIsIlBsYW5lIiwiUmF5IiwiTWF0aFV0aWxzIiwiX2NoYW5nZUV2ZW50IiwidHlwZSIsIl9zdGFydEV2ZW50IiwiX2VuZEV2ZW50IiwiX3JheSIsIl9wbGFuZSIsIl9USUxUX0xJTUlUIiwiTWF0aCIsImNvcyIsIkRFRzJSQUQiLCJfdiIsIl90d29QSSIsIlBJIiwiX1NUQVRFIiwiTk9ORSIsIlJPVEFURSIsIkRPTExZIiwiUEFOIiwiVE9VQ0hfUk9UQVRFIiwiVE9VQ0hfUEFOIiwiVE9VQ0hfRE9MTFlfUEFOIiwiVE9VQ0hfRE9MTFlfUk9UQVRFIiwiX0VQUyIsIk9yYml0Q29udHJvbHMiLCJjb25uZWN0IiwiZG9tRWxlbWVudCIsImFkZEV2ZW50TGlzdGVuZXIiLCJfb25Qb2ludGVyRG93biIsIl9vblBvaW50ZXJVcCIsIl9vbkNvbnRleHRNZW51IiwiX29uTW91c2VXaGVlbCIsInBhc3NpdmUiLCJkb2N1bWVudCIsImdldFJvb3ROb2RlIiwiX2ludGVyY2VwdENvbnRyb2xEb3duIiwiY2FwdHVyZSIsInN0eWxlIiwidG91Y2hBY3Rpb24iLCJkaXNjb25uZWN0IiwicmVtb3ZlRXZlbnRMaXN0ZW5lciIsIl9vblBvaW50ZXJNb3ZlIiwic3RvcExpc3RlblRvS2V5RXZlbnRzIiwiZGlzcG9zZSIsImdldFBvbGFyQW5nbGUiLCJfc3BoZXJpY2FsIiwicGhpIiwiZ2V0QXppbXV0aGFsQW5nbGUiLCJ0aGV0YSIsImdldERpc3RhbmNlIiwib2JqZWN0IiwicG9zaXRpb24iLCJkaXN0YW5jZVRvIiwidGFyZ2V0IiwibGlzdGVuVG9LZXlFdmVudHMiLCJfb25LZXlEb3duIiwiX2RvbUVsZW1lbnRLZXlFdmVudHMiLCJzYXZlU3RhdGUiLCJ0YXJnZXQwIiwiY29weSIsInBvc2l0aW9uMCIsInpvb20wIiwiem9vbSIsInJlc2V0IiwidXBkYXRlUHJvamVjdGlvbk1hdHJpeCIsImRpc3BhdGNoRXZlbnQiLCJ1cGRhdGUiLCJzdGF0ZSIsImRlbHRhVGltZSIsInN1YiIsImFwcGx5UXVhdGVybmlvbiIsIl9xdWF0Iiwic2V0RnJvbVZlY3RvcjMiLCJhdXRvUm90YXRlIiwiX3JvdGF0ZUxlZnQiLCJfZ2V0QXV0b1JvdGF0aW9uQW5nbGUiLCJlbmFibGVEYW1waW5nIiwiX3NwaGVyaWNhbERlbHRhIiwiZGFtcGluZ0ZhY3RvciIsIm1pbiIsIm1pbkF6aW11dGhBbmdsZSIsIm1heCIsIm1heEF6aW11dGhBbmdsZSIsImlzRmluaXRlIiwibWluUG9sYXJBbmdsZSIsIm1heFBvbGFyQW5nbGUiLCJtYWtlU2FmZSIsImFkZFNjYWxlZFZlY3RvciIsIl9wYW5PZmZzZXQiLCJhZGQiLCJjdXJzb3IiLCJjbGFtcExlbmd0aCIsIm1pblRhcmdldFJhZGl1cyIsIm1heFRhcmdldFJhZGl1cyIsInpvb21DaGFuZ2VkIiwiem9vbVRvQ3Vyc29yIiwiX3BlcmZvcm1DdXJzb3Jab29tIiwiaXNPcnRob2dyYXBoaWNDYW1lcmEiLCJyYWRpdXMiLCJfY2xhbXBEaXN0YW5jZSIsInByZXZSYWRpdXMiLCJfc2NhbGUiLCJzZXRGcm9tU3BoZXJpY2FsIiwiX3F1YXRJbnZlcnNlIiwibG9va0F0IiwibXVsdGlwbHlTY2FsYXIiLCJzZXQiLCJuZXdSYWRpdXMiLCJpc1BlcnNwZWN0aXZlQ2FtZXJhIiwibGVuZ3RoIiwicmFkaXVzRGVsdGEiLCJfZG9sbHlEaXJlY3Rpb24iLCJ1cGRhdGVNYXRyaXhXb3JsZCIsIm1vdXNlQmVmb3JlIiwiX21vdXNlIiwieCIsInkiLCJ1bnByb2plY3QiLCJwcmV2Wm9vbSIsIm1pblpvb20iLCJtYXhab29tIiwibW91c2VBZnRlciIsImNvbnNvbGUiLCJ3YXJuIiwic2NyZWVuU3BhY2VQYW5uaW5nIiwidHJhbnNmb3JtRGlyZWN0aW9uIiwibWF0cml4Iiwib3JpZ2luIiwiZGlyZWN0aW9uIiwiYWJzIiwidXAiLCJkb3QiLCJzZXRGcm9tTm9ybWFsQW5kQ29wbGFuYXJQb2ludCIsImludGVyc2VjdFBsYW5lIiwiX2xhc3RQb3NpdGlvbiIsImRpc3RhbmNlVG9TcXVhcmVkIiwiX2xhc3RRdWF0ZXJuaW9uIiwicXVhdGVybmlvbiIsIl9sYXN0VGFyZ2V0UG9zaXRpb24iLCJhdXRvUm90YXRlU3BlZWQiLCJfZ2V0Wm9vbVNjYWxlIiwiZGVsdGEiLCJub3JtYWxpemVkRGVsdGEiLCJwb3ciLCJ6b29tU3BlZWQiLCJhbmdsZSIsIl9yb3RhdGVVcCIsIl9wYW5MZWZ0IiwiZGlzdGFuY2UiLCJvYmplY3RNYXRyaXgiLCJzZXRGcm9tTWF0cml4Q29sdW1uIiwiX3BhblVwIiwiY3Jvc3NWZWN0b3JzIiwiX3BhbiIsImRlbHRhWCIsImRlbHRhWSIsImVsZW1lbnQiLCJ0YXJnZXREaXN0YW5jZSIsInRhbiIsImZvdiIsImNsaWVudEhlaWdodCIsInJpZ2h0IiwibGVmdCIsImNsaWVudFdpZHRoIiwidG9wIiwiYm90dG9tIiwiZW5hYmxlUGFuIiwiX2RvbGx5T3V0IiwiZG9sbHlTY2FsZSIsImVuYWJsZVpvb20iLCJfZG9sbHlJbiIsIl91cGRhdGVab29tUGFyYW1ldGVycyIsInJlY3QiLCJnZXRCb3VuZGluZ0NsaWVudFJlY3QiLCJkeCIsImR5IiwidyIsIndpZHRoIiwiaCIsImhlaWdodCIsIm5vcm1hbGl6ZSIsImRpc3QiLCJtaW5EaXN0YW5jZSIsIm1heERpc3RhbmNlIiwiX2hhbmRsZU1vdXNlRG93blJvdGF0ZSIsImV2ZW50IiwiX3JvdGF0ZVN0YXJ0IiwiY2xpZW50WCIsImNsaWVudFkiLCJfaGFuZGxlTW91c2VEb3duRG9sbHkiLCJfZG9sbHlTdGFydCIsIl9oYW5kbGVNb3VzZURvd25QYW4iLCJfcGFuU3RhcnQiLCJfaGFuZGxlTW91c2VNb3ZlUm90YXRlIiwiX3JvdGF0ZUVuZCIsIl9yb3RhdGVEZWx0YSIsInN1YlZlY3RvcnMiLCJyb3RhdGVTcGVlZCIsIl9oYW5kbGVNb3VzZU1vdmVEb2xseSIsIl9kb2xseUVuZCIsIl9kb2xseURlbHRhIiwiX2hhbmRsZU1vdXNlTW92ZVBhbiIsIl9wYW5FbmQiLCJfcGFuRGVsdGEiLCJwYW5TcGVlZCIsIl9oYW5kbGVNb3VzZVdoZWVsIiwiX2hhbmRsZUtleURvd24iLCJuZWVkc1VwZGF0ZSIsImNvZGUiLCJrZXlzIiwiVVAiLCJjdHJsS2V5IiwibWV0YUtleSIsInNoaWZ0S2V5IiwiZW5hYmxlUm90YXRlIiwia2V5Um90YXRlU3BlZWQiLCJrZXlQYW5TcGVlZCIsIkJPVFRPTSIsIkxFRlQiLCJSSUdIVCIsInByZXZlbnREZWZhdWx0IiwiX2hhbmRsZVRvdWNoU3RhcnRSb3RhdGUiLCJfcG9pbnRlcnMiLCJwYWdlWCIsInBhZ2VZIiwiX2dldFNlY29uZFBvaW50ZXJQb3NpdGlvbiIsIl9oYW5kbGVUb3VjaFN0YXJ0UGFuIiwiX2hhbmRsZVRvdWNoU3RhcnREb2xseSIsInNxcnQiLCJfaGFuZGxlVG91Y2hTdGFydERvbGx5UGFuIiwiX2hhbmRsZVRvdWNoU3RhcnREb2xseVJvdGF0ZSIsIl9oYW5kbGVUb3VjaE1vdmVSb3RhdGUiLCJfaGFuZGxlVG91Y2hNb3ZlUGFuIiwiX2hhbmRsZVRvdWNoTW92ZURvbGx5IiwiY2VudGVyWCIsImNlbnRlclkiLCJfaGFuZGxlVG91Y2hNb3ZlRG9sbHlQYW4iLCJfaGFuZGxlVG91Y2hNb3ZlRG9sbHlSb3RhdGUiLCJfYWRkUG9pbnRlciIsInB1c2giLCJwb2ludGVySWQiLCJfcmVtb3ZlUG9pbnRlciIsIl9wb2ludGVyUG9zaXRpb25zIiwiaSIsInNwbGljZSIsIl9pc1RyYWNraW5nUG9pbnRlciIsIl90cmFja1BvaW50ZXIiLCJ1bmRlZmluZWQiLCJfY3VzdG9tV2hlZWxFdmVudCIsIm1vZGUiLCJkZWx0YU1vZGUiLCJuZXdFdmVudCIsIl9jb250cm9sQWN0aXZlIiwiY29uc3RydWN0b3IiLCJlbmFibGVkIiwiSW5maW5pdHkiLCJtb3VzZUJ1dHRvbnMiLCJNSURETEUiLCJ0b3VjaGVzIiwiT05FIiwiVFdPIiwiRE9MTFlfUEFOIiwiY2xvbmUiLCJzZXRGcm9tVW5pdFZlY3RvcnMiLCJpbnZlcnQiLCJvblBvaW50ZXJNb3ZlIiwiYmluZCIsIm9uUG9pbnRlckRvd24iLCJvblBvaW50ZXJVcCIsIm9uQ29udGV4dE1lbnUiLCJvbk1vdXNlV2hlZWwiLCJvbktleURvd24iLCJfb25Ub3VjaFN0YXJ0Iiwib25Ub3VjaFN0YXJ0IiwiX29uVG91Y2hNb3ZlIiwib25Ub3VjaE1vdmUiLCJfb25Nb3VzZURvd24iLCJvbk1vdXNlRG93biIsIl9vbk1vdXNlTW92ZSIsIm9uTW91c2VNb3ZlIiwiaW50ZXJjZXB0Q29udHJvbERvd24iLCJfaW50ZXJjZXB0Q29udHJvbFVwIiwiaW50ZXJjZXB0Q29udHJvbFVwIiwic2V0UG9pbnRlckNhcHR1cmUiLCJwb2ludGVyVHlwZSIsInJlbGVhc2VQb2ludGVyQ2FwdHVyZSIsIm1vdXNlQWN0aW9uIiwiYnV0dG9uIiwiRE9MTFlfUk9UQVRFIiwia2V5Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/three/examples/jsm/controls/OrbitControls.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/three/examples/jsm/libs/lil-gui.module.min.js":
/*!********************************************************************!*\
  !*** ./node_modules/three/examples/jsm/libs/lil-gui.module.min.js ***!
  \********************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   BooleanController: function() { return /* binding */ i; },\n/* harmony export */   ColorController: function() { return /* binding */ a; },\n/* harmony export */   Controller: function() { return /* binding */ t; },\n/* harmony export */   FunctionController: function() { return /* binding */ h; },\n/* harmony export */   GUI: function() { return /* binding */ g; },\n/* harmony export */   NumberController: function() { return /* binding */ d; },\n/* harmony export */   OptionController: function() { return /* binding */ c; },\n/* harmony export */   StringController: function() { return /* binding */ u; }\n/* harmony export */ });\n/**\n * lil-gui\n * https://lil-gui.georgealways.com\n * @version 0.17.0\n * @author George Michael Brower\n * @license MIT\n */ class t {\n    name(t) {\n        return this._name = t, this.$name.innerHTML = t, this;\n    }\n    onChange(t) {\n        return this._onChange = t, this;\n    }\n    _callOnChange() {\n        this.parent._callOnChange(this), void 0 !== this._onChange && this._onChange.call(this, this.getValue()), this._changed = !0;\n    }\n    onFinishChange(t) {\n        return this._onFinishChange = t, this;\n    }\n    _callOnFinishChange() {\n        this._changed && (this.parent._callOnFinishChange(this), void 0 !== this._onFinishChange && this._onFinishChange.call(this, this.getValue())), this._changed = !1;\n    }\n    reset() {\n        return this.setValue(this.initialValue), this._callOnFinishChange(), this;\n    }\n    enable() {\n        let t = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : !0;\n        return this.disable(!t);\n    }\n    disable() {\n        let t = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : !0;\n        return t === this._disabled || (this._disabled = t, this.domElement.classList.toggle(\"disabled\", t), this.$disable.toggleAttribute(\"disabled\", t)), this;\n    }\n    show() {\n        let t = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : !0;\n        return this._hidden = !t, this.domElement.style.display = this._hidden ? \"none\" : \"\", this;\n    }\n    hide() {\n        return this.show(!1);\n    }\n    options(t) {\n        const i = this.parent.add(this.object, this.property, t);\n        return i.name(this._name), this.destroy(), i;\n    }\n    min(t) {\n        return this;\n    }\n    max(t) {\n        return this;\n    }\n    step(t) {\n        return this;\n    }\n    decimals(t) {\n        return this;\n    }\n    listen() {\n        let t = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : !0;\n        return this._listening = t, void 0 !== this._listenCallbackID && (cancelAnimationFrame(this._listenCallbackID), this._listenCallbackID = void 0), this._listening && this._listenCallback(), this;\n    }\n    _listenCallback() {\n        this._listenCallbackID = requestAnimationFrame(this._listenCallback);\n        const t = this.save();\n        t !== this._listenPrevValue && this.updateDisplay(), this._listenPrevValue = t;\n    }\n    getValue() {\n        return this.object[this.property];\n    }\n    setValue(t) {\n        return this.object[this.property] = t, this._callOnChange(), this.updateDisplay(), this;\n    }\n    updateDisplay() {\n        return this;\n    }\n    load(t) {\n        return this.setValue(t), this._callOnFinishChange(), this;\n    }\n    save() {\n        return this.getValue();\n    }\n    destroy() {\n        this.listen(!1), this.parent.children.splice(this.parent.children.indexOf(this), 1), this.parent.controllers.splice(this.parent.controllers.indexOf(this), 1), this.parent.$children.removeChild(this.domElement);\n    }\n    constructor(i, e, s, n, l = \"div\"){\n        this.parent = i, this.object = e, this.property = s, this._disabled = !1, this._hidden = !1, this.initialValue = this.getValue(), this.domElement = document.createElement(\"div\"), this.domElement.classList.add(\"controller\"), this.domElement.classList.add(n), this.$name = document.createElement(\"div\"), this.$name.classList.add(\"name\"), t.nextNameID = t.nextNameID || 0, this.$name.id = \"lil-gui-name-\" + ++t.nextNameID, this.$widget = document.createElement(l), this.$widget.classList.add(\"widget\"), this.$disable = this.$widget, this.domElement.appendChild(this.$name), this.domElement.appendChild(this.$widget), this.parent.children.push(this), this.parent.controllers.push(this), this.parent.$children.appendChild(this.domElement), this._listenCallback = this._listenCallback.bind(this), this.name(s);\n    }\n}\nclass i extends t {\n    updateDisplay() {\n        return this.$input.checked = this.getValue(), this;\n    }\n    constructor(t, i, e){\n        super(t, i, e, \"boolean\", \"label\"), this.$input = document.createElement(\"input\"), this.$input.setAttribute(\"type\", \"checkbox\"), this.$input.setAttribute(\"aria-labelledby\", this.$name.id), this.$widget.appendChild(this.$input), this.$input.addEventListener(\"change\", ()=>{\n            this.setValue(this.$input.checked), this._callOnFinishChange();\n        }), this.$disable = this.$input, this.updateDisplay();\n    }\n}\nfunction e(t) {\n    let i, e;\n    return (i = t.match(/(#|0x)?([a-f0-9]{6})/i)) ? e = i[2] : (i = t.match(/rgb\\(\\s*(\\d*)\\s*,\\s*(\\d*)\\s*,\\s*(\\d*)\\s*\\)/)) ? e = parseInt(i[1]).toString(16).padStart(2, 0) + parseInt(i[2]).toString(16).padStart(2, 0) + parseInt(i[3]).toString(16).padStart(2, 0) : (i = t.match(/^#?([a-f0-9])([a-f0-9])([a-f0-9])$/i)) && (e = i[1] + i[1] + i[2] + i[2] + i[3] + i[3]), !!e && \"#\" + e;\n}\nconst s = {\n    isPrimitive: !0,\n    match: (t)=>\"string\" == typeof t,\n    fromHexString: e,\n    toHexString: e\n}, n = {\n    isPrimitive: !0,\n    match: (t)=>\"number\" == typeof t,\n    fromHexString: (t)=>parseInt(t.substring(1), 16),\n    toHexString: (t)=>\"#\" + t.toString(16).padStart(6, 0)\n}, l = {\n    isPrimitive: !1,\n    match: Array.isArray,\n    fromHexString (t, i) {\n        let e = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : 1;\n        const s = n.fromHexString(t);\n        i[0] = (s >> 16 & 255) / 255 * e, i[1] = (s >> 8 & 255) / 255 * e, i[2] = (255 & s) / 255 * e;\n    },\n    toHexString: function(param) {\n        let [t, i, e] = param, s = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : 1;\n        return n.toHexString(t * (s = 255 / s) << 16 ^ i * s << 8 ^ e * s << 0);\n    }\n}, r = {\n    isPrimitive: !1,\n    match: (t)=>Object(t) === t,\n    fromHexString (t, i) {\n        let e = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : 1;\n        const s = n.fromHexString(t);\n        i.r = (s >> 16 & 255) / 255 * e, i.g = (s >> 8 & 255) / 255 * e, i.b = (255 & s) / 255 * e;\n    },\n    toHexString: function(param) {\n        let { r: t, g: i, b: e } = param, s = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : 1;\n        return n.toHexString(t * (s = 255 / s) << 16 ^ i * s << 8 ^ e * s << 0);\n    }\n}, o = [\n    s,\n    n,\n    l,\n    r\n];\nclass a extends t {\n    reset() {\n        return this._setValueFromHexString(this._initialValueHexString), this;\n    }\n    _setValueFromHexString(t) {\n        if (this._format.isPrimitive) {\n            const i = this._format.fromHexString(t);\n            this.setValue(i);\n        } else this._format.fromHexString(t, this.getValue(), this._rgbScale), this._callOnChange(), this.updateDisplay();\n    }\n    save() {\n        return this._format.toHexString(this.getValue(), this._rgbScale);\n    }\n    load(t) {\n        return this._setValueFromHexString(t), this._callOnFinishChange(), this;\n    }\n    updateDisplay() {\n        return this.$input.value = this._format.toHexString(this.getValue(), this._rgbScale), this._textFocused || (this.$text.value = this.$input.value.substring(1)), this.$display.style.backgroundColor = this.$input.value, this;\n    }\n    constructor(t, i, s, n){\n        var l;\n        super(t, i, s, \"color\"), this.$input = document.createElement(\"input\"), this.$input.setAttribute(\"type\", \"color\"), this.$input.setAttribute(\"tabindex\", -1), this.$input.setAttribute(\"aria-labelledby\", this.$name.id), this.$text = document.createElement(\"input\"), this.$text.setAttribute(\"type\", \"text\"), this.$text.setAttribute(\"spellcheck\", \"false\"), this.$text.setAttribute(\"aria-labelledby\", this.$name.id), this.$display = document.createElement(\"div\"), this.$display.classList.add(\"display\"), this.$display.appendChild(this.$input), this.$widget.appendChild(this.$display), this.$widget.appendChild(this.$text), this._format = (l = this.initialValue, o.find((t)=>t.match(l))), this._rgbScale = n, this._initialValueHexString = this.save(), this._textFocused = !1, this.$input.addEventListener(\"input\", ()=>{\n            this._setValueFromHexString(this.$input.value);\n        }), this.$input.addEventListener(\"blur\", ()=>{\n            this._callOnFinishChange();\n        }), this.$text.addEventListener(\"input\", ()=>{\n            const t = e(this.$text.value);\n            t && this._setValueFromHexString(t);\n        }), this.$text.addEventListener(\"focus\", ()=>{\n            this._textFocused = !0, this.$text.select();\n        }), this.$text.addEventListener(\"blur\", ()=>{\n            this._textFocused = !1, this.updateDisplay(), this._callOnFinishChange();\n        }), this.$disable = this.$text, this.updateDisplay();\n    }\n}\nclass h extends t {\n    constructor(t, i, e){\n        super(t, i, e, \"function\"), this.$button = document.createElement(\"button\"), this.$button.appendChild(this.$name), this.$widget.appendChild(this.$button), this.$button.addEventListener(\"click\", (t)=>{\n            t.preventDefault(), this.getValue().call(this.object);\n        }), this.$button.addEventListener(\"touchstart\", ()=>{}, {\n            passive: !0\n        }), this.$disable = this.$button;\n    }\n}\nclass d extends t {\n    decimals(t) {\n        return this._decimals = t, this.updateDisplay(), this;\n    }\n    min(t) {\n        return this._min = t, this._onUpdateMinMax(), this;\n    }\n    max(t) {\n        return this._max = t, this._onUpdateMinMax(), this;\n    }\n    step(t) {\n        let i = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : !0;\n        return this._step = t, this._stepExplicit = i, this;\n    }\n    updateDisplay() {\n        const t = this.getValue();\n        if (this._hasSlider) {\n            let i = (t - this._min) / (this._max - this._min);\n            i = Math.max(0, Math.min(i, 1)), this.$fill.style.width = 100 * i + \"%\";\n        }\n        return this._inputFocused || (this.$input.value = void 0 === this._decimals ? t : t.toFixed(this._decimals)), this;\n    }\n    _initInput() {\n        this.$input = document.createElement(\"input\"), this.$input.setAttribute(\"type\", \"number\"), this.$input.setAttribute(\"step\", \"any\"), this.$input.setAttribute(\"aria-labelledby\", this.$name.id), this.$widget.appendChild(this.$input), this.$disable = this.$input;\n        const t = (t)=>{\n            const i = parseFloat(this.$input.value);\n            isNaN(i) || (this._snapClampSetValue(i + t), this.$input.value = this.getValue());\n        };\n        let i, e, s, n, l, r = !1;\n        const o = (t)=>{\n            if (r) {\n                const s = t.clientX - i, n = t.clientY - e;\n                Math.abs(n) > 5 ? (t.preventDefault(), this.$input.blur(), r = !1, this._setDraggingStyle(!0, \"vertical\")) : Math.abs(s) > 5 && a();\n            }\n            if (!r) {\n                const i = t.clientY - s;\n                l -= i * this._step * this._arrowKeyMultiplier(t), n + l > this._max ? l = this._max - n : n + l < this._min && (l = this._min - n), this._snapClampSetValue(n + l);\n            }\n            s = t.clientY;\n        }, a = ()=>{\n            this._setDraggingStyle(!1, \"vertical\"), this._callOnFinishChange(), window.removeEventListener(\"mousemove\", o), window.removeEventListener(\"mouseup\", a);\n        };\n        this.$input.addEventListener(\"input\", ()=>{\n            let t = parseFloat(this.$input.value);\n            isNaN(t) || (this._stepExplicit && (t = this._snap(t)), this.setValue(this._clamp(t)));\n        }), this.$input.addEventListener(\"keydown\", (i)=>{\n            \"Enter\" === i.code && this.$input.blur(), \"ArrowUp\" === i.code && (i.preventDefault(), t(this._step * this._arrowKeyMultiplier(i))), \"ArrowDown\" === i.code && (i.preventDefault(), t(this._step * this._arrowKeyMultiplier(i) * -1));\n        }), this.$input.addEventListener(\"wheel\", (i)=>{\n            this._inputFocused && (i.preventDefault(), t(this._step * this._normalizeMouseWheel(i)));\n        }, {\n            passive: !1\n        }), this.$input.addEventListener(\"mousedown\", (t)=>{\n            i = t.clientX, e = s = t.clientY, r = !0, n = this.getValue(), l = 0, window.addEventListener(\"mousemove\", o), window.addEventListener(\"mouseup\", a);\n        }), this.$input.addEventListener(\"focus\", ()=>{\n            this._inputFocused = !0;\n        }), this.$input.addEventListener(\"blur\", ()=>{\n            this._inputFocused = !1, this.updateDisplay(), this._callOnFinishChange();\n        });\n    }\n    _initSlider() {\n        this._hasSlider = !0, this.$slider = document.createElement(\"div\"), this.$slider.classList.add(\"slider\"), this.$fill = document.createElement(\"div\"), this.$fill.classList.add(\"fill\"), this.$slider.appendChild(this.$fill), this.$widget.insertBefore(this.$slider, this.$input), this.domElement.classList.add(\"hasSlider\");\n        const t = (t)=>{\n            const i = this.$slider.getBoundingClientRect();\n            let e = (s = t, n = i.left, l = i.right, r = this._min, o = this._max, (s - n) / (l - n) * (o - r) + r);\n            var s, n, l, r, o;\n            this._snapClampSetValue(e);\n        }, i = (i)=>{\n            t(i.clientX);\n        }, e = ()=>{\n            this._callOnFinishChange(), this._setDraggingStyle(!1), window.removeEventListener(\"mousemove\", i), window.removeEventListener(\"mouseup\", e);\n        };\n        let s, n, l = !1;\n        const r = (i)=>{\n            i.preventDefault(), this._setDraggingStyle(!0), t(i.touches[0].clientX), l = !1;\n        }, o = (i)=>{\n            if (l) {\n                const t = i.touches[0].clientX - s, e = i.touches[0].clientY - n;\n                Math.abs(t) > Math.abs(e) ? r(i) : (window.removeEventListener(\"touchmove\", o), window.removeEventListener(\"touchend\", a));\n            } else i.preventDefault(), t(i.touches[0].clientX);\n        }, a = ()=>{\n            this._callOnFinishChange(), this._setDraggingStyle(!1), window.removeEventListener(\"touchmove\", o), window.removeEventListener(\"touchend\", a);\n        }, h = this._callOnFinishChange.bind(this);\n        let d;\n        this.$slider.addEventListener(\"mousedown\", (s)=>{\n            this._setDraggingStyle(!0), t(s.clientX), window.addEventListener(\"mousemove\", i), window.addEventListener(\"mouseup\", e);\n        }), this.$slider.addEventListener(\"touchstart\", (t)=>{\n            t.touches.length > 1 || (this._hasScrollBar ? (s = t.touches[0].clientX, n = t.touches[0].clientY, l = !0) : r(t), window.addEventListener(\"touchmove\", o, {\n                passive: !1\n            }), window.addEventListener(\"touchend\", a));\n        }, {\n            passive: !1\n        }), this.$slider.addEventListener(\"wheel\", (t)=>{\n            if (Math.abs(t.deltaX) < Math.abs(t.deltaY) && this._hasScrollBar) return;\n            t.preventDefault();\n            const i = this._normalizeMouseWheel(t) * this._step;\n            this._snapClampSetValue(this.getValue() + i), this.$input.value = this.getValue(), clearTimeout(d), d = setTimeout(h, 400);\n        }, {\n            passive: !1\n        });\n    }\n    _setDraggingStyle(t) {\n        let i = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : \"horizontal\";\n        this.$slider && this.$slider.classList.toggle(\"active\", t), document.body.classList.toggle(\"lil-gui-dragging\", t), document.body.classList.toggle(\"lil-gui-\" + i, t);\n    }\n    _getImplicitStep() {\n        return this._hasMin && this._hasMax ? (this._max - this._min) / 1e3 : .1;\n    }\n    _onUpdateMinMax() {\n        !this._hasSlider && this._hasMin && this._hasMax && (this._stepExplicit || this.step(this._getImplicitStep(), !1), this._initSlider(), this.updateDisplay());\n    }\n    _normalizeMouseWheel(t) {\n        let { deltaX: i, deltaY: e } = t;\n        Math.floor(t.deltaY) !== t.deltaY && t.wheelDelta && (i = 0, e = -t.wheelDelta / 120, e *= this._stepExplicit ? 1 : 10);\n        return i + -e;\n    }\n    _arrowKeyMultiplier(t) {\n        let i = this._stepExplicit ? 1 : 10;\n        return t.shiftKey ? i *= 10 : t.altKey && (i /= 10), i;\n    }\n    _snap(t) {\n        const i = Math.round(t / this._step) * this._step;\n        return parseFloat(i.toPrecision(15));\n    }\n    _clamp(t) {\n        return t < this._min && (t = this._min), t > this._max && (t = this._max), t;\n    }\n    _snapClampSetValue(t) {\n        this.setValue(this._clamp(this._snap(t)));\n    }\n    get _hasScrollBar() {\n        const t = this.parent.root.$children;\n        return t.scrollHeight > t.clientHeight;\n    }\n    get _hasMin() {\n        return void 0 !== this._min;\n    }\n    get _hasMax() {\n        return void 0 !== this._max;\n    }\n    constructor(t, i, e, s, n, l){\n        super(t, i, e, \"number\"), this._initInput(), this.min(s), this.max(n);\n        const r = void 0 !== l;\n        this.step(r ? l : this._getImplicitStep(), r), this.updateDisplay();\n    }\n}\nclass c extends t {\n    updateDisplay() {\n        const t = this.getValue(), i = this._values.indexOf(t);\n        return this.$select.selectedIndex = i, this.$display.innerHTML = -1 === i ? t : this._names[i], this;\n    }\n    constructor(t, i, e, s){\n        super(t, i, e, \"option\"), this.$select = document.createElement(\"select\"), this.$select.setAttribute(\"aria-labelledby\", this.$name.id), this.$display = document.createElement(\"div\"), this.$display.classList.add(\"display\"), this._values = Array.isArray(s) ? s : Object.values(s), this._names = Array.isArray(s) ? s : Object.keys(s), this._names.forEach((t)=>{\n            const i = document.createElement(\"option\");\n            i.innerHTML = t, this.$select.appendChild(i);\n        }), this.$select.addEventListener(\"change\", ()=>{\n            this.setValue(this._values[this.$select.selectedIndex]), this._callOnFinishChange();\n        }), this.$select.addEventListener(\"focus\", ()=>{\n            this.$display.classList.add(\"focus\");\n        }), this.$select.addEventListener(\"blur\", ()=>{\n            this.$display.classList.remove(\"focus\");\n        }), this.$widget.appendChild(this.$select), this.$widget.appendChild(this.$display), this.$disable = this.$select, this.updateDisplay();\n    }\n}\nclass u extends t {\n    updateDisplay() {\n        return this.$input.value = this.getValue(), this;\n    }\n    constructor(t, i, e){\n        super(t, i, e, \"string\"), this.$input = document.createElement(\"input\"), this.$input.setAttribute(\"type\", \"text\"), this.$input.setAttribute(\"aria-labelledby\", this.$name.id), this.$input.addEventListener(\"input\", ()=>{\n            this.setValue(this.$input.value);\n        }), this.$input.addEventListener(\"keydown\", (t)=>{\n            \"Enter\" === t.code && this.$input.blur();\n        }), this.$input.addEventListener(\"blur\", ()=>{\n            this._callOnFinishChange();\n        }), this.$widget.appendChild(this.$input), this.$disable = this.$input, this.updateDisplay();\n    }\n}\nlet p = !1;\nclass g {\n    add(t, e, s, n, l) {\n        if (Object(s) === s) return new c(this, t, e, s);\n        const r = t[e];\n        switch(typeof r){\n            case \"number\":\n                return new d(this, t, e, s, n, l);\n            case \"boolean\":\n                return new i(this, t, e);\n            case \"string\":\n                return new u(this, t, e);\n            case \"function\":\n                return new h(this, t, e);\n        }\n        console.error(\"gui.add failed\\n\tproperty:\", e, \"\\n\tobject:\", t, \"\\n\tvalue:\", r);\n    }\n    addColor(t, i) {\n        let e = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : 1;\n        return new a(this, t, i, e);\n    }\n    addFolder(t) {\n        return new g({\n            parent: this,\n            title: t\n        });\n    }\n    load(t) {\n        let i = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : !0;\n        return t.controllers && this.controllers.forEach((i)=>{\n            i instanceof h || i._name in t.controllers && i.load(t.controllers[i._name]);\n        }), i && t.folders && this.folders.forEach((i)=>{\n            i._title in t.folders && i.load(t.folders[i._title]);\n        }), this;\n    }\n    save() {\n        let t = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : !0;\n        const i = {\n            controllers: {},\n            folders: {}\n        };\n        return this.controllers.forEach((t)=>{\n            if (!(t instanceof h)) {\n                if (t._name in i.controllers) throw new Error('Cannot save GUI with duplicate property \"'.concat(t._name, '\"'));\n                i.controllers[t._name] = t.save();\n            }\n        }), t && this.folders.forEach((t)=>{\n            if (t._title in i.folders) throw new Error('Cannot save GUI with duplicate folder \"'.concat(t._title, '\"'));\n            i.folders[t._title] = t.save();\n        }), i;\n    }\n    open() {\n        let t = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : !0;\n        return this._closed = !t, this.$title.setAttribute(\"aria-expanded\", !this._closed), this.domElement.classList.toggle(\"closed\", this._closed), this;\n    }\n    close() {\n        return this.open(!1);\n    }\n    show() {\n        let t = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : !0;\n        return this._hidden = !t, this.domElement.style.display = this._hidden ? \"none\" : \"\", this;\n    }\n    hide() {\n        return this.show(!1);\n    }\n    openAnimated() {\n        let t = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : !0;\n        return this._closed = !t, this.$title.setAttribute(\"aria-expanded\", !this._closed), requestAnimationFrame(()=>{\n            const i = this.$children.clientHeight;\n            this.$children.style.height = i + \"px\", this.domElement.classList.add(\"transition\");\n            const e = (t)=>{\n                t.target === this.$children && (this.$children.style.height = \"\", this.domElement.classList.remove(\"transition\"), this.$children.removeEventListener(\"transitionend\", e));\n            };\n            this.$children.addEventListener(\"transitionend\", e);\n            const s = t ? this.$children.scrollHeight : 0;\n            this.domElement.classList.toggle(\"closed\", !t), requestAnimationFrame(()=>{\n                this.$children.style.height = s + \"px\";\n            });\n        }), this;\n    }\n    title(t) {\n        return this._title = t, this.$title.innerHTML = t, this;\n    }\n    reset() {\n        let t = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : !0;\n        return (t ? this.controllersRecursive() : this.controllers).forEach((t)=>t.reset()), this;\n    }\n    onChange(t) {\n        return this._onChange = t, this;\n    }\n    _callOnChange(t) {\n        this.parent && this.parent._callOnChange(t), void 0 !== this._onChange && this._onChange.call(this, {\n            object: t.object,\n            property: t.property,\n            value: t.getValue(),\n            controller: t\n        });\n    }\n    onFinishChange(t) {\n        return this._onFinishChange = t, this;\n    }\n    _callOnFinishChange(t) {\n        this.parent && this.parent._callOnFinishChange(t), void 0 !== this._onFinishChange && this._onFinishChange.call(this, {\n            object: t.object,\n            property: t.property,\n            value: t.getValue(),\n            controller: t\n        });\n    }\n    destroy() {\n        this.parent && (this.parent.children.splice(this.parent.children.indexOf(this), 1), this.parent.folders.splice(this.parent.folders.indexOf(this), 1)), this.domElement.parentElement && this.domElement.parentElement.removeChild(this.domElement), Array.from(this.children).forEach((t)=>t.destroy());\n    }\n    controllersRecursive() {\n        let t = Array.from(this.controllers);\n        return this.folders.forEach((i)=>{\n            t = t.concat(i.controllersRecursive());\n        }), t;\n    }\n    foldersRecursive() {\n        let t = Array.from(this.folders);\n        return this.folders.forEach((i)=>{\n            t = t.concat(i.foldersRecursive());\n        }), t;\n    }\n    constructor({ parent: t, autoPlace: i = void 0 === t, container: e, width: s, title: n = \"Controls\", injectStyles: l = !0, touchStyles: r = !0 } = {}){\n        if (this.parent = t, this.root = t ? t.root : this, this.children = [], this.controllers = [], this.folders = [], this._closed = !1, this._hidden = !1, this.domElement = document.createElement(\"div\"), this.domElement.classList.add(\"lil-gui\"), this.$title = document.createElement(\"div\"), this.$title.classList.add(\"title\"), this.$title.setAttribute(\"role\", \"button\"), this.$title.setAttribute(\"aria-expanded\", !0), this.$title.setAttribute(\"tabindex\", 0), this.$title.addEventListener(\"click\", ()=>this.openAnimated(this._closed)), this.$title.addEventListener(\"keydown\", (t)=>{\n            \"Enter\" !== t.code && \"Space\" !== t.code || (t.preventDefault(), this.$title.click());\n        }), this.$title.addEventListener(\"touchstart\", ()=>{}, {\n            passive: !0\n        }), this.$children = document.createElement(\"div\"), this.$children.classList.add(\"children\"), this.domElement.appendChild(this.$title), this.domElement.appendChild(this.$children), this.title(n), r && this.domElement.classList.add(\"allow-touch-styles\"), this.parent) return this.parent.children.push(this), this.parent.folders.push(this), void this.parent.$children.appendChild(this.domElement);\n        this.domElement.classList.add(\"root\"), !p && l && (!function(t) {\n            const i = document.createElement(\"style\");\n            i.innerHTML = t;\n            const e = document.querySelector(\"head link[rel=stylesheet], head style\");\n            e ? document.head.insertBefore(i, e) : document.head.appendChild(i);\n        }('.lil-gui{--background-color:#1f1f1f;--text-color:#ebebeb;--title-background-color:#111;--title-text-color:#ebebeb;--widget-color:#424242;--hover-color:#4f4f4f;--focus-color:#595959;--number-color:#2cc9ff;--string-color:#a2db3c;--font-size:11px;--input-font-size:11px;--font-family:-apple-system,BlinkMacSystemFont,\"Segoe UI\",Roboto,Arial,sans-serif;--font-family-mono:Menlo,Monaco,Consolas,\"Droid Sans Mono\",monospace;--padding:4px;--spacing:4px;--widget-height:20px;--name-width:45%;--slider-knob-width:2px;--slider-input-width:27%;--color-input-width:27%;--slider-input-min-width:45px;--color-input-min-width:45px;--folder-indent:7px;--widget-padding:0 0 0 3px;--widget-border-radius:2px;--checkbox-size:calc(var(--widget-height)*0.75);--scrollbar-width:5px;background-color:var(--background-color);color:var(--text-color);font-family:var(--font-family);font-size:var(--font-size);font-style:normal;font-weight:400;line-height:1;text-align:left;touch-action:manipulation;user-select:none;-webkit-user-select:none}.lil-gui,.lil-gui *{box-sizing:border-box;margin:0;padding:0}.lil-gui.root{display:flex;flex-direction:column;width:var(--width,245px)}.lil-gui.root>.title{background:var(--title-background-color);color:var(--title-text-color)}.lil-gui.root>.children{overflow-x:hidden;overflow-y:auto}.lil-gui.root>.children::-webkit-scrollbar{background:var(--background-color);height:var(--scrollbar-width);width:var(--scrollbar-width)}.lil-gui.root>.children::-webkit-scrollbar-thumb{background:var(--focus-color);border-radius:var(--scrollbar-width)}.lil-gui.force-touch-styles{--widget-height:28px;--padding:6px;--spacing:6px;--font-size:13px;--input-font-size:16px;--folder-indent:10px;--scrollbar-width:7px;--slider-input-min-width:50px;--color-input-min-width:65px}.lil-gui.autoPlace{max-height:100%;position:fixed;right:15px;top:0;z-index:1001}.lil-gui .controller{align-items:center;display:flex;margin:var(--spacing) 0;padding:0 var(--padding)}.lil-gui .controller.disabled{opacity:.5}.lil-gui .controller.disabled,.lil-gui .controller.disabled *{pointer-events:none!important}.lil-gui .controller>.name{flex-shrink:0;line-height:var(--widget-height);min-width:var(--name-width);padding-right:var(--spacing);white-space:pre}.lil-gui .controller .widget{align-items:center;display:flex;min-height:var(--widget-height);position:relative;width:100%}.lil-gui .controller.string input{color:var(--string-color)}.lil-gui .controller.boolean .widget{cursor:pointer}.lil-gui .controller.color .display{border-radius:var(--widget-border-radius);height:var(--widget-height);position:relative;width:100%}.lil-gui .controller.color input[type=color]{cursor:pointer;height:100%;opacity:0;width:100%}.lil-gui .controller.color input[type=text]{flex-shrink:0;font-family:var(--font-family-mono);margin-left:var(--spacing);min-width:var(--color-input-min-width);width:var(--color-input-width)}.lil-gui .controller.option select{max-width:100%;opacity:0;position:absolute;width:100%}.lil-gui .controller.option .display{background:var(--widget-color);border-radius:var(--widget-border-radius);height:var(--widget-height);line-height:var(--widget-height);max-width:100%;overflow:hidden;padding-left:.55em;padding-right:1.75em;pointer-events:none;position:relative;word-break:break-all}.lil-gui .controller.option .display.active{background:var(--focus-color)}.lil-gui .controller.option .display:after{bottom:0;content:\"↕\";font-family:lil-gui;padding-right:.375em;position:absolute;right:0;top:0}.lil-gui .controller.option .widget,.lil-gui .controller.option select{cursor:pointer}.lil-gui .controller.number input{color:var(--number-color)}.lil-gui .controller.number.hasSlider input{flex-shrink:0;margin-left:var(--spacing);min-width:var(--slider-input-min-width);width:var(--slider-input-width)}.lil-gui .controller.number .slider{background-color:var(--widget-color);border-radius:var(--widget-border-radius);cursor:ew-resize;height:var(--widget-height);overflow:hidden;padding-right:var(--slider-knob-width);touch-action:pan-y;width:100%}.lil-gui .controller.number .slider.active{background-color:var(--focus-color)}.lil-gui .controller.number .slider.active .fill{opacity:.95}.lil-gui .controller.number .fill{border-right:var(--slider-knob-width) solid var(--number-color);box-sizing:content-box;height:100%}.lil-gui-dragging .lil-gui{--hover-color:var(--widget-color)}.lil-gui-dragging *{cursor:ew-resize!important}.lil-gui-dragging.lil-gui-vertical *{cursor:ns-resize!important}.lil-gui .title{--title-height:calc(var(--widget-height) + var(--spacing)*1.25);-webkit-tap-highlight-color:transparent;text-decoration-skip:objects;cursor:pointer;font-weight:600;height:var(--title-height);line-height:calc(var(--title-height) - 4px);outline:none;padding:0 var(--padding)}.lil-gui .title:before{content:\"▾\";display:inline-block;font-family:lil-gui;padding-right:2px}.lil-gui .title:active{background:var(--title-background-color);opacity:.75}.lil-gui.root>.title:focus{text-decoration:none!important}.lil-gui.closed>.title:before{content:\"▸\"}.lil-gui.closed>.children{opacity:0;transform:translateY(-7px)}.lil-gui.closed:not(.transition)>.children{display:none}.lil-gui.transition>.children{overflow:hidden;pointer-events:none;transition-duration:.3s;transition-property:height,opacity,transform;transition-timing-function:cubic-bezier(.2,.6,.35,1)}.lil-gui .children:empty:before{content:\"Empty\";display:block;font-style:italic;height:var(--widget-height);line-height:var(--widget-height);margin:var(--spacing) 0;opacity:.5;padding:0 var(--padding)}.lil-gui.root>.children>.lil-gui>.title{border-width:0;border-bottom:1px solid var(--widget-color);border-left:0 solid var(--widget-color);border-right:0 solid var(--widget-color);border-top:1px solid var(--widget-color);transition:border-color .3s}.lil-gui.root>.children>.lil-gui.closed>.title{border-bottom-color:transparent}.lil-gui+.controller{border-top:1px solid var(--widget-color);margin-top:0;padding-top:var(--spacing)}.lil-gui .lil-gui .lil-gui>.title{border:none}.lil-gui .lil-gui .lil-gui>.children{border:none;border-left:2px solid var(--widget-color);margin-left:var(--folder-indent)}.lil-gui .lil-gui .controller{border:none}.lil-gui input{-webkit-tap-highlight-color:transparent;background:var(--widget-color);border:0;border-radius:var(--widget-border-radius);color:var(--text-color);font-family:var(--font-family);font-size:var(--input-font-size);height:var(--widget-height);outline:none;width:100%}.lil-gui input:disabled{opacity:1}.lil-gui input[type=number],.lil-gui input[type=text]{padding:var(--widget-padding)}.lil-gui input[type=number]:focus,.lil-gui input[type=text]:focus{background:var(--focus-color)}.lil-gui input::-webkit-inner-spin-button,.lil-gui input::-webkit-outer-spin-button{-webkit-appearance:none;margin:0}.lil-gui input[type=number]{-moz-appearance:textfield}.lil-gui input[type=checkbox]{appearance:none;-webkit-appearance:none;border-radius:var(--widget-border-radius);cursor:pointer;height:var(--checkbox-size);text-align:center;width:var(--checkbox-size)}.lil-gui input[type=checkbox]:checked:before{content:\"✓\";font-family:lil-gui;font-size:var(--checkbox-size);line-height:var(--checkbox-size)}.lil-gui button{-webkit-tap-highlight-color:transparent;background:var(--widget-color);border:1px solid var(--widget-color);border-radius:var(--widget-border-radius);color:var(--text-color);cursor:pointer;font-family:var(--font-family);font-size:var(--font-size);height:var(--widget-height);line-height:calc(var(--widget-height) - 4px);outline:none;text-align:center;text-transform:none;width:100%}.lil-gui button:active{background:var(--focus-color)}@font-face{font-family:lil-gui;src:url(\"data:application/font-woff;charset=utf-8;base64,d09GRgABAAAAAAUsAAsAAAAACJwAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAABHU1VCAAABCAAAAH4AAADAImwmYE9TLzIAAAGIAAAAPwAAAGBKqH5SY21hcAAAAcgAAAD0AAACrukyyJBnbHlmAAACvAAAAF8AAACEIZpWH2hlYWQAAAMcAAAAJwAAADZfcj2zaGhlYQAAA0QAAAAYAAAAJAC5AHhobXR4AAADXAAAABAAAABMAZAAAGxvY2EAAANsAAAAFAAAACgCEgIybWF4cAAAA4AAAAAeAAAAIAEfABJuYW1lAAADoAAAASIAAAIK9SUU/XBvc3QAAATEAAAAZgAAAJCTcMc2eJxVjbEOgjAURU+hFRBK1dGRL+ALnAiToyMLEzFpnPz/eAshwSa97517c/MwwJmeB9kwPl+0cf5+uGPZXsqPu4nvZabcSZldZ6kfyWnomFY/eScKqZNWupKJO6kXN3K9uCVoL7iInPr1X5baXs3tjuMqCtzEuagm/AAlzQgPAAB4nGNgYRBlnMDAysDAYM/gBiT5oLQBAwuDJAMDEwMrMwNWEJDmmsJwgCFeXZghBcjlZMgFCzOiKOIFAB71Bb8AeJy1kjFuwkAQRZ+DwRAwBtNQRUGKQ8OdKCAWUhAgKLhIuAsVSpWz5Bbkj3dEgYiUIszqWdpZe+Z7/wB1oCYmIoboiwiLT2WjKl/jscrHfGg/pKdMkyklC5Zs2LEfHYpjcRoPzme9MWWmk3dWbK9ObkWkikOetJ554fWyoEsmdSlt+uR0pCJR34b6t/TVg1SY3sYvdf8vuiKrpyaDXDISiegp17p7579Gp3p++y7HPAiY9pmTibljrr85qSidtlg4+l25GLCaS8e6rRxNBmsnERunKbaOObRz7N72ju5vdAjYpBXHgJylOAVsMseDAPEP8LYoUHicY2BiAAEfhiAGJgZWBgZ7RnFRdnVJELCQlBSRlATJMoLV2DK4glSYs6ubq5vbKrJLSbGrgEmovDuDJVhe3VzcXFwNLCOILB/C4IuQ1xTn5FPilBTj5FPmBAB4WwoqAHicY2BkYGAA4sk1sR/j+W2+MnAzpDBgAyEMQUCSg4EJxAEAwUgFHgB4nGNgZGBgSGFggJMhDIwMqEAYAByHATJ4nGNgAIIUNEwmAABl3AGReJxjYAACIQYlBiMGJ3wQAEcQBEV4nGNgZGBgEGZgY2BiAAEQyQWEDAz/wXwGAAsPATIAAHicXdBNSsNAHAXwl35iA0UQXYnMShfS9GPZA7T7LgIu03SSpkwzYTIt1BN4Ak/gKTyAeCxfw39jZkjymzcvAwmAW/wgwHUEGDb36+jQQ3GXGot79L24jxCP4gHzF/EIr4jEIe7wxhOC3g2TMYy4Q7+Lu/SHuEd/ivt4wJd4wPxbPEKMX3GI5+DJFGaSn4qNzk8mcbKSR6xdXdhSzaOZJGtdapd4vVPbi6rP+cL7TGXOHtXKll4bY1Xl7EGnPtp7Xy2n00zyKLVHfkHBa4IcJ2oD3cgggWvt/V/FbDrUlEUJhTn/0azVWbNTNr0Ens8de1tceK9xZmfB1CPjOmPH4kitmvOubcNpmVTN3oFJyjzCvnmrwhJTzqzVj9jiSX911FjeAAB4nG3HMRKCMBBA0f0giiKi4DU8k0V2GWbIZDOh4PoWWvq6J5V8If9NVNQcaDhyouXMhY4rPTcG7jwYmXhKq8Wz+p762aNaeYXom2n3m2dLTVgsrCgFJ7OTmIkYbwIbC6vIB7WmFfAAAA==\") format(\"woff\")}@media (pointer:coarse){.lil-gui.allow-touch-styles{--widget-height:28px;--padding:6px;--spacing:6px;--font-size:13px;--input-font-size:16px;--folder-indent:10px;--scrollbar-width:7px;--slider-input-min-width:50px;--color-input-min-width:65px}}@media (hover:hover){.lil-gui .controller.color .display:hover:before{border:1px solid #fff9;border-radius:var(--widget-border-radius);bottom:0;content:\" \";display:block;left:0;position:absolute;right:0;top:0}.lil-gui .controller.option .display.focus{background:var(--focus-color)}.lil-gui .controller.option .widget:hover .display{background:var(--hover-color)}.lil-gui .controller.number .slider:hover{background-color:var(--hover-color)}body:not(.lil-gui-dragging) .lil-gui .title:hover{background:var(--title-background-color);opacity:.85}.lil-gui .title:focus{text-decoration:underline var(--focus-color)}.lil-gui input:hover{background:var(--hover-color)}.lil-gui input:active{background:var(--focus-color)}.lil-gui input[type=checkbox]:focus{box-shadow:inset 0 0 0 1px var(--focus-color)}.lil-gui button:hover{background:var(--hover-color);border-color:var(--hover-color)}.lil-gui button:focus{border-color:var(--focus-color)}}'), p = !0), e ? e.appendChild(this.domElement) : i && (this.domElement.classList.add(\"autoPlace\"), document.body.appendChild(this.domElement)), s && this.domElement.style.setProperty(\"--width\", s + \"px\"), this.domElement.addEventListener(\"keydown\", (t)=>t.stopPropagation()), this.domElement.addEventListener(\"keyup\", (t)=>t.stopPropagation());\n    }\n}\n/* harmony default export */ __webpack_exports__[\"default\"] = (g);\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/three/examples/jsm/libs/lil-gui.module.min.js\n"));

/***/ })

});