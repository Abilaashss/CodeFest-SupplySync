"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("app/warehouse-3d/page",{

/***/ "(app-pages-browser)/./src/components/3d/WarehouseSimulation.ts":
/*!**************************************************!*\
  !*** ./src/components/3d/WarehouseSimulation.ts ***!
  \**************************************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   WarehouseSimulation: function() { return /* binding */ WarehouseSimulation; }\n/* harmony export */ });\n/* harmony import */ var three__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! three */ \"(app-pages-browser)/./node_modules/three/build/three.core.js\");\n/* harmony import */ var three_examples_jsm_controls_OrbitControls_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! three/examples/jsm/controls/OrbitControls.js */ \"(app-pages-browser)/./node_modules/three/examples/jsm/controls/OrbitControls.js\");\n/* harmony import */ var three_examples_jsm_libs_lil_gui_module_min_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! three/examples/jsm/libs/lil-gui.module.min.js */ \"(app-pages-browser)/./node_modules/three/examples/jsm/libs/lil-gui.module.min.js\");\n/* harmony import */ var _tweenjs_tween_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @tweenjs/tween.js */ \"(app-pages-browser)/./node_modules/@tweenjs/tween.js/dist/tween.esm.js\");\n\n\n\n\nclass WarehouseSimulation {\n    createWarehouse() {\n        const warehouse = new three__WEBPACK_IMPORTED_MODULE_1__.Group();\n        // Floor\n        const floorGeometry = new three__WEBPACK_IMPORTED_MODULE_1__.PlaneGeometry(40, 30);\n        const floorMaterial = new three__WEBPACK_IMPORTED_MODULE_1__.MeshStandardMaterial({\n            color: 0x808080\n        });\n        const floor = new three__WEBPACK_IMPORTED_MODULE_1__.Mesh(floorGeometry, floorMaterial);\n        floor.rotation.x = -Math.PI / 2;\n        warehouse.add(floor);\n        // Walls\n        const wallMaterial = new three__WEBPACK_IMPORTED_MODULE_1__.MeshStandardMaterial({\n            color: 0xcccccc\n        });\n        const wallGeometry = new three__WEBPACK_IMPORTED_MODULE_1__.BoxGeometry(40, 10, 0.2);\n        const backWall = new three__WEBPACK_IMPORTED_MODULE_1__.Mesh(wallGeometry, wallMaterial);\n        backWall.position.set(0, 5, -15);\n        warehouse.add(backWall);\n        const sideWall1 = new three__WEBPACK_IMPORTED_MODULE_1__.Mesh(wallGeometry, wallMaterial);\n        sideWall1.rotation.y = Math.PI / 2;\n        sideWall1.position.set(-20, 5, 0);\n        warehouse.add(sideWall1);\n        const sideWall2 = new three__WEBPACK_IMPORTED_MODULE_1__.Mesh(wallGeometry, wallMaterial);\n        sideWall2.rotation.y = Math.PI / 2;\n        sideWall2.position.set(20, 5, 0);\n        warehouse.add(sideWall2);\n        this.scene.add(warehouse);\n        return warehouse;\n    }\n    createZones() {\n        const zonesGroup = new three__WEBPACK_IMPORTED_MODULE_1__.Group();\n        // Create 5 zone units\n        for(let i = 0; i < 5; i++){\n            const zoneUnit = this.createZoneUnit();\n            zoneUnit.position.set(-16 + i * 8, 0, -12);\n            zonesGroup.add(zoneUnit);\n        }\n        this.scene.add(zonesGroup);\n        return zonesGroup;\n    }\n    createZoneUnit() {\n        const zoneUnit = new three__WEBPACK_IMPORTED_MODULE_1__.Group();\n        const shelfMaterial = new three__WEBPACK_IMPORTED_MODULE_1__.MeshStandardMaterial({\n            color: 0x8B4513\n        });\n        // Create vertical supports\n        const supportGeometry = new three__WEBPACK_IMPORTED_MODULE_1__.BoxGeometry(0.2, 8, 0.2);\n        for(let i = 0; i < 4; i++){\n            const support = new three__WEBPACK_IMPORTED_MODULE_1__.Mesh(supportGeometry, shelfMaterial);\n            support.position.set(i < 2 ? -1 : 1, 4, i % 2 ? -1 : 1);\n            zoneUnit.add(support);\n        }\n        // Create horizontal shelves\n        const shelfGeometry = new three__WEBPACK_IMPORTED_MODULE_1__.BoxGeometry(2.2, 0.2, 2.2);\n        for(let i = 0; i < 4; i++){\n            const shelf = new three__WEBPACK_IMPORTED_MODULE_1__.Mesh(shelfGeometry, shelfMaterial);\n            shelf.position.set(0, i * 2.5, 0);\n            zoneUnit.add(shelf);\n        }\n        return zoneUnit;\n    }\n    createZoneLabels() {\n        this.zoneLabels.forEach((label)=>{\n            if (label.parentElement) {\n                label.parentElement.removeChild(label);\n            }\n        });\n        this.zoneLabels = [];\n        for(let i = 0; i < 5; i++){\n            const label = document.createElement(\"div\");\n            label.className = \"zone-label\";\n            label.textContent = \"Zone \".concat(i + 1);\n            document.body.appendChild(label);\n            this.zoneLabels.push(label);\n        }\n    }\n    updateZoneLabels() {\n        this.zones.children.forEach((zone, index)=>{\n            const position = new three__WEBPACK_IMPORTED_MODULE_1__.Vector3();\n            position.setFromMatrixPosition(zone.matrixWorld);\n            position.y += 8;\n            const screenPosition = position.project(this.camera);\n            const x = (screenPosition.x * 0.5 + 0.5) * window.innerWidth;\n            const y = (-screenPosition.y * 0.5 + 0.5) * window.innerHeight;\n            if (this.zoneLabels[index]) {\n                this.zoneLabels[index].style.transform = \"translate(-50%, -50%) translate(\".concat(x, \"px, \").concat(y, \"px)\");\n            }\n        });\n    }\n    setupGUI() {\n        const params = {\n            productType: \"wheel\",\n            zone: 0,\n            addProduct: ()=>this.addProductToZone()\n        };\n        this.gui.add(params, \"productType\", Object.keys(this.products)).onChange((value)=>this.currentProductType = value);\n        const zoneOptions = {};\n        for(let i = 1; i <= 5; i++){\n            zoneOptions[\"Zone \".concat(i)] = i - 1;\n        }\n        this.gui.add(params, \"zone\", zoneOptions).onChange((value)=>this.selectedZone = value);\n        this.gui.add(params, \"addProduct\");\n    }\n    addProductToZone() {\n        var _this_inventory_get;\n        const product = this.createProduct(this.currentProductType);\n        product.position.set(0, 10, 0) // Start above the warehouse\n        ;\n        this.scene.add(product);\n        const zonePosition = this.zones.children[this.selectedZone].position.clone();\n        zonePosition.y += 2 // Adjust height to place on zone\n        ;\n        new _tweenjs_tween_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].Tween(product.position).to({\n            x: zonePosition.x,\n            y: zonePosition.y,\n            z: zonePosition.z\n        }, 1000).easing(_tweenjs_tween_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].Easing.Quadratic.Out).start();\n        if (!this.inventory.has(this.selectedZone)) {\n            this.inventory.set(this.selectedZone, []);\n        }\n        (_this_inventory_get = this.inventory.get(this.selectedZone)) === null || _this_inventory_get === void 0 ? void 0 : _this_inventory_get.push(product);\n    }\n    createProduct(type) {\n        const productInfo = this.products[type];\n        let geometry;\n        switch(type){\n            case \"wheel\":\n                geometry = new three__WEBPACK_IMPORTED_MODULE_1__.TorusGeometry(0.5, 0.2, 16, 32);\n                break;\n            case \"door\":\n                geometry = new three__WEBPACK_IMPORTED_MODULE_1__.BoxGeometry(1.5, 2, 0.1);\n                break;\n            case \"headlight\":\n                geometry = new three__WEBPACK_IMPORTED_MODULE_1__.SphereGeometry(0.3, 16, 16);\n                break;\n            default:\n                geometry = new three__WEBPACK_IMPORTED_MODULE_1__.BoxGeometry(1, 1, 1);\n        }\n        const material = new three__WEBPACK_IMPORTED_MODULE_1__.MeshStandardMaterial({\n            color: productInfo.color\n        });\n        const product = new three__WEBPACK_IMPORTED_MODULE_1__.Mesh(geometry, material);\n        product.castShadow = true;\n        return product;\n    }\n    animate() {\n        this.controls.update();\n        this.updateZoneLabels();\n        _tweenjs_tween_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].update();\n        this.renderer.render(this.scene, this.camera);\n    }\n    dispose() {\n        this.gui.destroy();\n        this.zoneLabels.forEach((label)=>{\n            if (label.parentElement) {\n                label.parentElement.removeChild(label);\n            }\n        });\n        this.scene.traverse((object)=>{\n            if (object instanceof three__WEBPACK_IMPORTED_MODULE_1__.Mesh) {\n                object.geometry.dispose();\n                if (object.material instanceof three__WEBPACK_IMPORTED_MODULE_1__.Material) {\n                    object.material.dispose();\n                }\n            }\n        });\n        this.inventory.clear();\n    }\n    constructor(scene, camera, renderer){\n        this.scene = scene;\n        this.camera = camera;\n        this.renderer = renderer;\n        this.inventory = new Map();\n        this.zoneLabels = [];\n        this.currentProductType = \"wheel\";\n        this.selectedZone = 0;\n        // Product types and their properties\n        this.products = {\n            \"wheel\": {\n                color: 0x444444,\n                size: 1\n            },\n            \"door\": {\n                color: 0x666666,\n                size: 2\n            },\n            \"headlight\": {\n                color: 0xcccccc,\n                size: 0.5\n            }\n        };\n        // Setup controls\n        this.controls = new three_examples_jsm_controls_OrbitControls_js__WEBPACK_IMPORTED_MODULE_2__.OrbitControls(camera, renderer.domElement);\n        // Lighting\n        const ambientLight = new three__WEBPACK_IMPORTED_MODULE_1__.AmbientLight(0xffffff, 0.5);\n        scene.add(ambientLight);\n        const directionalLight = new three__WEBPACK_IMPORTED_MODULE_1__.DirectionalLight(0xffffff, 0.5);\n        directionalLight.position.set(10, 10, 10);\n        scene.add(directionalLight);\n        // Create warehouse elements\n        this.warehouse = this.createWarehouse();\n        this.zones = this.createZones();\n        this.createZoneLabels();\n        // Setup GUI\n        this.gui = new three_examples_jsm_libs_lil_gui_module_min_js__WEBPACK_IMPORTED_MODULE_3__.GUI();\n        this.setupGUI();\n    }\n}\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./src/components/3d/WarehouseSimulation.ts\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/three/examples/jsm/controls/OrbitControls.js":
/*!*******************************************************************!*\
  !*** ./node_modules/three/examples/jsm/controls/OrbitControls.js ***!
  \*******************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   OrbitControls: function() { return /* binding */ OrbitControls; }\n/* harmony export */ });\n/* harmony import */ var three__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! three */ \"(app-pages-browser)/./node_modules/three/build/three.core.js\");\n\n// OrbitControls performs orbiting, dollying (zooming), and panning.\n// Unlike TrackballControls, it maintains the \"up\" direction object.up (+Y by default).\n//\n//    Orbit - left mouse / touch: one-finger move\n//    Zoom - middle mouse, or mousewheel / touch: two-finger spread or squish\n//    Pan - right mouse, or left mouse + ctrl/meta/shiftKey, or arrow keys / touch: two-finger move\nconst _changeEvent = {\n    type: \"change\"\n};\nconst _startEvent = {\n    type: \"start\"\n};\nconst _endEvent = {\n    type: \"end\"\n};\nconst _ray = new three__WEBPACK_IMPORTED_MODULE_0__.Ray();\nconst _plane = new three__WEBPACK_IMPORTED_MODULE_0__.Plane();\nconst _TILT_LIMIT = Math.cos(70 * three__WEBPACK_IMPORTED_MODULE_0__.MathUtils.DEG2RAD);\nconst _v = new three__WEBPACK_IMPORTED_MODULE_0__.Vector3();\nconst _twoPI = 2 * Math.PI;\nconst _STATE = {\n    NONE: -1,\n    ROTATE: 0,\n    DOLLY: 1,\n    PAN: 2,\n    TOUCH_ROTATE: 3,\n    TOUCH_PAN: 4,\n    TOUCH_DOLLY_PAN: 5,\n    TOUCH_DOLLY_ROTATE: 6\n};\nconst _EPS = 0.000001;\nclass OrbitControls extends three__WEBPACK_IMPORTED_MODULE_0__.Controls {\n    connect() {\n        this.domElement.addEventListener(\"pointerdown\", this._onPointerDown);\n        this.domElement.addEventListener(\"pointercancel\", this._onPointerUp);\n        this.domElement.addEventListener(\"contextmenu\", this._onContextMenu);\n        this.domElement.addEventListener(\"wheel\", this._onMouseWheel, {\n            passive: false\n        });\n        const document = this.domElement.getRootNode(); // offscreen canvas compatibility\n        document.addEventListener(\"keydown\", this._interceptControlDown, {\n            passive: true,\n            capture: true\n        });\n        this.domElement.style.touchAction = \"none\"; // disable touch scroll\n    }\n    disconnect() {\n        this.domElement.removeEventListener(\"pointerdown\", this._onPointerDown);\n        this.domElement.removeEventListener(\"pointermove\", this._onPointerMove);\n        this.domElement.removeEventListener(\"pointerup\", this._onPointerUp);\n        this.domElement.removeEventListener(\"pointercancel\", this._onPointerUp);\n        this.domElement.removeEventListener(\"wheel\", this._onMouseWheel);\n        this.domElement.removeEventListener(\"contextmenu\", this._onContextMenu);\n        this.stopListenToKeyEvents();\n        const document = this.domElement.getRootNode(); // offscreen canvas compatibility\n        document.removeEventListener(\"keydown\", this._interceptControlDown, {\n            capture: true\n        });\n        this.domElement.style.touchAction = \"auto\";\n    }\n    dispose() {\n        this.disconnect();\n    }\n    getPolarAngle() {\n        return this._spherical.phi;\n    }\n    getAzimuthalAngle() {\n        return this._spherical.theta;\n    }\n    getDistance() {\n        return this.object.position.distanceTo(this.target);\n    }\n    listenToKeyEvents(domElement) {\n        domElement.addEventListener(\"keydown\", this._onKeyDown);\n        this._domElementKeyEvents = domElement;\n    }\n    stopListenToKeyEvents() {\n        if (this._domElementKeyEvents !== null) {\n            this._domElementKeyEvents.removeEventListener(\"keydown\", this._onKeyDown);\n            this._domElementKeyEvents = null;\n        }\n    }\n    saveState() {\n        this.target0.copy(this.target);\n        this.position0.copy(this.object.position);\n        this.zoom0 = this.object.zoom;\n    }\n    reset() {\n        this.target.copy(this.target0);\n        this.object.position.copy(this.position0);\n        this.object.zoom = this.zoom0;\n        this.object.updateProjectionMatrix();\n        this.dispatchEvent(_changeEvent);\n        this.update();\n        this.state = _STATE.NONE;\n    }\n    update() {\n        let deltaTime = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : null;\n        const position = this.object.position;\n        _v.copy(position).sub(this.target);\n        // rotate offset to \"y-axis-is-up\" space\n        _v.applyQuaternion(this._quat);\n        // angle from z-axis around y-axis\n        this._spherical.setFromVector3(_v);\n        if (this.autoRotate && this.state === _STATE.NONE) {\n            this._rotateLeft(this._getAutoRotationAngle(deltaTime));\n        }\n        if (this.enableDamping) {\n            this._spherical.theta += this._sphericalDelta.theta * this.dampingFactor;\n            this._spherical.phi += this._sphericalDelta.phi * this.dampingFactor;\n        } else {\n            this._spherical.theta += this._sphericalDelta.theta;\n            this._spherical.phi += this._sphericalDelta.phi;\n        }\n        // restrict theta to be between desired limits\n        let min = this.minAzimuthAngle;\n        let max = this.maxAzimuthAngle;\n        if (isFinite(min) && isFinite(max)) {\n            if (min < -Math.PI) min += _twoPI;\n            else if (min > Math.PI) min -= _twoPI;\n            if (max < -Math.PI) max += _twoPI;\n            else if (max > Math.PI) max -= _twoPI;\n            if (min <= max) {\n                this._spherical.theta = Math.max(min, Math.min(max, this._spherical.theta));\n            } else {\n                this._spherical.theta = this._spherical.theta > (min + max) / 2 ? Math.max(min, this._spherical.theta) : Math.min(max, this._spherical.theta);\n            }\n        }\n        // restrict phi to be between desired limits\n        this._spherical.phi = Math.max(this.minPolarAngle, Math.min(this.maxPolarAngle, this._spherical.phi));\n        this._spherical.makeSafe();\n        // move target to panned location\n        if (this.enableDamping === true) {\n            this.target.addScaledVector(this._panOffset, this.dampingFactor);\n        } else {\n            this.target.add(this._panOffset);\n        }\n        // Limit the target distance from the cursor to create a sphere around the center of interest\n        this.target.sub(this.cursor);\n        this.target.clampLength(this.minTargetRadius, this.maxTargetRadius);\n        this.target.add(this.cursor);\n        let zoomChanged = false;\n        // adjust the camera position based on zoom only if we're not zooming to the cursor or if it's an ortho camera\n        // we adjust zoom later in these cases\n        if (this.zoomToCursor && this._performCursorZoom || this.object.isOrthographicCamera) {\n            this._spherical.radius = this._clampDistance(this._spherical.radius);\n        } else {\n            const prevRadius = this._spherical.radius;\n            this._spherical.radius = this._clampDistance(this._spherical.radius * this._scale);\n            zoomChanged = prevRadius != this._spherical.radius;\n        }\n        _v.setFromSpherical(this._spherical);\n        // rotate offset back to \"camera-up-vector-is-up\" space\n        _v.applyQuaternion(this._quatInverse);\n        position.copy(this.target).add(_v);\n        this.object.lookAt(this.target);\n        if (this.enableDamping === true) {\n            this._sphericalDelta.theta *= 1 - this.dampingFactor;\n            this._sphericalDelta.phi *= 1 - this.dampingFactor;\n            this._panOffset.multiplyScalar(1 - this.dampingFactor);\n        } else {\n            this._sphericalDelta.set(0, 0, 0);\n            this._panOffset.set(0, 0, 0);\n        }\n        // adjust camera position\n        if (this.zoomToCursor && this._performCursorZoom) {\n            let newRadius = null;\n            if (this.object.isPerspectiveCamera) {\n                // move the camera down the pointer ray\n                // this method avoids floating point error\n                const prevRadius = _v.length();\n                newRadius = this._clampDistance(prevRadius * this._scale);\n                const radiusDelta = prevRadius - newRadius;\n                this.object.position.addScaledVector(this._dollyDirection, radiusDelta);\n                this.object.updateMatrixWorld();\n                zoomChanged = !!radiusDelta;\n            } else if (this.object.isOrthographicCamera) {\n                // adjust the ortho camera position based on zoom changes\n                const mouseBefore = new three__WEBPACK_IMPORTED_MODULE_0__.Vector3(this._mouse.x, this._mouse.y, 0);\n                mouseBefore.unproject(this.object);\n                const prevZoom = this.object.zoom;\n                this.object.zoom = Math.max(this.minZoom, Math.min(this.maxZoom, this.object.zoom / this._scale));\n                this.object.updateProjectionMatrix();\n                zoomChanged = prevZoom !== this.object.zoom;\n                const mouseAfter = new three__WEBPACK_IMPORTED_MODULE_0__.Vector3(this._mouse.x, this._mouse.y, 0);\n                mouseAfter.unproject(this.object);\n                this.object.position.sub(mouseAfter).add(mouseBefore);\n                this.object.updateMatrixWorld();\n                newRadius = _v.length();\n            } else {\n                console.warn(\"WARNING: OrbitControls.js encountered an unknown camera type - zoom to cursor disabled.\");\n                this.zoomToCursor = false;\n            }\n            // handle the placement of the target\n            if (newRadius !== null) {\n                if (this.screenSpacePanning) {\n                    // position the orbit target in front of the new camera position\n                    this.target.set(0, 0, -1).transformDirection(this.object.matrix).multiplyScalar(newRadius).add(this.object.position);\n                } else {\n                    // get the ray and translation plane to compute target\n                    _ray.origin.copy(this.object.position);\n                    _ray.direction.set(0, 0, -1).transformDirection(this.object.matrix);\n                    // if the camera is 20 degrees above the horizon then don't adjust the focus target to avoid\n                    // extremely large values\n                    if (Math.abs(this.object.up.dot(_ray.direction)) < _TILT_LIMIT) {\n                        this.object.lookAt(this.target);\n                    } else {\n                        _plane.setFromNormalAndCoplanarPoint(this.object.up, this.target);\n                        _ray.intersectPlane(_plane, this.target);\n                    }\n                }\n            }\n        } else if (this.object.isOrthographicCamera) {\n            const prevZoom = this.object.zoom;\n            this.object.zoom = Math.max(this.minZoom, Math.min(this.maxZoom, this.object.zoom / this._scale));\n            if (prevZoom !== this.object.zoom) {\n                this.object.updateProjectionMatrix();\n                zoomChanged = true;\n            }\n        }\n        this._scale = 1;\n        this._performCursorZoom = false;\n        // update condition is:\n        // min(camera displacement, camera rotation in radians)^2 > EPS\n        // using small-angle approximation cos(x/2) = 1 - x^2 / 8\n        if (zoomChanged || this._lastPosition.distanceToSquared(this.object.position) > _EPS || 8 * (1 - this._lastQuaternion.dot(this.object.quaternion)) > _EPS || this._lastTargetPosition.distanceToSquared(this.target) > _EPS) {\n            this.dispatchEvent(_changeEvent);\n            this._lastPosition.copy(this.object.position);\n            this._lastQuaternion.copy(this.object.quaternion);\n            this._lastTargetPosition.copy(this.target);\n            return true;\n        }\n        return false;\n    }\n    _getAutoRotationAngle(deltaTime) {\n        if (deltaTime !== null) {\n            return _twoPI / 60 * this.autoRotateSpeed * deltaTime;\n        } else {\n            return _twoPI / 60 / 60 * this.autoRotateSpeed;\n        }\n    }\n    _getZoomScale(delta) {\n        const normalizedDelta = Math.abs(delta * 0.01);\n        return Math.pow(0.95, this.zoomSpeed * normalizedDelta);\n    }\n    _rotateLeft(angle) {\n        this._sphericalDelta.theta -= angle;\n    }\n    _rotateUp(angle) {\n        this._sphericalDelta.phi -= angle;\n    }\n    _panLeft(distance, objectMatrix) {\n        _v.setFromMatrixColumn(objectMatrix, 0); // get X column of objectMatrix\n        _v.multiplyScalar(-distance);\n        this._panOffset.add(_v);\n    }\n    _panUp(distance, objectMatrix) {\n        if (this.screenSpacePanning === true) {\n            _v.setFromMatrixColumn(objectMatrix, 1);\n        } else {\n            _v.setFromMatrixColumn(objectMatrix, 0);\n            _v.crossVectors(this.object.up, _v);\n        }\n        _v.multiplyScalar(distance);\n        this._panOffset.add(_v);\n    }\n    // deltaX and deltaY are in pixels; right and down are positive\n    _pan(deltaX, deltaY) {\n        const element = this.domElement;\n        if (this.object.isPerspectiveCamera) {\n            // perspective\n            const position = this.object.position;\n            _v.copy(position).sub(this.target);\n            let targetDistance = _v.length();\n            // half of the fov is center to top of screen\n            targetDistance *= Math.tan(this.object.fov / 2 * Math.PI / 180.0);\n            // we use only clientHeight here so aspect ratio does not distort speed\n            this._panLeft(2 * deltaX * targetDistance / element.clientHeight, this.object.matrix);\n            this._panUp(2 * deltaY * targetDistance / element.clientHeight, this.object.matrix);\n        } else if (this.object.isOrthographicCamera) {\n            // orthographic\n            this._panLeft(deltaX * (this.object.right - this.object.left) / this.object.zoom / element.clientWidth, this.object.matrix);\n            this._panUp(deltaY * (this.object.top - this.object.bottom) / this.object.zoom / element.clientHeight, this.object.matrix);\n        } else {\n            // camera neither orthographic nor perspective\n            console.warn(\"WARNING: OrbitControls.js encountered an unknown camera type - pan disabled.\");\n            this.enablePan = false;\n        }\n    }\n    _dollyOut(dollyScale) {\n        if (this.object.isPerspectiveCamera || this.object.isOrthographicCamera) {\n            this._scale /= dollyScale;\n        } else {\n            console.warn(\"WARNING: OrbitControls.js encountered an unknown camera type - dolly/zoom disabled.\");\n            this.enableZoom = false;\n        }\n    }\n    _dollyIn(dollyScale) {\n        if (this.object.isPerspectiveCamera || this.object.isOrthographicCamera) {\n            this._scale *= dollyScale;\n        } else {\n            console.warn(\"WARNING: OrbitControls.js encountered an unknown camera type - dolly/zoom disabled.\");\n            this.enableZoom = false;\n        }\n    }\n    _updateZoomParameters(x, y) {\n        if (!this.zoomToCursor) {\n            return;\n        }\n        this._performCursorZoom = true;\n        const rect = this.domElement.getBoundingClientRect();\n        const dx = x - rect.left;\n        const dy = y - rect.top;\n        const w = rect.width;\n        const h = rect.height;\n        this._mouse.x = dx / w * 2 - 1;\n        this._mouse.y = -(dy / h) * 2 + 1;\n        this._dollyDirection.set(this._mouse.x, this._mouse.y, 1).unproject(this.object).sub(this.object.position).normalize();\n    }\n    _clampDistance(dist) {\n        return Math.max(this.minDistance, Math.min(this.maxDistance, dist));\n    }\n    //\n    // event callbacks - update the object state\n    //\n    _handleMouseDownRotate(event) {\n        this._rotateStart.set(event.clientX, event.clientY);\n    }\n    _handleMouseDownDolly(event) {\n        this._updateZoomParameters(event.clientX, event.clientX);\n        this._dollyStart.set(event.clientX, event.clientY);\n    }\n    _handleMouseDownPan(event) {\n        this._panStart.set(event.clientX, event.clientY);\n    }\n    _handleMouseMoveRotate(event) {\n        this._rotateEnd.set(event.clientX, event.clientY);\n        this._rotateDelta.subVectors(this._rotateEnd, this._rotateStart).multiplyScalar(this.rotateSpeed);\n        const element = this.domElement;\n        this._rotateLeft(_twoPI * this._rotateDelta.x / element.clientHeight); // yes, height\n        this._rotateUp(_twoPI * this._rotateDelta.y / element.clientHeight);\n        this._rotateStart.copy(this._rotateEnd);\n        this.update();\n    }\n    _handleMouseMoveDolly(event) {\n        this._dollyEnd.set(event.clientX, event.clientY);\n        this._dollyDelta.subVectors(this._dollyEnd, this._dollyStart);\n        if (this._dollyDelta.y > 0) {\n            this._dollyOut(this._getZoomScale(this._dollyDelta.y));\n        } else if (this._dollyDelta.y < 0) {\n            this._dollyIn(this._getZoomScale(this._dollyDelta.y));\n        }\n        this._dollyStart.copy(this._dollyEnd);\n        this.update();\n    }\n    _handleMouseMovePan(event) {\n        this._panEnd.set(event.clientX, event.clientY);\n        this._panDelta.subVectors(this._panEnd, this._panStart).multiplyScalar(this.panSpeed);\n        this._pan(this._panDelta.x, this._panDelta.y);\n        this._panStart.copy(this._panEnd);\n        this.update();\n    }\n    _handleMouseWheel(event) {\n        this._updateZoomParameters(event.clientX, event.clientY);\n        if (event.deltaY < 0) {\n            this._dollyIn(this._getZoomScale(event.deltaY));\n        } else if (event.deltaY > 0) {\n            this._dollyOut(this._getZoomScale(event.deltaY));\n        }\n        this.update();\n    }\n    _handleKeyDown(event) {\n        let needsUpdate = false;\n        switch(event.code){\n            case this.keys.UP:\n                if (event.ctrlKey || event.metaKey || event.shiftKey) {\n                    if (this.enableRotate) {\n                        this._rotateUp(_twoPI * this.keyRotateSpeed / this.domElement.clientHeight);\n                    }\n                } else {\n                    if (this.enablePan) {\n                        this._pan(0, this.keyPanSpeed);\n                    }\n                }\n                needsUpdate = true;\n                break;\n            case this.keys.BOTTOM:\n                if (event.ctrlKey || event.metaKey || event.shiftKey) {\n                    if (this.enableRotate) {\n                        this._rotateUp(-_twoPI * this.keyRotateSpeed / this.domElement.clientHeight);\n                    }\n                } else {\n                    if (this.enablePan) {\n                        this._pan(0, -this.keyPanSpeed);\n                    }\n                }\n                needsUpdate = true;\n                break;\n            case this.keys.LEFT:\n                if (event.ctrlKey || event.metaKey || event.shiftKey) {\n                    if (this.enableRotate) {\n                        this._rotateLeft(_twoPI * this.keyRotateSpeed / this.domElement.clientHeight);\n                    }\n                } else {\n                    if (this.enablePan) {\n                        this._pan(this.keyPanSpeed, 0);\n                    }\n                }\n                needsUpdate = true;\n                break;\n            case this.keys.RIGHT:\n                if (event.ctrlKey || event.metaKey || event.shiftKey) {\n                    if (this.enableRotate) {\n                        this._rotateLeft(-_twoPI * this.keyRotateSpeed / this.domElement.clientHeight);\n                    }\n                } else {\n                    if (this.enablePan) {\n                        this._pan(-this.keyPanSpeed, 0);\n                    }\n                }\n                needsUpdate = true;\n                break;\n        }\n        if (needsUpdate) {\n            // prevent the browser from scrolling on cursor keys\n            event.preventDefault();\n            this.update();\n        }\n    }\n    _handleTouchStartRotate(event) {\n        if (this._pointers.length === 1) {\n            this._rotateStart.set(event.pageX, event.pageY);\n        } else {\n            const position = this._getSecondPointerPosition(event);\n            const x = 0.5 * (event.pageX + position.x);\n            const y = 0.5 * (event.pageY + position.y);\n            this._rotateStart.set(x, y);\n        }\n    }\n    _handleTouchStartPan(event) {\n        if (this._pointers.length === 1) {\n            this._panStart.set(event.pageX, event.pageY);\n        } else {\n            const position = this._getSecondPointerPosition(event);\n            const x = 0.5 * (event.pageX + position.x);\n            const y = 0.5 * (event.pageY + position.y);\n            this._panStart.set(x, y);\n        }\n    }\n    _handleTouchStartDolly(event) {\n        const position = this._getSecondPointerPosition(event);\n        const dx = event.pageX - position.x;\n        const dy = event.pageY - position.y;\n        const distance = Math.sqrt(dx * dx + dy * dy);\n        this._dollyStart.set(0, distance);\n    }\n    _handleTouchStartDollyPan(event) {\n        if (this.enableZoom) this._handleTouchStartDolly(event);\n        if (this.enablePan) this._handleTouchStartPan(event);\n    }\n    _handleTouchStartDollyRotate(event) {\n        if (this.enableZoom) this._handleTouchStartDolly(event);\n        if (this.enableRotate) this._handleTouchStartRotate(event);\n    }\n    _handleTouchMoveRotate(event) {\n        if (this._pointers.length == 1) {\n            this._rotateEnd.set(event.pageX, event.pageY);\n        } else {\n            const position = this._getSecondPointerPosition(event);\n            const x = 0.5 * (event.pageX + position.x);\n            const y = 0.5 * (event.pageY + position.y);\n            this._rotateEnd.set(x, y);\n        }\n        this._rotateDelta.subVectors(this._rotateEnd, this._rotateStart).multiplyScalar(this.rotateSpeed);\n        const element = this.domElement;\n        this._rotateLeft(_twoPI * this._rotateDelta.x / element.clientHeight); // yes, height\n        this._rotateUp(_twoPI * this._rotateDelta.y / element.clientHeight);\n        this._rotateStart.copy(this._rotateEnd);\n    }\n    _handleTouchMovePan(event) {\n        if (this._pointers.length === 1) {\n            this._panEnd.set(event.pageX, event.pageY);\n        } else {\n            const position = this._getSecondPointerPosition(event);\n            const x = 0.5 * (event.pageX + position.x);\n            const y = 0.5 * (event.pageY + position.y);\n            this._panEnd.set(x, y);\n        }\n        this._panDelta.subVectors(this._panEnd, this._panStart).multiplyScalar(this.panSpeed);\n        this._pan(this._panDelta.x, this._panDelta.y);\n        this._panStart.copy(this._panEnd);\n    }\n    _handleTouchMoveDolly(event) {\n        const position = this._getSecondPointerPosition(event);\n        const dx = event.pageX - position.x;\n        const dy = event.pageY - position.y;\n        const distance = Math.sqrt(dx * dx + dy * dy);\n        this._dollyEnd.set(0, distance);\n        this._dollyDelta.set(0, Math.pow(this._dollyEnd.y / this._dollyStart.y, this.zoomSpeed));\n        this._dollyOut(this._dollyDelta.y);\n        this._dollyStart.copy(this._dollyEnd);\n        const centerX = (event.pageX + position.x) * 0.5;\n        const centerY = (event.pageY + position.y) * 0.5;\n        this._updateZoomParameters(centerX, centerY);\n    }\n    _handleTouchMoveDollyPan(event) {\n        if (this.enableZoom) this._handleTouchMoveDolly(event);\n        if (this.enablePan) this._handleTouchMovePan(event);\n    }\n    _handleTouchMoveDollyRotate(event) {\n        if (this.enableZoom) this._handleTouchMoveDolly(event);\n        if (this.enableRotate) this._handleTouchMoveRotate(event);\n    }\n    // pointers\n    _addPointer(event) {\n        this._pointers.push(event.pointerId);\n    }\n    _removePointer(event) {\n        delete this._pointerPositions[event.pointerId];\n        for(let i = 0; i < this._pointers.length; i++){\n            if (this._pointers[i] == event.pointerId) {\n                this._pointers.splice(i, 1);\n                return;\n            }\n        }\n    }\n    _isTrackingPointer(event) {\n        for(let i = 0; i < this._pointers.length; i++){\n            if (this._pointers[i] == event.pointerId) return true;\n        }\n        return false;\n    }\n    _trackPointer(event) {\n        let position = this._pointerPositions[event.pointerId];\n        if (position === undefined) {\n            position = new three__WEBPACK_IMPORTED_MODULE_0__.Vector2();\n            this._pointerPositions[event.pointerId] = position;\n        }\n        position.set(event.pageX, event.pageY);\n    }\n    _getSecondPointerPosition(event) {\n        const pointerId = event.pointerId === this._pointers[0] ? this._pointers[1] : this._pointers[0];\n        return this._pointerPositions[pointerId];\n    }\n    //\n    _customWheelEvent(event) {\n        const mode = event.deltaMode;\n        // minimal wheel event altered to meet delta-zoom demand\n        const newEvent = {\n            clientX: event.clientX,\n            clientY: event.clientY,\n            deltaY: event.deltaY\n        };\n        switch(mode){\n            case 1:\n                newEvent.deltaY *= 16;\n                break;\n            case 2:\n                newEvent.deltaY *= 100;\n                break;\n        }\n        // detect if event was triggered by pinching\n        if (event.ctrlKey && !this._controlActive) {\n            newEvent.deltaY *= 10;\n        }\n        return newEvent;\n    }\n    constructor(object, domElement = null){\n        super(object, domElement);\n        this.state = _STATE.NONE;\n        // Set to false to disable this control\n        this.enabled = true;\n        // \"target\" sets the location of focus, where the object orbits around\n        this.target = new three__WEBPACK_IMPORTED_MODULE_0__.Vector3();\n        // Sets the 3D cursor (similar to Blender), from which the maxTargetRadius takes effect\n        this.cursor = new three__WEBPACK_IMPORTED_MODULE_0__.Vector3();\n        // How far you can dolly in and out ( PerspectiveCamera only )\n        this.minDistance = 0;\n        this.maxDistance = Infinity;\n        // How far you can zoom in and out ( OrthographicCamera only )\n        this.minZoom = 0;\n        this.maxZoom = Infinity;\n        // Limit camera target within a spherical area around the cursor\n        this.minTargetRadius = 0;\n        this.maxTargetRadius = Infinity;\n        // How far you can orbit vertically, upper and lower limits.\n        // Range is 0 to Math.PI radians.\n        this.minPolarAngle = 0; // radians\n        this.maxPolarAngle = Math.PI; // radians\n        // How far you can orbit horizontally, upper and lower limits.\n        // If set, the interval [ min, max ] must be a sub-interval of [ - 2 PI, 2 PI ], with ( max - min < 2 PI )\n        this.minAzimuthAngle = -Infinity; // radians\n        this.maxAzimuthAngle = Infinity; // radians\n        // Set to true to enable damping (inertia)\n        // If damping is enabled, you must call controls.update() in your animation loop\n        this.enableDamping = false;\n        this.dampingFactor = 0.05;\n        // This option actually enables dollying in and out; left as \"zoom\" for backwards compatibility.\n        // Set to false to disable zooming\n        this.enableZoom = true;\n        this.zoomSpeed = 1.0;\n        // Set to false to disable rotating\n        this.enableRotate = true;\n        this.rotateSpeed = 1.0;\n        this.keyRotateSpeed = 1.0;\n        // Set to false to disable panning\n        this.enablePan = true;\n        this.panSpeed = 1.0;\n        this.screenSpacePanning = true; // if false, pan orthogonal to world-space direction camera.up\n        this.keyPanSpeed = 7.0; // pixels moved per arrow key push\n        this.zoomToCursor = false;\n        // Set to true to automatically rotate around the target\n        // If auto-rotate is enabled, you must call controls.update() in your animation loop\n        this.autoRotate = false;\n        this.autoRotateSpeed = 2.0; // 30 seconds per orbit when fps is 60\n        // The four arrow keys\n        this.keys = {\n            LEFT: \"ArrowLeft\",\n            UP: \"ArrowUp\",\n            RIGHT: \"ArrowRight\",\n            BOTTOM: \"ArrowDown\"\n        };\n        // Mouse buttons\n        this.mouseButtons = {\n            LEFT: three__WEBPACK_IMPORTED_MODULE_0__.MOUSE.ROTATE,\n            MIDDLE: three__WEBPACK_IMPORTED_MODULE_0__.MOUSE.DOLLY,\n            RIGHT: three__WEBPACK_IMPORTED_MODULE_0__.MOUSE.PAN\n        };\n        // Touch fingers\n        this.touches = {\n            ONE: three__WEBPACK_IMPORTED_MODULE_0__.TOUCH.ROTATE,\n            TWO: three__WEBPACK_IMPORTED_MODULE_0__.TOUCH.DOLLY_PAN\n        };\n        // for reset\n        this.target0 = this.target.clone();\n        this.position0 = this.object.position.clone();\n        this.zoom0 = this.object.zoom;\n        // the target DOM element for key events\n        this._domElementKeyEvents = null;\n        // internals\n        this._lastPosition = new three__WEBPACK_IMPORTED_MODULE_0__.Vector3();\n        this._lastQuaternion = new three__WEBPACK_IMPORTED_MODULE_0__.Quaternion();\n        this._lastTargetPosition = new three__WEBPACK_IMPORTED_MODULE_0__.Vector3();\n        // so camera.up is the orbit axis\n        this._quat = new three__WEBPACK_IMPORTED_MODULE_0__.Quaternion().setFromUnitVectors(object.up, new three__WEBPACK_IMPORTED_MODULE_0__.Vector3(0, 1, 0));\n        this._quatInverse = this._quat.clone().invert();\n        // current position in spherical coordinates\n        this._spherical = new three__WEBPACK_IMPORTED_MODULE_0__.Spherical();\n        this._sphericalDelta = new three__WEBPACK_IMPORTED_MODULE_0__.Spherical();\n        this._scale = 1;\n        this._panOffset = new three__WEBPACK_IMPORTED_MODULE_0__.Vector3();\n        this._rotateStart = new three__WEBPACK_IMPORTED_MODULE_0__.Vector2();\n        this._rotateEnd = new three__WEBPACK_IMPORTED_MODULE_0__.Vector2();\n        this._rotateDelta = new three__WEBPACK_IMPORTED_MODULE_0__.Vector2();\n        this._panStart = new three__WEBPACK_IMPORTED_MODULE_0__.Vector2();\n        this._panEnd = new three__WEBPACK_IMPORTED_MODULE_0__.Vector2();\n        this._panDelta = new three__WEBPACK_IMPORTED_MODULE_0__.Vector2();\n        this._dollyStart = new three__WEBPACK_IMPORTED_MODULE_0__.Vector2();\n        this._dollyEnd = new three__WEBPACK_IMPORTED_MODULE_0__.Vector2();\n        this._dollyDelta = new three__WEBPACK_IMPORTED_MODULE_0__.Vector2();\n        this._dollyDirection = new three__WEBPACK_IMPORTED_MODULE_0__.Vector3();\n        this._mouse = new three__WEBPACK_IMPORTED_MODULE_0__.Vector2();\n        this._performCursorZoom = false;\n        this._pointers = [];\n        this._pointerPositions = {};\n        this._controlActive = false;\n        // event listeners\n        this._onPointerMove = onPointerMove.bind(this);\n        this._onPointerDown = onPointerDown.bind(this);\n        this._onPointerUp = onPointerUp.bind(this);\n        this._onContextMenu = onContextMenu.bind(this);\n        this._onMouseWheel = onMouseWheel.bind(this);\n        this._onKeyDown = onKeyDown.bind(this);\n        this._onTouchStart = onTouchStart.bind(this);\n        this._onTouchMove = onTouchMove.bind(this);\n        this._onMouseDown = onMouseDown.bind(this);\n        this._onMouseMove = onMouseMove.bind(this);\n        this._interceptControlDown = interceptControlDown.bind(this);\n        this._interceptControlUp = interceptControlUp.bind(this);\n        //\n        if (this.domElement !== null) {\n            this.connect();\n        }\n        this.update();\n    }\n}\nfunction onPointerDown(event) {\n    if (this.enabled === false) return;\n    if (this._pointers.length === 0) {\n        this.domElement.setPointerCapture(event.pointerId);\n        this.domElement.addEventListener(\"pointermove\", this._onPointerMove);\n        this.domElement.addEventListener(\"pointerup\", this._onPointerUp);\n    }\n    //\n    if (this._isTrackingPointer(event)) return;\n    //\n    this._addPointer(event);\n    if (event.pointerType === \"touch\") {\n        this._onTouchStart(event);\n    } else {\n        this._onMouseDown(event);\n    }\n}\nfunction onPointerMove(event) {\n    if (this.enabled === false) return;\n    if (event.pointerType === \"touch\") {\n        this._onTouchMove(event);\n    } else {\n        this._onMouseMove(event);\n    }\n}\nfunction onPointerUp(event) {\n    this._removePointer(event);\n    switch(this._pointers.length){\n        case 0:\n            this.domElement.releasePointerCapture(event.pointerId);\n            this.domElement.removeEventListener(\"pointermove\", this._onPointerMove);\n            this.domElement.removeEventListener(\"pointerup\", this._onPointerUp);\n            this.dispatchEvent(_endEvent);\n            this.state = _STATE.NONE;\n            break;\n        case 1:\n            const pointerId = this._pointers[0];\n            const position = this._pointerPositions[pointerId];\n            // minimal placeholder event - allows state correction on pointer-up\n            this._onTouchStart({\n                pointerId: pointerId,\n                pageX: position.x,\n                pageY: position.y\n            });\n            break;\n    }\n}\nfunction onMouseDown(event) {\n    let mouseAction;\n    switch(event.button){\n        case 0:\n            mouseAction = this.mouseButtons.LEFT;\n            break;\n        case 1:\n            mouseAction = this.mouseButtons.MIDDLE;\n            break;\n        case 2:\n            mouseAction = this.mouseButtons.RIGHT;\n            break;\n        default:\n            mouseAction = -1;\n    }\n    switch(mouseAction){\n        case three__WEBPACK_IMPORTED_MODULE_0__.MOUSE.DOLLY:\n            if (this.enableZoom === false) return;\n            this._handleMouseDownDolly(event);\n            this.state = _STATE.DOLLY;\n            break;\n        case three__WEBPACK_IMPORTED_MODULE_0__.MOUSE.ROTATE:\n            if (event.ctrlKey || event.metaKey || event.shiftKey) {\n                if (this.enablePan === false) return;\n                this._handleMouseDownPan(event);\n                this.state = _STATE.PAN;\n            } else {\n                if (this.enableRotate === false) return;\n                this._handleMouseDownRotate(event);\n                this.state = _STATE.ROTATE;\n            }\n            break;\n        case three__WEBPACK_IMPORTED_MODULE_0__.MOUSE.PAN:\n            if (event.ctrlKey || event.metaKey || event.shiftKey) {\n                if (this.enableRotate === false) return;\n                this._handleMouseDownRotate(event);\n                this.state = _STATE.ROTATE;\n            } else {\n                if (this.enablePan === false) return;\n                this._handleMouseDownPan(event);\n                this.state = _STATE.PAN;\n            }\n            break;\n        default:\n            this.state = _STATE.NONE;\n    }\n    if (this.state !== _STATE.NONE) {\n        this.dispatchEvent(_startEvent);\n    }\n}\nfunction onMouseMove(event) {\n    switch(this.state){\n        case _STATE.ROTATE:\n            if (this.enableRotate === false) return;\n            this._handleMouseMoveRotate(event);\n            break;\n        case _STATE.DOLLY:\n            if (this.enableZoom === false) return;\n            this._handleMouseMoveDolly(event);\n            break;\n        case _STATE.PAN:\n            if (this.enablePan === false) return;\n            this._handleMouseMovePan(event);\n            break;\n    }\n}\nfunction onMouseWheel(event) {\n    if (this.enabled === false || this.enableZoom === false || this.state !== _STATE.NONE) return;\n    event.preventDefault();\n    this.dispatchEvent(_startEvent);\n    this._handleMouseWheel(this._customWheelEvent(event));\n    this.dispatchEvent(_endEvent);\n}\nfunction onKeyDown(event) {\n    if (this.enabled === false) return;\n    this._handleKeyDown(event);\n}\nfunction onTouchStart(event) {\n    this._trackPointer(event);\n    switch(this._pointers.length){\n        case 1:\n            switch(this.touches.ONE){\n                case three__WEBPACK_IMPORTED_MODULE_0__.TOUCH.ROTATE:\n                    if (this.enableRotate === false) return;\n                    this._handleTouchStartRotate(event);\n                    this.state = _STATE.TOUCH_ROTATE;\n                    break;\n                case three__WEBPACK_IMPORTED_MODULE_0__.TOUCH.PAN:\n                    if (this.enablePan === false) return;\n                    this._handleTouchStartPan(event);\n                    this.state = _STATE.TOUCH_PAN;\n                    break;\n                default:\n                    this.state = _STATE.NONE;\n            }\n            break;\n        case 2:\n            switch(this.touches.TWO){\n                case three__WEBPACK_IMPORTED_MODULE_0__.TOUCH.DOLLY_PAN:\n                    if (this.enableZoom === false && this.enablePan === false) return;\n                    this._handleTouchStartDollyPan(event);\n                    this.state = _STATE.TOUCH_DOLLY_PAN;\n                    break;\n                case three__WEBPACK_IMPORTED_MODULE_0__.TOUCH.DOLLY_ROTATE:\n                    if (this.enableZoom === false && this.enableRotate === false) return;\n                    this._handleTouchStartDollyRotate(event);\n                    this.state = _STATE.TOUCH_DOLLY_ROTATE;\n                    break;\n                default:\n                    this.state = _STATE.NONE;\n            }\n            break;\n        default:\n            this.state = _STATE.NONE;\n    }\n    if (this.state !== _STATE.NONE) {\n        this.dispatchEvent(_startEvent);\n    }\n}\nfunction onTouchMove(event) {\n    this._trackPointer(event);\n    switch(this.state){\n        case _STATE.TOUCH_ROTATE:\n            if (this.enableRotate === false) return;\n            this._handleTouchMoveRotate(event);\n            this.update();\n            break;\n        case _STATE.TOUCH_PAN:\n            if (this.enablePan === false) return;\n            this._handleTouchMovePan(event);\n            this.update();\n            break;\n        case _STATE.TOUCH_DOLLY_PAN:\n            if (this.enableZoom === false && this.enablePan === false) return;\n            this._handleTouchMoveDollyPan(event);\n            this.update();\n            break;\n        case _STATE.TOUCH_DOLLY_ROTATE:\n            if (this.enableZoom === false && this.enableRotate === false) return;\n            this._handleTouchMoveDollyRotate(event);\n            this.update();\n            break;\n        default:\n            this.state = _STATE.NONE;\n    }\n}\nfunction onContextMenu(event) {\n    if (this.enabled === false) return;\n    event.preventDefault();\n}\nfunction interceptControlDown(event) {\n    if (event.key === \"Control\") {\n        this._controlActive = true;\n        const document = this.domElement.getRootNode(); // offscreen canvas compatibility\n        document.addEventListener(\"keyup\", this._interceptControlUp, {\n            passive: true,\n            capture: true\n        });\n    }\n}\nfunction interceptControlUp(event) {\n    if (event.key === \"Control\") {\n        this._controlActive = false;\n        const document = this.domElement.getRootNode(); // offscreen canvas compatibility\n        document.removeEventListener(\"keyup\", this._interceptControlUp, {\n            passive: true,\n            capture: true\n        });\n    }\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/three/examples/jsm/controls/OrbitControls.js\n"));

/***/ })

});